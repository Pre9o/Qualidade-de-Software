{"Id": 70552008, "PostTypeId": 1, "Title": "Java hidden properties without Spring", "Body": "<p>I am currently creating a Java program that uses a MongoDB database and I am storing the connection information in a properties file.</p>\n<p>But my project is opensource on GitHub and I cannot store the connection information in the properties file.</p>\n<p>And so I wanted to ask you if it is possible to give the login information from docker run.</p>\n<p>example : <code>docker run registry/image -args db.password=psw db.username=user</code></p>\n<p>I have seen solutions in stackoverflow but all solutions use Spring features, but my project does not use Spring framework.</p>\n", "AcceptedAnswerId": 70556743, "AcceptedAnswer": "<p>We have multiple solutions for this:</p>\n<h2>Secret Docker</h2>\n<p>Create a file with the properties syntax:</p>\n<pre><code>//secret-file.txt\ndb.password=psw\ndb.username=user\n</code></pre>\n<p>With this file create a <em>docker secret</em> in your docker :</p>\n<pre class=\"lang-sh prettyprint-override\"><code>$ docker secret create test-secret secret-file.txt\n</code></pre>\n<p>And use this with the java library <a href=\"https://github.com/carsdotcom/docker-secrets-java\" rel=\"noreferrer\"><em>docker-secrets</em></a> in your java program :</p>\n<pre class=\"lang-java prettyprint-override\"><code>Map&lt;String, String&gt; secrets = DockerSecrets.loadFromFile(&quot;test-secret&quot;);\nSystem.out.println(secrets.get(&quot;db.password&quot;)) // readonly\n</code></pre>\n<p>For more example, look <a href=\"https://github.com/carsdotcom/docker-secrets-java\" rel=\"noreferrer\">here</a>.</p>\n<hr />\n<h2>Environment variables</h2>\n<p>Set the environment variables in the docker with <code>-e</code> argument :</p>\n<pre class=\"lang-sh prettyprint-override\"><code>$ docker run -e DB_PASSWORD=pwd -e DB_USERNAME=user registry/image:tag\n</code></pre>\n<p>And use these variables with <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/System.html#getenv(java.lang.String)\" rel=\"noreferrer\"><code>System::getenv</code></a> in your java program :</p>\n<pre class=\"lang-java prettyprint-override\"><code>System.out.println(System.getenv(&quot;DB_PASSWORD&quot;))\n</code></pre>\n<hr />\n<h2>VM Arguments</h2>\n<p><em>This solution depends on your base image that was used to create your Docker container.</em></p>\n<p>Give <em>VM Arguments</em> to the <em>docker run</em> command :</p>\n<pre class=\"lang-sh prettyprint-override\"><code>$ docker run -e JAVA_OPTS=&quot;-Ddb.password=pwd -Ddb.username=user&quot; registry/image:tag\n</code></pre>\n<p>And use these variables with <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String)\" rel=\"noreferrer\"><code>System::getProperty</code></a> in your java program :</p>\n<pre class=\"lang-java prettyprint-override\"><code>System.out.println(System.getProperty(&quot;db.password&quot;))\n</code></pre>\n<hr />\n<h2>Program arguments</h2>\n<p>Give arguments to docker run command :</p>\n<p><em>It is important to give the arguments after declaring the image.</em></p>\n<pre class=\"lang-sh prettyprint-override\"><code>$ docker run registry/image:tag pwd user\n</code></pre>\n<p>And use these arguments with <em>main</em> method in your java program :</p>\n<pre class=\"lang-java prettyprint-override\"><code>public static void main(String[] args) {\n    System.out.println(&quot;The password: &quot; + args[0]);\n    System.out.println(&quot;The username: &quot; + args[1]);\n}\n</code></pre>\n<p>For better handling of arguments, you can use the Apache's <a href=\"http://commons.apache.org/cli/\" rel=\"noreferrer\"><em>commons-cli</em></a> java library or use <a href=\"http://jewelcli.lexicalscope.com/related.html\" rel=\"noreferrer\">a another library</a>.</p>\n"}
{"Id": 70601508, "PostTypeId": 1, "Title": "Can I use Java 16 record with JPA entity?", "Body": "<p>I am trying to do something similar like below.</p>\n<pre><code>@Entity\n@Table(name=&quot;Sample&quot;)\npublic record Sample(Integer id, String name) {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name=&quot;user_id&quot;)\n    private Integer id;\n\n    @Column(name=&quot;username&quot;)\n    private String name;\n\n}\n</code></pre>\n<p>However, it gives me error &quot;User declared non-static fields id are not permitted in a record&quot;\nand same for name field as well.</p>\n<p>Is there a way to use new java feature &quot;record&quot; with JPA annotation?</p>\n", "AcceptedAnswerId": 70601646, "AcceptedAnswer": "<p>See the article, <a href=\"https://wkorando.github.io/sip-of-java/015.html\" rel=\"noreferrer\"><em>Using Records as Projections in JPA</em></a> by Billy Korando. The following is a brief summary.</p>\n<h1>Records cannot be Entities</h1>\n<p><a href=\"https://en.wikipedia.org/wiki/Jakarta_Persistence\" rel=\"noreferrer\"><em>Jakarta Persistence</em> </a> (<em>JPA</em>; formerly <em>Java Persistence API</em>) implementations such as <a href=\"https://en.wikipedia.org/wiki/Hibernate_(framework)\" rel=\"noreferrer\"><em>Hibernate</em></a> depend on features either forbidden or not recommended by the <a href=\"https://openjdk.java.net/jeps/395\" rel=\"noreferrer\">JEP 395: Records</a> spec: no-arg constructors, non-final fields, setters, etc.</p>\n<p>\u27a5 So, no, records cannot be used as JPA <code>Entity</code>.</p>\n<h1>Other uses of records</h1>\n<p>You can use records with:</p>\n<ul>\n<li><code>CriteriaBuilder</code></li>\n<li><code>TypedQuery</code></li>\n<li><code>NativeQuery</code></li>\n<li>Mapping definition</li>\n</ul>\n<p>Spring data has some support as well.</p>\n<p>See that article linked above for details, and for links to two other articles.</p>\n"}
{"Id": 70601178, "PostTypeId": 1, "Title": "Java Generics: What is the benefit of using wildcards here?", "Body": "<p>The <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Collections.html#fill(java.util.List,T)\" rel=\"noreferrer\">Collections.fill</a> method has the following header:</p>\n<pre><code>public static &lt;T&gt; void fill(List&lt;? super T&gt; list, T obj)\n</code></pre>\n<p>Why is the wildcard necessary? The following header seems to work just as well:</p>\n<pre><code>public static &lt;T&gt; void fill(List&lt;T&gt; list, T obj)\n</code></pre>\n<p>I cannot see a reason why the wildcard is needed; code such as the following works with the second header as well as the first:</p>\n<pre><code>List&lt;Number&gt; nums = new ArrayList&lt;&gt;();\nInteger i = 43;\nfill(nums, i); //fill method written using second header\n</code></pre>\n<p>My question is: <strong>For what specific call of <code>fill</code> would the first header work but not the second? And if there is no such call, why include the wildcard?</strong> In this case, the wildcard does not make the method more concise nor add to readability (in my opinion).</p>\n", "AcceptedAnswerId": 70627059, "AcceptedAnswer": "<p>This is a really good question and the simple answer was guessed already:</p>\n<blockquote>\n<p>For the current version of the <code>fill(List&lt;? super T&gt; list, T obj)</code> there is no\nsuch input that would be rejected given the signature is changed to <code>fill(List&lt;T&gt; list, T obj)</code>, so there is no benefit and the devs are likely followed the PECS principle</p>\n</blockquote>\n<p>The above statement derives from the principle that: if there is a such type <code>X</code> so that\n<code>X</code> is a supertype of <code>T</code> then <code>List&lt;X&gt;</code> is a supertype of <code>List&lt;? super T&gt;</code> because of type contravariance.\nSince we can always find such <code>X</code> (at the worst case it's the <code>Object</code> class) - the compiler can infer a suitable <code>List&lt;X&gt;</code> argument type given either form of <code>fill</code>.</p>\n<p>So, knowing that fact we can interfere with the compiler and infer the type ourselves using &quot;type witness&quot; so the code breaks:</p>\n<pre><code>List&lt;Object&gt; target = new ArrayList&lt;&gt;();\n//Compiles OK as we can represent List&lt;Object&gt; as List&lt;? super Integer&gt; and it fits\nCollections.&lt;Integer&gt;fill(target, 1);\n\n//Compilation error as List&lt;Object&gt; is invariant to List&lt;Integer&gt; and not a valid substitute\nCollections.&lt;Integer&gt;fillNew(target, 1);\n</code></pre>\n<p>This is all of course purely theoretical and nobody in their right mind would use the type argument there.</p>\n<p><strong>HOWEVER</strong></p>\n<p>While answering the question &quot;<em>What is the benefit of using wildcards here?</em>&quot; we yet considered only one side of the equation - us, consumers of the method and our experience but not library developers.</p>\n<p>Hence this question is somewhat similar to why <code>Collections.enumeration(final Collection&lt;T&gt; c)</code> is declared the way it is and not <code>enumeration(Collection&lt;T&gt; c)</code> as <code>final</code> seems superfluous for the end-user.</p>\n<p>We can speculate here about the real intention, but I can give a few subjective reasons:</p>\n<ol>\n<li>First: using <code>List&lt;? super T&gt;</code> (as well as <code>final</code> for <code>enumeration</code>) immediately disambiguates the code that tiny bit more and for the <code>&lt;? super T&gt;</code> specifically - it useful to show that only partial knowledge about the\ntype parameter is required and the <code>list</code> cannot be used to produce values of T, but only to consume them.\nQuote:</li>\n</ol>\n<blockquote>\n<p>Wildcards are useful in situations where only partial knowledge about the type parameter is required.\n<em><a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1\" rel=\"nofollow noreferrer\">JLS 4.5.1. Type Arguments of Parameterized Types</a></em></p>\n</blockquote>\n<ol start=\"2\">\n<li>Second: it gives some freedom to the library owners to improve/update the method without breaking backward compatibility while conforming to the existing constraints.</li>\n</ol>\n<hr />\n<p>Now let's try make up some hypothetical &quot;improvements&quot; to see what I mean (I'll call the form of <code>fill</code> that uses <code>List&lt;T&gt;</code> as <code>fillNew</code>):</p>\n<p>#1 The decision is to make method to return the <code>obj</code> value (used to fill up the list) back:</p>\n<pre><code>public static &lt;T&gt; void fill(List&lt;? super T&gt; list, T obj)\n//becomes \u2193\u2193\u2193\npublic static &lt;T&gt; T fill(List&lt;? super T&gt; list, T obj)\n</code></pre>\n<p>The updated method would work just fine for <code>fill</code> signature, but for <code>fillNew</code> - the inferred return type now isn't that obvious:</p>\n<pre><code>List&lt;Number&gt; target = new ArrayList&lt;&gt;();\nLong val = fill(target, 1L); //&lt;&lt;Here Long is the most specific type that fits both arguments\n//Compilation error\nLong val = fillNew(target, 1L); //&lt;&lt;Here Number is, so it cannot be assigned back\n\n//More exotic case:\nInteger val = fill(asList(true), 0); //val is Integer as expected\nComparable&lt;?&gt; val = fillNew(asList(true), 0); //val is now Comparable&lt;?&gt; as the most specific type \n</code></pre>\n<p>#2 The decision to add an overloaded version of <code>fill</code> that is 10x more performant in cases when <code>T</code> is <code>Comparable&lt;T&gt;</code>:</p>\n<pre><code>/* Extremely performant 10x version */\npublic static &lt;T extends Comparable&lt;T&gt;&gt; void fill(List&lt;? super T&gt; list, T value)\n/* Normal version */\npublic static void fill(List&lt;? super T&gt; list, T value)\n\nList&lt;Number&gt; target = new ArrayList&lt;&gt;();\nfill(target, 1);  //&lt;&lt;&lt; Here the more performant version is used as T inferred to Integer and it implements Comparable&lt;Integer&gt;\nfillNew(target, 1); //&lt;&lt; Still uses the slow version just because T is inferred to Number which is not Comparable\n    \n</code></pre>\n<p>To sum up - the current signature of <code>fill</code> is more flexible/descriptive in my opinion for all parties (developers and library designers)</p>\n"}
{"Id": 70681453, "PostTypeId": 1, "Title": "How to implement fixed points of functors in Java", "Body": "<p>I recently discovered how to <a href=\"https://github.com/highj/highj\" rel=\"nofollow noreferrer\">simulate higher order types in Java</a>  in a somewhat roundabout way like so</p>\n<pre><code>interface H&lt;F, T&gt; { }\n</code></pre>\n<p>Here <code>H</code> encodes a higher order type that takes a type parameter <code>F</code> which itself takes parameter <code>T</code>.</p>\n<p>Now this leaves me to wonder, can we use this to implement some more advanced constructs? E.g. fixed point of functors\nlike <a href=\"https://hackage.haskell.org/package/data-fix-0.3.0/docs/Data-Fix.html\" rel=\"nofollow noreferrer\">Fix in Haskell</a> and its corresponding <a href=\"https://hackage.haskell.org/package/data-fix-0.3.0/docs/Data-Fix.html#g:6\" rel=\"nofollow noreferrer\">catamorphisms</a>?</p>\n", "AcceptedAnswerId": 70681454, "AcceptedAnswer": "<p>Indeed this can be done by carefully translating the corresponding Haskell counterparts. Although this introduces a lot of line noise,\nthe implementation is quite close to the original:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>// Encoding of higher kinded type F of T\npublic interface H&lt;F, T&gt; { }\n\npublic interface Functor&lt;F, T&gt; {\n    &lt;R&gt; H&lt;F, R&gt; map(Function&lt;T, R&gt; f);\n}\n\n// newtype Fix f = Fix {unfix::f (Fix f)}\npublic static record Fix&lt;F extends H&lt;F, T&gt; &amp; Functor&lt;F, T&gt;, T&gt;(F f) {\n    public Functor&lt;F, Fix&lt;F, T&gt;&gt; unfix() {\n        return (Functor&lt;F, Fix&lt;F, T&gt;&gt;) f;\n    }\n}\n\n// type Algebra f a = f a -&gt; a\npublic interface Algebra&lt;F, T&gt; extends Function&lt;H&lt;F, T&gt;, T&gt; {}\n\n // cata :: Functor f =&gt; Algebra f a -&gt; Fix f -&gt; a\n // cata alg = alg . fmap (cata alg) . unfix\npublic static &lt;F extends H&lt;F, T&gt; &amp; Functor&lt;F, T&gt;, T&gt; Function&lt;Fix&lt;F, T&gt;, T&gt; cata(Algebra&lt;F, T&gt; alg) {\n    return fix -&gt; alg.apply(fix.unfix().map(cata(alg)));\n}\n</code></pre>\n<p>Amazingly this works and can be used to implement e.g. <a href=\"https://github.com/mduerig/java-functional/blob/master/src/michid/fun/fix/Expression.java#L25\" rel=\"nofollow noreferrer\">interpreters for expression algebras</a></p>\n<pre class=\"lang-java prettyprint-override\"><code>// evalExprF :: Algebra ExprF Int\n// evalExprF (Const n) = n\n// evalExprF (Add m n) = m + n\n// evalExprF (Mul m n) = m * n\npublic static class ExprAlg implements Algebra&lt;Expr, Integer&gt; {\n    @Override\n    public Integer apply(H&lt;Expr, Integer&gt; hExpr) {\n        return Expr.expr(hExpr).match(\n            conzt -&gt; conzt.n,\n            add   -&gt; add.t1 + add.t2,\n            mul   -&gt; mul.t1 * mul.t2);\n    }\n}\n</code></pre>\n<p>Full working example in my <a href=\"https://github.com/mduerig/java-functional\" rel=\"nofollow noreferrer\">GitHub repository</a>.</p>\n"}
{"Id": 70654559, "PostTypeId": 1, "Title": "How to give certificate to Java Websocket?", "Body": "<p>Forgive me for the newb question, but I am confused and obviously not understanding the fundamentals or explanations of how to use a Websocket server hosted over <code>HTTPS</code>. Everything I find online leads me to have more questions than answers.</p>\n<p>I have a Websocket server hosted on my <code>HTTPS</code> website using Java code.</p>\n<p>This is my <code>WebsocketServer.java</code> file:</p>\n<pre><code>import org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.net.InetSocketAddress;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\npublic class WebsocketServer extends WebSocketServer {\n\n    private static final Logger logger = LogManager.getLogger(WebsocketServer.class);\n\n    private static int TCP_PORT = 6868;\n\n    private static Set&lt;WebSocket&gt; conns;\n\n    public WebsocketServer() {\n        super(new InetSocketAddress(TCP_PORT));\n        conns = new HashSet&lt;&gt;();\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        conns.add(conn);\n        logger.info(&quot;New connection from &quot; + conn.getRemoteSocketAddress().getAddress().getHostAddress());\n        logger.info(&quot;Size of connection list: &quot; + conns.size());\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        conns.remove(conn);\n        logger.info(&quot;Closed connection to &quot; + conn.getRemoteSocketAddress().getAddress().getHostAddress());\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        logger.info(&quot;Message from client: {}&quot;, message);\n        // for (WebSocket sock : conns) {\n        // sock.send(&quot;SENDING BACK&quot; + message);\n        // }\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n\n        // ex.printStackTrace();\n        try {\n            if (conn != null) {\n                conns.remove(conn);\n                // do some thing if required\n            }\n            logger.info(&quot;ERROR from {}&quot;, conn.getRemoteSocketAddress().getAddress().getHostAddress());\n        } catch (Exception e) {\n            logger.info(&quot;onError: WebSocketServer may already be running&quot;);\n\n        }\n\n    }\n\n    public Set&lt;WebSocket&gt; getConns() {\n        return conns;\n    }\n\n}\n\n</code></pre>\n<p>Then I started the <code>WebsocketServer</code> like this:</p>\n<pre><code>WebsocketServer websocketServer;\n// Start socket server\nwebsocketServer = new WebsocketServer();\nwebsocketServer.start();\n</code></pre>\n<p>And on the client side, I connect to it like this:</p>\n<pre><code>    // APP_WEB_SOCKET is the url to my site: api.my_custom_domain.com\n    var connection = new WebSocket(&quot;wss://&quot; + APP_WEB_SOCKET + &quot;:6868&quot;);\n</code></pre>\n<p><strong>QUESTIONS:</strong>\nI keep reading that I need a certificate if I want to use <code>wss</code> over <code>HTTPS</code>, but cannot find any documents that explain what this means in a way that I can understand.</p>\n<p>My app is hosted in AWS Elastic Beanstalk environment. Do I need to somehow add a certificate to the setup of the <code>WebsocketServer</code> in my Java code?\nExample:</p>\n<pre><code>WebsocketServer websocketServer;\n// Start socket server\nwebsocketServer = new WebsocketServer();\n\n// example guessing\nwebsocketServer.cert = &quot;SOMETHING&quot;;??\nwebsocketServer.start();\n</code></pre>\n<p>Does the client code need to be changed at all?</p>\n<p>Who needs the certificate?</p>\n<p>If someone could please explain what I am missing or point me in the correct direction, I would really appreciate it.</p>\n", "AcceptedAnswerId": 70698577, "AcceptedAnswer": "<p>Keep it easy.<br />\nCerts inside your application are complex - they are hard to manage and you will get problems to run your application in a modern cloud environment (start new environments, renew certs, scale your application, ...).</p>\n<p>Simple conclusion: <strong>Dont implement any certs.</strong></p>\n<h2>How-to get encrypted connections?</h2>\n<p>As Mike already pointed out in the comments: WebSockets are just upgraded HTTP(S) connections. A normal webserver (nginx, apache) takes care about the certs. It can be done in kubernetes (as ingress-controller) or with a &quot;bare-metal&quot; webserver.<br />\nBoth of them should act as a reverse-proxy. This means: Your java-application doesn't know anything about certs. It has just unencrypted connections - like in your code on port <code>6868</code>.<br />\nBut the client will not use this port. <code>6868</code> is only internally reachable.</p>\n<p>The client will call your reverse-proxy at the normal HTTPS port (=443). The reverse-proxy will forward the connection to your java-application.</p>\n<p>Here some links for further information:</p>\n<ul>\n<li><a href=\"https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/\" rel=\"nofollow noreferrer\">nginx reverse-proxy</a></li>\n<li><a href=\"https://www.nginx.com/blog/websocket-nginx/\" rel=\"nofollow noreferrer\">nginx reverse-proxy for websocket</a></li>\n<li><a href=\"https://medium.com/@mirela95/apache-http-server-as-reverse-proxy-with-java-back-end-application-running-on-tomcat-9c8c9210783e\" rel=\"nofollow noreferrer\">tutorial for java behind reverse-proxy</a></li>\n<li><a href=\"https://letsencrypt.org/getting-started/\" rel=\"nofollow noreferrer\">LetsEncrypt for automatic and free certs</a></li>\n</ul>\n"}
{"Id": 70860253, "PostTypeId": 1, "Title": "Java map function throws non-static method compiler error", "Body": "<p>I have an odd problem, where I am struggling to understand the nature of &quot;static context&quot; in Java, despite the numerous SO questions regarding the topic.</p>\n<p><strong>TL;DR:</strong></p>\n<p>I have a design flaw, where ...</p>\n<p><strong>This works:</strong></p>\n<pre><code>List&lt;OrderExtnTrans&gt; list = orderType.getOrderExtnTransList();\nthis.dtoOrderExtnTransList = list.stream().map(OrderExtnTrans::toDto).collect(Collectors.toList());\n</code></pre>\n<p><strong>But this does not:</strong></p>\n<pre><code>this.dtoOrderExtnTransList = orderType.getOrderExtnTransList().stream().map(OrderExtnTrans::toDto).collect(Collectors.toList());\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/cEY1t.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/cEY1t.png\" alt=\"Issue\" /></a>\nThe error shown in the second version is &quot;Non-static method cannot be referenced from a static context&quot;.</p>\n<p><strong>The long version:</strong></p>\n<p>Object Model:\nThe model consists of Business Type specific orders (eg. Stock exchange, payments), which inherit from a an order entity via an &quot;InheritanceType.JOINED&quot; inheritance strategy.\nThe parent order can be parameterized with the business type specific DTO object of that order, so for example DtoStockExchangeOrder. This is to enable, that JPA objects can be mapped to their DTO equivalent within the Entity, rather than in a service (which I did previously. It worked, but its &quot;less clean&quot;).</p>\n<p><strong>JPA Order:</strong></p>\n<pre><code>@Entity\n@Table(name = &quot;ORDER_BASE&quot;)\n@Inheritance(strategy = InheritanceType.JOINED)\npublic class Order&lt;DtoOrderType extends DtoOrder&gt; implements Serializable {\n\n    @OneToMany(fetch = FetchType.LAZY, mappedBy = &quot;order&quot;, orphanRemoval = true)\n    private List&lt;OrderExtnTrans&gt; orderExtnTransList = new ArrayList&lt;&gt;();\n\n}\n</code></pre>\n<p><strong>JPA Order - Business Type specific example:</strong></p>\n<pre><code>@Entity\n@Table(name = &quot;ORDER_STEX&quot;)\n@Inheritance(strategy = InheritanceType.JOINED)\npublic class OrderStex extends Order&lt;DtoOrderStex&gt; implements Serializable {\n</code></pre>\n<p>Likewise, DTO orders follow the same pattern, where they can be parameterized with the business type specific JPA entity, to enable the relevant mapping:</p>\n<p><strong>DTO Order:</strong></p>\n<pre><code>public class DtoOrder&lt;OrderType extends Order&gt; extends DtoEntity {\n</code></pre>\n<p><strong>DTO Order - Business Type Specific Example</strong></p>\n<pre><code>public class DtoOrderStex extends DtoOrder&lt;OrderStex&gt; {\n</code></pre>\n<p>The DTOEntity class it inherits from is just a &quot;wrapper&quot; class, consisting of an ID and a name.</p>\n<p>Now the tricky part:\nThe DTOOrder class has a constructor which populates the fields that are common to all business types, like the list of process status transitions, an order goes through in its life cycle (placed, cancelled, executed, etc..). Staying with the example of the process status transitions, these are also modelled as JPA entities in the database, with their corresponding DTO counterparts (likewise parameterized, that part works fine).</p>\n<p>Here the constructor:</p>\n<pre><code>public DtoOrder(OrderType orderType) {\n    super(orderType);\n    // this is the part from above, which works (but it shows a warning: Unchecked assignment: 'java.util.List' to 'java.util.List&lt;com.tradingvessel.core.persistence.model.OrderExtnTrans&gt;' )\n    List&lt;OrderExtnTrans&gt; list = orderType.getOrderExtnTransList();\n    this.dtoOrderExtnTransList = list.stream().map(OrderExtnTrans::toDto).collect(Collectors.toList());\n    // this is how I would have expected it to work, but it does not, with the error shown above: &quot;Non-static method cannot be referenced from a static context&quot;\n    this.dtoOrderExtnTransList = orderType.getOrderExtnTransList().stream().map(OrderExtnTrans::toDto).collect(Collectors.toList());\n}\n</code></pre>\n<p>If I comment out the non-working version, the application behaves as expected and throws no error, so &quot;logically&quot;, this works. But JAVA does not allow it as developed in the second version.</p>\n<p>If instead of OrderType I use &quot;Order&quot;, it works as well, but obviously throws errors elsewhere, because the signature of the constructor changed. I assume another approach would be to parameterise the method based on the the caller of the constructor or to parameterise the parent class DtoOrder to know the type of the child class, but there should be a better way?</p>\n<p>What am I doing wrong, and why does the upper version work as expected?</p>\n", "AcceptedAnswerId": 70873247, "AcceptedAnswer": "<p>Thanks for an interesting question, that shows some unexpected behaviour, that is behaving according to spec.</p>\n<p>TL;DR (ie, the correct way of quickly and easily fixing this) is to add the <strong>&lt;?&gt;</strong> generic wildcard to Order in the DtoOrder class declaration, so :</p>\n<pre><code>public class DtoOrder&lt;OrderType extends Order&lt;?&gt;&gt; extends DtoEntity {\n</code></pre>\n<p>This will make the all-in-one-line way in the constructor work \u200b:</p>\n<pre><code>\u200bthis.dtoOrderExtnTransList = orderType.getOrderExtnTransList().stream().map(OrderExtnTrans::toDto).collect(Collectors.toList());\n</code></pre>\n<p>As for why this is the fix, this is because you have defined Order as a Generic type :</p>\n<pre><code>public class Order&lt;DtoOrderType extends DtoOrder&gt; \n</code></pre>\n<p>By NOT specifying the generic type, you are declaring it (and therefore making <code>OrderType</code> as well) as a <strong>raw-type</strong>.</p>\n<p>Generally we are used to <code>List&lt;SomeType&gt;</code> being generic, that at run-time undergoes type-erasure.  Further, that if we have old code like :</p>\n<pre><code>List myRawTypeVariable = new ArrayList();\n</code></pre>\n<p>that <code>myRawType</code> is a raw type, in that we can add any <code>Object</code> and only get <code>Object</code>s out.</p>\n<p>However, it turns out that (as you have discovered) raw types go further than that, and type-erasure has compile-time implications as well.</p>\n<p>The Java Language Specification (JLS) says this (source : <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.8\" rel=\"nofollow noreferrer\">https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.8</a> )</p>\n<blockquote>\n<p>The type of a constructor (\u00a78.8), instance method (\u00a78.4, \u00a79.4), or\nnon-static field (\u00a78.3) of a raw type C that is not inherited from its\nsuperclasses or superinterfaces is the raw type that corresponds to\nthe erasure of its type in the generic declaration corresponding to C.</p>\n</blockquote>\n<p>Note that this is NOT limiting type erasure to ONLY those of the generic type;  The types of ALL instance methods get taken to their raw types !</p>\n<p>In other words, by not specifying the generic type of <code>Order</code>, you are making <code>Order</code> a raw type - and therefore turning off all Generic type-checking for that class (except for methods, etc otherwise specified, from inheritance or interfaces).</p>\n<p>So even though <code>getOrderExtnTransList()</code> is declared as returning a <code>List&lt;String&gt;</code>, because you are using <code>Order</code> as a raw-type, it's dropping the <code>&lt;String&gt;</code> generic and treating that method as simply returning a <code>List</code> (effectively a <code>List&lt;Object&gt;</code> ).</p>\n<p>You can confirm this by trying to insert a <code>peek</code>, so :</p>\n<pre><code>   \u200bthis.dtoOrderExtnTransList = orderType.getOrderExtnTransList().stream().peek(s -&gt; s.\n</code></pre>\n<p>then try to do an auto-complete.   You'll find that the options are only the members for <code>Object</code>, not the <code>endsWith</code>, etc members for <code>String</code>.</p>\n<p>This, in turn, means that when it hits <code>.map(OrderExtnTrans::toDto)</code>, instead of interpreting this for a <code>OrderExtnTrans</code> coming down the stream :</p>\n<pre><code> `.map(o -&gt; o.toDto())`, \n</code></pre>\n<p>it thinks you mean</p>\n<pre><code>  `.map(o -&gt; OrderExtnTrans.toDto(o))` \n</code></pre>\n<p>which is what is appropriate for an <code>Object</code> coming down the stream - and that is why it complains about <code>toDto</code> being a non-static method.</p>\n<p>As stated, the solution is to simply not treat <code>Order</code> as a raw-type, instead to make it generic by adding the &lt;?&gt; as above.</p>\n"}
{"Id": 71006506, "PostTypeId": 1, "Title": "Java collector teeing a list of inputs", "Body": "<p>I am trying to implement a simple collector, which takes a list of collectors and simultaneously collects values in slightly different ways from a stream.</p>\n<p>It is quite similar to <code>Collectors.teeing</code>, but differs in that it</p>\n<ol>\n<li>Receives a list of collectors instead of just two</li>\n<li>Requires all collectors to produce a value of the same type</li>\n</ol>\n<p>The type signature I want to have is</p>\n<pre><code>public static &lt;T, R&gt; Collector&lt;T, ?, List&lt;R&gt;&gt; list(\n      final List&lt;Collector&lt;T, ?, R&gt;&gt; downstreamCollectors);\n</code></pre>\n<p>One way to create such a collector would be to recursively pair up teeing collectors, like so:</p>\n<pre><code>public static &lt;T, R&gt; Collector&lt;T, ?, List&lt;R&gt;&gt; list(\n    final List&lt;Collector&lt;T, ?, R&gt;&gt; downstreamCollectors) {\n  return listrec(\n      Collectors.collectingAndThen(downstreamCollectors.get(0), List::of),\n      downstreamCollectors.stream().skip(1).toList());\n}\n\nprivate static &lt;T, R&gt; Collector&lt;T, ?, List&lt;R&gt;&gt; listrec(\n    final Collector&lt;T, ?, List&lt;R&gt;&gt; teedCollectors,\n    final List&lt;Collector&lt;T, ?, R&gt;&gt; downstreamCollectors) {\n  if (downstreamCollectors.size() == 0) {\n    return teedCollectors;\n  } else {\n    return listrec(\n        teeing(\n            teedCollectors,\n            downstreamCollectors.get(0),\n            (l, s) -&gt; Stream.concat(l.stream(), Stream.of(s)).toList()),\n        downstreamCollectors.stream().skip(1).toList());\n  }\n}\n</code></pre>\n<p>Something feels a little &quot;off&quot; with this solution, so I am trying to create the collector myself, something like:</p>\n<pre><code>public static &lt;T, R&gt; Collector&lt;T, ?, List&lt;R&gt;&gt; list2(\n    final List&lt;Collector&lt;T, ?, R&gt;&gt; downstreamCollectors) {\n  return Collector.of(\n      () -&gt; downstreamCollectors.stream().map(c -&gt; c.supplier().get()).toList(),\n      (accumulators, t) -&gt;\n          IntStream.range(0, downstreamCollectors.size())\n              .forEach(\n                  i -&gt; downstreamCollectors.get(i).accumulator().accept(accumulators.get(i), t)),\n      (accumulator1, accumulator2) -&gt;\n          IntStream.range(0, downstreamCollectors.size())\n              .mapToObj(\n                  i -&gt;\n                      downstreamCollectors\n                          .get(i)\n                          .combiner()\n                          .apply(accumulator1.get(i), accumulator2.get(i)))\n              .toList(),\n      accumulators -&gt;\n          IntStream.range(0, downstreamCollectors.size())\n              .mapToObj(i -&gt; downstreamCollectors.get(i).finisher().apply(accumulators.get(i)))\n              .toList());\n}\n</code></pre>\n<p>Because of the unbounded wildcard in the downstream collectors' accumulator type, this doesn't compile. Changing the type signature to</p>\n<pre><code>public static &lt;T, A, R&gt; Collector&lt;? super T, ?, List&lt;R&gt;&gt; list2(\n    final List&lt;Collector&lt;? super T, A, R&gt;&gt; downstreamCollectors);\n</code></pre>\n<p>solves the problem, but unfortunately renders the method much less usable as the downstream collectors (like the built in collectors from <code>java.util.stream.Collectors</code>) typically would have a unbounded wildcard in the accumulator type.</p>\n<p>Is there another way to implement this, keeping the wildcard in the method signature?</p>\n<p>I am using OpenJDK 17.0.2.</p>\n", "AcceptedAnswerId": 71019502, "AcceptedAnswer": "<p>Handling a list of collectors with arbitrary accumulator types as a flat list can\u2019t be done in a type safe way, as it would require declaring <em>n</em> type variables to capture these types, where <em>n</em> is the actual list size.</p>\n<p>Therefore, you can only implement the processing as a composition of operations, each with a finite number of components know at compile time, like your recursive approach.</p>\n<p>This still has potential for simplifications, like replacing <code>downstreamCollectors.size() == 0</code> with <code>downstreamCollectors.isEmpty()</code> or <code>downstreamCollectors.stream().skip(1).toList()</code> with a copying free <code>downstreamCollectors.subList(1, downstreamCollectors.size())</code>.</p>\n<p>But the biggest impact has replacing the recursive code with a Stream Reduction operation:</p>\n<pre class=\"lang-java prettyprint-override\"><code>public static &lt;T, R&gt; Collector&lt;T, ?, List&lt;R&gt;&gt; list(List&lt;Collector&lt;T, ?, R&gt;&gt; collectors) {\n    return collectors.stream()\n            .&lt;Collector&lt;T, ?, List&lt;R&gt;&gt;&gt;map(c-&gt; Collectors.collectingAndThen(c, List::of))\n            .reduce((c1, c2) -&gt; teeing(c1, c2,\n                        (l1, l2) -&gt; Stream.concat(l1.stream(), l2.stream()).toList()))\n            .orElseThrow(() -&gt; new IllegalArgumentException(&quot;no collector specified&quot;));\n}\n</code></pre>\n<p>This may work fairly well if you don\u2019t have a really large number of collectors to compose. A disadvantage of this concise solution is that every result will be wrapped into a single element list before the actual merging of results and even the result merging may bear multiple list copying operations.</p>\n<p>This result processing can be optimized using</p>\n<pre class=\"lang-java prettyprint-override\"><code>public static &lt;T, R&gt; Collector&lt;T, ?, List&lt;R&gt;&gt; list(List&lt;Collector&lt;T, ?, R&gt;&gt; collectors) {\n    int num = collectors.size();\n    switch(num) {\n        case 0: throw new IllegalArgumentException(&quot;no collector specified&quot;);\n        case 1: return collectingAndThen(collectors.get(0), List::of);\n        case 2: return teeing(collectors.get(0), collectors.get(1), List::of);\n        case 3: return teeing(teeing(collectors.get(0), collectors.get(1), List::of),\n                           collectors.get(2), (l,r) -&gt; List.of(l.get(0), l.get(1), r));\n        default:\n    }\n    Collector&lt;T,?,List&lt;R&gt;&gt; c = teeing(collectors.get(0), collectors.get(1), (r1, r2) -&gt; {\n        var list = new ArrayList&lt;R&gt;(num);\n        list.add(r1);\n        list.add(r2);\n        return list;\n    });\n    for(int ix = 2; ix &lt; num; ix ++) {\n        c = teeing(c, collectors.get(ix), (list, r) -&gt; { list.add(r); return list; });\n    }\n    return collectingAndThen(c, List::copyOf);\n}\n</code></pre>\n<p>This provides special cases for small numbers of collectors whose results can be used to construct an immutable result list directly. For the other cases, all results are added to an <code>ArrayList</code> first, preventing excessive list copying, before converting the list to the final immutable list. This last step could be omitted, if getting an immutable result list is not important, I just tried to be as close to the <code>Stream.toList()</code> behavior of the original approach as possible.</p>\n<p>There\u2019s still an unbalanced recursive structure behind the scenes during the Stream processing which prohibits really large numbers of collectors. There are two approaches to solve this.</p>\n<ol>\n<li><p>Implement your own type safe variant of teeing which exposes the intermediate container type, to allow to build a balanced tree and collecting all results into a list by traversing this tree without additional intermediate storage.</p>\n</li>\n<li><p>Abandon the type safety and implement the collector with a flat list and raw types. Try to limit the unsafe code as much as possible.</p>\n</li>\n</ol>\n<p>But this might not be needed when you have an estimate of the expected number of collectors to \u201ctee\u201d and find the first solution working good enough.</p>\n"}
{"Id": 70756414, "PostTypeId": 1, "Title": "java.lang.reflect.InaccessibleObjectException: Unable to make field private final java.util.Comparator java.util.TreeMap.comparator accessible:module", "Body": "<p>This is my first cucumber project and i followed a tutorial when setting everything up. It all seems to be the same but for some reason i get this:</p>\n<p>java.lang.ExceptionInInitializerError.\nCaused by: java.lang.reflect.InaccessibleObjectException: Unable to make field private final java.util.Comparator java.util.TreeMap.comparator accessible: module java.base does not &quot;opens java.util&quot; to unnamed module @74ad1f1f</p>\n<p>Any idea how to solve this error ?</p>\n<p>Below i have posted everything that comes out in my console as well as my pom file in case there is an issue with my dependencies eventhough the guy from the tutorial's pom file is identical.</p>\n<p>This is everything that comes out in my Console.</p>\n<pre><code>[31mFailed scenarios:[0m\n[31muni/login/Login.feature:3 [0m# Scenario: Enter the system.\n1 Scenarios ([31m1 failed[0m)\n5 Steps ([31m1 failed[0m, [36m4 skipped[0m)\n0m0.185s\n\njava.lang.ExceptionInInitializerError\n    at cucumber.deps.com.thoughtworks.xstream.XStream.setupConverters(XStream.java:820)\n    at cucumber.deps.com.thoughtworks.xstream.XStream.&lt;init&gt;(XStream.java:574)\n    at cucumber.deps.com.thoughtworks.xstream.XStream.&lt;init&gt;(XStream.java:530)\n    at cucumber.runtime.xstream.LocalizedXStreams$LocalizedXStream.&lt;init&gt;(LocalizedXStreams.java:50)\n    at cucumber.runtime.xstream.LocalizedXStreams.newXStream(LocalizedXStreams.java:37)\n    at cucumber.runtime.xstream.LocalizedXStreams.get(LocalizedXStreams.java:29)\n    at cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n    at cucumber.runtime.Runtime.runStep(Runtime.java:300)\n    at cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n    at cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n    at cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:44)\n    at cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:102)\n    at cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n    at cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n    at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n    at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n    at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n    at cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n    at cucumber.api.junit.Cucumber.runChild(Cucumber.java:95)\n    at cucumber.api.junit.Cucumber.runChild(Cucumber.java:38)\n    at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n    at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n    at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n    at cucumber.api.junit.Cucumber.run(Cucumber.java:100)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:93)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)\n    at \u273d.Given \u041f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u0442 \u043e\u0442\u0432\u0430\u0440\u044f \u0435\u043a\u0440\u0430\u043d\u0430 \u0437\u0430 \u0432\u0445\u043e\u0434 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0442\u0430(uni/login/Login.feature:4)\nCaused by: java.lang.reflect.InaccessibleObjectException: Unable to make field private final java.util.Comparator java.util.TreeMap.comparator accessible: module java.base does not &quot;opens java.util&quot; to unnamed module @74ad1f1f\n    at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:357)\n    at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)\n    at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:177)\n    at java.base/java.lang.reflect.Field.setAccessible(Field.java:171)\n    at cucumber.deps.com.thoughtworks.xstream.core.util.Fields.locate(Fields.java:39)\n    at cucumber.deps.com.thoughtworks.xstream.converters.collections.TreeMapConverter.&lt;clinit&gt;(TreeMapConverter.java:50)\n    at cucumber.deps.com.thoughtworks.xstream.XStream.setupConverters(XStream.java:820)\n    at cucumber.deps.com.thoughtworks.xstream.XStream.&lt;init&gt;(XStream.java:574)\n    at cucumber.deps.com.thoughtworks.xstream.XStream.&lt;init&gt;(XStream.java:530)\n    at cucumber.runtime.xstream.LocalizedXStreams$LocalizedXStream.&lt;init&gt;(LocalizedXStreams.java:50)\n    at cucumber.runtime.xstream.LocalizedXStreams.newXStream(LocalizedXStreams.java:37)\n    at cucumber.runtime.xstream.LocalizedXStreams.get(LocalizedXStreams.java:29)\n    at cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n    at cucumber.runtime.Runtime.runStep(Runtime.java:300)\n    at cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n    at cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n    at cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:44)\n    at cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:102)\n    at cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n    at cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n    at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n    at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n    at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n    at cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n    at cucumber.api.junit.Cucumber.runChild(Cucumber.java:95)\n    at cucumber.api.junit.Cucumber.runChild(Cucumber.java:38)\n    at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n    at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n    at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n    at cucumber.api.junit.Cucumber.run(Cucumber.java:100)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:93)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)\n</code></pre>\n<p>And this is my pom.xml</p>\n<pre><code>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n  &lt;groupId&gt;uni.ais&lt;/groupId&gt;\n  &lt;artifactId&gt;first-cucumber-project&lt;/artifactId&gt;\n  &lt;version&gt;1.1.0-SNAPSHOT&lt;/version&gt;\n  &lt;name&gt;first-cucumber-project-gr&lt;/name&gt;\n  &lt;properties&gt;\n    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;\n    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;\n    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n  &lt;/properties&gt;\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;info.cukes&lt;/groupId&gt;\n        &lt;artifactId&gt;cucumber-java&lt;/artifactId&gt;\n        &lt;version&gt;1.2.5&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;info.cukes&lt;/groupId&gt;\n        &lt;artifactId&gt;cucumber-junit&lt;/artifactId&gt;\n        &lt;version&gt;1.2.5&lt;/version&gt;\n    &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n&lt;/project&gt;\n</code></pre>\n", "AcceptedAnswerId": 70776589, "AcceptedAnswer": "<p>I solved my problem. Turns out the JRE that eclipse had automatically downloaded and was using wasn't compatible with this version of cucumber. I manually changed the path to a jre 1.8 that i had in my ProgramFilex(x86)/Java folder and now everything works fine.</p>\n"}
{"Id": 70786275, "PostTypeId": 1, "Title": "Reading encrypted private key in PKCS#8 format through bouncycastle, Java failing in docker container", "Body": "<p>I am trying to read a PKCS#8 private key which looks like following:</p>\n<p><strong>key.k8</strong> --&gt; (Sample key. Passphrase - 123456):</p>\n<pre><code>-----BEGIN ENCRYPTED PRIVATE KEY-----\nMIIFLTBXBgkqhkiG9w0BBQ0wSjApBgkqhkiG9w0BBQwwHAQILbKY9hPxYSoCAggA\nMAwGCCqGSIb3DQIJBQAwHQYJYIZIAWUDBAEqBBCvaGt2Hmm2NpHpxbLvHKyOBIIE\n0IQ7dVrAGXLZl0exYIvyxLAu6zO00jL6b3sb/agTcCFOz8JU6fBanxY0d5aYO4Dn\nmynQG7BoljU470s0zIwW/wk0MmdUFl4nXWBX/4qnG0sZqZ9KZ7I8R/WrBkmpX8C/\n4pjdVhu8Ht8dfOYbkbjMBTohDJz8vJ0QwDIXi9yFjjef+QjwrFOl6kAeDJFVMGqc\ns7K/wOnhsL1XxfW9uTulPiZh5YTZKcatMkeGDR7c+cg5I+Mutim92diWuCekhNoa\nuvhUy1M3cbs7Azp1Mhz+V0CDKklI95EvN4u23WhiJPCjAofC/e45/heOP3Dwm7WZ\nzHEY1C/X8PsTl6MEEIF3ZJP+4Vr0corAs1L2FqE6oOng8dFFYmF5eRyBx6bxFd05\niYbfOH24/b3qtFKPC689kGEd0gWp1dwES35SNNK+cJqVRTjgI0oKhOai3rhbGnmp\ntx4+JqploQgTorj4w9asbtZ/qZA2mYSSR/Q64SHv7LfoUCI9bgx73MqRQBgvI5yS\nb4BoFBnuEgOduZLaGKGjKVW3m5/q8oiDAaspcSLCJMIrdOTYWJB+7mfxX4Xy0vEe\n5m2jXpSLQmrfjgpSTpHDKi/3b6OzKOcHjSFBf8IoiHuLc5DVvLECzDUxxaMrTZ71\n0YXvEPwl2R9BzEANwwR9ghJvFg1Be/d5W/WA1Efe6cNQNBlmErxD6l+4KDUgGjTr\nAaksp9SZAv8uQAsg7C57NFHpTA5Hznr5JctL+WlO+Gk0cAV6i4Py3kA6EcfatsnS\nPqP2KbxT+rb2ATMUZqgWc20QvDt6j0CTA1BuVD1PNhnAUFvb2ocyEEXOra22DPPS\nUPu6jirSIyFcjqFjJ9A1FD9L4/UuX2UkDSLqblFlYB1+G55KZp+EKz8SZoN5qXy1\nLyMtnacEP5OtRDrOjopzVNiuV1Uv63M9QVi1hZlVLJEomgjWuvuyEuIwDaY2uryW\nvx+jJEZyySFkb1JwAbrm+p6sCTFnbQ/URKC2cit/FJyKqNim6VQvGL8Sez34qV3z\nD13QJgTZfsy+BaZoaQ6cJTXtJ8cN0IcQciOiDNBKMW66zO6ujS8G+KNviNQypDm6\nh4sOgjMqLaZ4ezPEdNj/gaxV7Y15nVRu0re8dVkaa5t9ft/sh6A+yeTD5tS5hHkf\nNI7uJPTaTXVoz7xq2PAJUTWujMLMZKtmNOzNqYvxWRy3tCOFobBQkMxqEBEwHd+x\nSA+gFcJKJ+aNfCGZJ5fFr8rNlhtOF6uMwOAlfiUlP/pCUDUCKPjZVj4K95yNc8Io\njSZSPb5tGPe0HqXgc6IAfQarlUZt90oVtzL0OfOfTxe1bEzS2ccNadbx/6vjLBc4\nq5UuUBppl3rXpbuZ7J1Rp3n2byF4APxFdT2LHKq+MYMfWUToau/TCMT4lFIM9tM8\n7TuuyUT2PKzf/xlsl4iScw96z9xxGPQrXn7IA2W5iL+0eCLztJdjNRX1FisdfIBL\nPraOVlmF8jHKbFdRZ8Yi8pApbQjvHi24g7dX7u/cq1FH/VE+nJ0O8YVCYVDw13CW\nh0p7yD7BuB0R+0WnR0yvkp30vK4/rtCB+Ob8bH/+HvAZrAU5X8jq/wsQbLkrLHZV\n6A6GGfX8+hy5AoaXsH1BHnMyXkaF6Mv29z8JcslDJxX/\n-----END ENCRYPTED PRIVATE KEY-----\n</code></pre>\n<p>Following code is being used to parse the private key:</p>\n<pre class=\"lang-java prettyprint-override\"><code> InputStream privateKeyInputStream = getPrivateKeyInputStream(); // reads the key file from classpath and share as DataStream\n logger.info(&quot;InputStreamExists --&gt; {} &quot;, privateKeyInputStream.available());\n PEMParser pemParser = new PEMParser(new InputStreamReader(privateKeyInputStream));\n Object pemObject = pemParser.readObject();\n if (pemObject instanceof PKCS8EncryptedPrivateKeyInfo) {\n     // Handle the case where the private key is encrypted.\n     PKCS8EncryptedPrivateKeyInfo encryptedPrivateKeyInfo = (PKCS8EncryptedPrivateKeyInfo) pemObject;\n     InputDecryptorProvider pkcs8Prov =\n            new JceOpenSSLPKCS8DecryptorProviderBuilder().build(passphrase.toCharArray());\n     privateKeyInfo = encryptedPrivateKeyInfo.decryptPrivateKeyInfo(pkcs8Prov); // fails here\n}\n\n</code></pre>\n<pre class=\"lang-java prettyprint-override\"><code>InputStream resourceAsStream = null;\n    if (&quot;local&quot;.equals(privateKeyMode)) {\n      resourceAsStream = this.getClass().getResourceAsStream(privateKeyPath);\n    } else {\n      File keyFile = new File(privateKeyPath);\n      logger.info(\n          &quot;Key file found in {} mode. FileName : {}, Exists : {}&quot;,\n          privateKeyMode,\n          keyFile.getName(),\n          keyFile.exists());\n      try {\n        resourceAsStream = new DataInputStream(new FileInputStream(keyFile));\n      } catch (FileNotFoundException e) {\n        e.printStackTrace();\n      }\n</code></pre>\n<p>When I am running this code through intelliJ on windows, the code works fine but when I run it through docker container I am getting following exception:</p>\n<pre><code>org.bouncycastle.pkcs.PKCSException: unable to read encrypted data: failed to construct sequence from byte[]: Extra data detected in stream\nsnowflake-report-sync    |      at org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo.decryptPrivateKeyInfo(Unknown Source) ~[bcpkix-jdk15on-1.64.jar!/:1.64.00.0]\nsnowflake-report-sync    |      at com.optum.snowflakereportsync.configuration.SnowFlakeConfig.getPrivateKey(SnowFlakeConfig.java:103) ~[classes!/:na]\nsnowflake-report-sync    |      at com.optum.snowflakereportsync.configuration.SnowFlakeConfig.getConnectionProperties(SnowFlakeConfig.java:67) ~[classes!/:na]\n</code></pre>\n<p>Following is Dockerfile used:</p>\n<pre><code>FROM adoptopenjdk/openjdk11-openj9:latest\nCOPY build/libs/snowflake-report-sync-*.jar snowflake-report-sync.jar\nRUN mkdir /encryption-keys\nCOPY encryption-keys/ /encryption-keys/ #keys are picked from docker filesystem when running in container\nEXPOSE 8080\nCMD java -Dcom.sun.management.jmxremote -noverify ${JAVA_OPTS} -jar snowflake-report-sync.jar\n</code></pre>\n<p><strong>Options tried:</strong></p>\n<ul>\n<li>Ensured that key file is being read while running in container. Logger &quot;InputStreamExists --&gt; {}&quot; gives number of bytes</li>\n<li>Ran dos2unix on key.k8 just to make sure there are no Window's &quot;^M&quot; characters which be could be causing issue as container is linux one : FROM adoptopenjdk/openjdk11-openj9:latest</li>\n</ul>\n<p>Not sure what I am doing wrong but any help or pointers would be appreciated.</p>\n", "AcceptedAnswerId": 70905140, "AcceptedAnswer": "<p>Like @Bragolgirith suspected, BouncyCastle seems to have problems with OpenJ9. I guess it is not a Docker issue, because I can reproduce it on GitHub Actions, too. It is also not limited to BouncyCastle 1.64 or 1.70, it happens in both versions. It also happens on OpenJ9 JDK 11, 14, 17 on Windows, MacOS and Linux, but for the same matrix of Java and OS versions it works on Adopt-Hotspot and Zulu.</p>\n<p>Here is an <a href=\"https://github.com/kriegaex/SO_Java_BouncyCastleReadPkcs8PrivateKey_70786275\" rel=\"nofollow noreferrer\">example Maven project</a> and a <a href=\"https://github.com/kriegaex/SO_Java_BouncyCastleReadPkcs8PrivateKey_70786275/actions/runs/1765677050\" rel=\"nofollow noreferrer\">failed matrix build</a>. So if you select another JVM type, you should be fine. I know that @Bragolgirith already suggested that, but I wanted to make the problem reproducible for everyone and also provide an <a href=\"https://stackoverflow.com/help/mcve\">MCVE</a>, in case someone wants to open a BC or OpenJ9 issue.</p>\n<p>P.S.: It is also not a character set issue with the <code>InputStreamReader</code>. <a href=\"https://github.com/kriegaex/SO_Java_BouncyCastleReadPkcs8PrivateKey_70786275/actions/runs/1765686524\" rel=\"nofollow noreferrer\">This build</a> fails exactly the same as before after I <a href=\"https://github.com/kriegaex/SO_Java_BouncyCastleReadPkcs8PrivateKey_70786275/commit/40d53c3ddc1f501b99da2897d8155efeab2d2970\" rel=\"nofollow noreferrer\">changed the constructor call</a>.</p>\n<hr />\n<p><strong>Update:</strong> I have created <a href=\"https://github.com/bcgit/bc-java/issues/1099\" rel=\"nofollow noreferrer\">BC-Java issue #1099</a>. Let's see what the maintainers can say about this.</p>\n<hr />\n<p><strong>Update 2:</strong> The solution to your problem is to explicitly set the security provider to BC for your input decryptor provider. Thanks to <a href=\"https://github.com/dghgit\" rel=\"nofollow noreferrer\">David Hook</a> for his <a href=\"https://github.com/bcgit/bc-java/issues/1099#issuecomment-1025253004\" rel=\"nofollow noreferrer\">helpful comment in #1099</a>.</p>\n<pre class=\"lang-java prettyprint-override\"><code>BouncyCastleProvider securityProvider = new BouncyCastleProvider();\nSecurity.addProvider(securityProvider);\n\n// (...)\n\nInputDecryptorProvider pkcs8Prov = new JceOpenSSLPKCS8DecryptorProviderBuilder()\n  // Explicitly setting security provider helps to avoid ambiguities\n  // which otherwise can cause problems, e.g. on OpenJ9 JVMs\n  .setProvider(securityProvider)\n  .build(passphrase.toCharArray());\n</code></pre>\n<p>See <a href=\"https://github.com/kriegaex/SO_Java_BouncyCastleReadPkcs8PrivateKey_70786275/commit/3bd00184436f247ea6d7ad0d9f35508b26b4bba2\" rel=\"nofollow noreferrer\">this commit</a> and the corresponding <a href=\"https://github.com/kriegaex/SO_Java_BouncyCastleReadPkcs8PrivateKey_70786275/actions/runs/1770256851\" rel=\"nofollow noreferrer\">build</a>, now passing on all platforms, Java versions and JVM types (including OpenJ9).</p>\n<p>Because @Bragolgirith mentioned it in his answer: If you want to avoid the explicit <code>new JceOpenSSLPKCS8DecryptorProviderBuilder().setProvider(securityProvider)</code>, the call <code>Security.insertProviderAt(securityProvider, 1)</code> instead of simply <code>Security.addProvider(securityProvider)</code> would in this case also solve the problem. But this holds true only as long as no other part of your code or any third-party library sets another provider to position 1 afterwards, as explained in the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/security/Security.html#insertProviderAt-java.security.Provider-int-\" rel=\"nofollow noreferrer\">Javadoc</a>. So maybe it is not a good idea to rely on that.</p>\n"}
{"Id": 70995023, "PostTypeId": 1, "Title": "What's the difference between String.format() and str.formatted() in Java?", "Body": "<p>I know that method <strong>String.format()</strong> is nearly the same as method <strong>System.out.printf()</strong> except it returns a String. But I could hardly find the introduction about method &quot;formatted&quot; which is defined as follows:</p>\n<pre class=\"lang-java prettyprint-override\"><code>public String formatted(Object... args) {\n        return new Formatter().format(this, args).toString();\n}\n</code></pre>\n<p>And I know the functions of two codes below are the same.</p>\n<pre class=\"lang-java prettyprint-override\"><code>String str1 = String.format(&quot;%s&quot;, &quot;abab&quot;);\nSystem.out.println(str1);\n</code></pre>\n<pre class=\"lang-java prettyprint-override\"><code>String str2;\nstr2 = &quot;%s&quot;.formatted(&quot;abab&quot;);\nSystem.out.println(str2);\n</code></pre>\n<p>Therefore I'm wandering what's the difference between them. Thank you!</p>\n", "AcceptedAnswerId": 70997302, "AcceptedAnswer": "<p>Make sure you use a good IDE so that you have easy access to browse into JDK source code. In Eclipse say, use F3 to open to any declaration. IntelliJ IDEA has similar feature.</p>\n<p>If you view the source code for both methods, you can see these calls are identical except that variables <code>this</code> is interchanged with <code>format</code> when comparing the instance vs static method:</p>\n<pre><code>public String formatted(Object... args) {\n    return new Formatter().format(this, args).toString();\n}\npublic static String format(String format, Object... args) {\n    return new Formatter().format(format, args).toString();\n}\n</code></pre>\n<p>So as you've observed: <code>String.format(str, args)</code> is same as <code>str.formatted(args)</code></p>\n"}
{"Id": 71059252, "PostTypeId": 1, "Title": "Mac The operation couldn\u2019t be completed. Unable to locate a Java Runtime that supports jarsigner", "Body": "<p>My purpose is to use jarsigner to sign apk.</p>\n<p>I get the following prompt\uff1a</p>\n<pre><code>% jarsigner     \nThe operation couldn\u2019t be completed. Unable to locate a Java Runtime that supports jarsigner.\nPlease visit http://www.java.com for information on installing Java.\n</code></pre>\n<p>my java version hint\uff1a</p>\n<pre><code>% java -version\njava version &quot;1.8.0_321&quot;\nJava(TM) SE Runtime Environment (build 1.8.0_321-b07)\nJava HotSpot(TM) 64-Bit Server VM (build 25.321-b07, mixed mode)\n</code></pre>\n<p>Mac version is 11.6.3</p>\n<p>How can I solve this problem please?</p>\n", "AcceptedAnswerId": 71059860, "AcceptedAnswer": "<p>I finally solved it by downloading the <a href=\"https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html\" rel=\"noreferrer\">JDK</a></p>\n"}
{"Id": 70925555, "PostTypeId": 1, "Title": "How can we provide Jackson annotations for java 17 record class", "Body": "<p>How can we create add field level annotations for java 17 record class?</p>\n<pre><code>record Rectangle(double length, double width) { }\n</code></pre>\n", "AcceptedAnswerId": 70925601, "AcceptedAnswer": "<p>yes we can use field level annotations (annotation with <code>@Target(ElementType.FIELD)</code> in the defination.</p>\n<pre><code>@JsonInclude(Include.NON_NULL)\nrecord Rectangle(\n    @JsonProperty(&quot;lengthAlias&quot;) double length,\n    double width) { }\n</code></pre>\n"}
{"Id": 71296783, "PostTypeId": 1, "Title": "JUINT test giving error java.lang.reflect.InaccessibleObjectException: Unable to make protected void java.lang.Object.finalize()", "Body": "<p>While running the test I am getting the error , I am not able to understand why am I getting this error , this code is working with fine in java 8 , while running it in java 17 it is giving error. googled this error but found nothing useful. Please help me to understand this error.\nThanks in advance:)</p>\n<pre><code>@RunWith(PowerMockRunner.class)\n@PrepareForTest({PopulatedAuthorizedUser.class})\n@SpringBootTest(classes = MockServletContext.class)\n@PowerMockIgnore({&quot;javax.management.*&quot;, &quot;javax.net.ssl.*&quot;, \n&quot;jdk.internal.reflect.*&quot;})\npublic class ProjectUserControllerTest {\n\nprivate ProjectUserController controller;\n\nprivate UUID projectId = UUID.randomUUID();\nprivate UUID groupId = UUID.randomUUID();\nprivate String email = &quot;project.user@email.com&quot;;\n\n@Mock\nprivate ProjectUserService projectUserService;\n\nprivate ObjectMapper objectMapper = new ObjectMapper();\n\n@Mock\nprotected AuthorizedUser au;\n\n@Before\npublic void setUp() throws Exception {\n    controller = new ProjectUserController();\n    FieldUtils.writeField(controller, &quot;projectUserService&quot;, projectUserService, true);\n    FieldUtils.writeField(controller, &quot;objectMapper&quot;, objectMapper, true);\n    PowerMockito.mockStatic(PopulatedAuthorizedUser.class);\n    Mockito.when(PopulatedAuthorizedUser.get()).thenReturn(mockAuthorizedUser());\n}\n\n@Test\npublic void testGetProjectUsers() {\n    Mockito.doReturn(Arrays.asList(mockProjectUser())).when(projectUserService)\n            .findProjectUsersByProjectId(projectId);\n    Mockito.doNothing().when(projectUserService).enrichUserDetails(any(ProjectUserDto.class));\n    ResponseEntity&lt;List&lt;ProjectUserDto&gt;&gt; response=controller.getProjectUsers(projectId);\n    assertNotNull(response);\n    ProjectUserDto projectUserDto = response.getBody().get(0);\n    assertEquals(groupId, projectUserDto.getGroupId());\n    assertEquals(email, projectUserDto.getUsername());\n    assertTrue(projectUserDto.getEmailNotification());\n    assertEquals(ProjectUserRole.OWNER.toString(), projectUserDto.getRole());\n   }\n\n }\n</code></pre>\n<p>Exception:</p>\n<pre><code> java.lang.reflect.InaccessibleObjectException: Unable to make protected void java.lang.Object.finalize() throws java.lang.Throwable accessible: module java.base does not &quot;opens java.lang&quot; to unnamed module @5ba23b66\n\nat java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)\nat java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)\nat java.base/java.lang.reflect.Method.checkCanSetAccessible(Method.java:199)\nat java.base/java.lang.reflect.Method.setAccessible(Method.java:193)\nat org.powermock.reflect.internal.WhiteboxImpl.doGetAllMethods(WhiteboxImpl.java:1492)\nat org.powermock.reflect.internal.WhiteboxImpl.getAllMethods(WhiteboxImpl.java:1467)\nat org.powermock.reflect.internal.WhiteboxImpl.findMethodOrThrowException(WhiteboxImpl.java:847)\nat org.powermock.reflect.internal.WhiteboxImpl.doInvokeMethod(WhiteboxImpl.java:807)\nat org.powermock.reflect.internal.WhiteboxImpl.invokeMethod(WhiteboxImpl.java:790)\nat org.powermock.reflect.Whitebox.invokeMethod(Whitebox.java:466)\nat org.powermock.modules.junit4.common.internal.impl.PowerMockJUnit4RunListener.testFinished(PowerMockJUnit4RunListener.java:55)\nat org.junit.runner.notification.SynchronizedRunListener.testFinished(SynchronizedRunListener.java:87)\nat org.junit.runner.notification.RunNotifier$9.notifyListener(RunNotifier.java:225)\nat org.junit.runner.notification.RunNotifier$SafeNotifier.run(RunNotifier.java:72)\nat org.junit.runner.notification.RunNotifier.fireTestFinished(RunNotifier.java:222)\nat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.testAborted(PowerMockJUnit44RunnerDelegateImpl.java:229)\nat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.invokeTestMethod(PowerMockJUnit44RunnerDelegateImpl.java:206)\nat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.runMethods(PowerMockJUnit44RunnerDelegateImpl.java:160)\nat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$1.run(PowerMockJUnit44RunnerDelegateImpl.java:134)\nat org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:34)\nat org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:44)\nat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.run(PowerMockJUnit44RunnerDelegateImpl.java:136)\nat org.powermock.modules.junit4.common.internal.impl.JUnit4TestSuiteChunkerImpl.run(JUnit4TestSuiteChunkerImpl.java:121)\nat org.powermock.modules.junit4.common.internal.impl.AbstractCommonPowerMockRunner.run(AbstractCommonPowerMockRunner.java:57)\nat org.powermock.modules.junit4.PowerMockRunner.run(PowerMockRunner.java:59)\nat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\nat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)\nat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\nat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)\nat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)\n</code></pre>\n", "AcceptedAnswerId": 71296829, "AcceptedAnswer": "<p>In Java 9 and above, the module system can cause these errors. I've had the same issues with JUnit 5 itself because I omit the <code>public</code> from my test classes and methods.</p>\n<p>Here's what I have in my POM to solve this:</p>\n<pre><code>&lt;plugin&gt;\n  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n  &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;\n  &lt;configuration&gt;\n    &lt;!-- Allow JUnit to access the test classes --&gt;\n    &lt;argLine&gt;--add-opens &lt;my-module&gt;/&lt;my-package&gt;=ALL-UNNAMED&lt;/argLine&gt;\n  &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre>\n<p>In your case you probably need to use <code>java.base/java.lang=ALL_UNNAMED</code>.</p>\n"}
{"Id": 71044636, "PostTypeId": 1, "Title": "JMH using java 17, no dead code elimination", "Body": "<p>I run sample JHM benchmark which suppose to show dead code elimination. Code is rewritten for conciseness from <a href=\"https://github.com/openjdk/jmh/blob/master/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_08_DeadCode.java\" rel=\"noreferrer\">jhm github sample</a>.</p>\n<pre class=\"lang-java prettyprint-override\"><code>import org.openjdk.jmh.annotations.*;\nimport java.util.concurrent.TimeUnit;\n\n@State(Scope.Thread)\n@BenchmarkMode(Mode.AverageTime)\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\n@Fork(1)\npublic class Sample08DeadCode {\n\n    private double x = Math.PI;\n\n    @Benchmark\n    public void benchmark() {}\n\n    @Benchmark\n    public void measureIncorrect() { Math.log(x); }\n\n    @Benchmark\n    public double measureCorrect() { return Math.log(x); }\n}\n</code></pre>\n<p>Run using JDK 1.8.0_211, Java HotSpot(TM) 64-Bit Server VM, 25.211-b12 produces following results:</p>\n<pre><code>Benchmark                          Mode  Cnt   Score   Error  Units\nSample08DeadCode.benchmark         avgt    5   0,229 \u00b1 0,018  ns/op\nSample08DeadCode.measureCorrect    avgt    5  12,013 \u00b1 0,047  ns/op\nSample08DeadCode.measureIncorrect  avgt    5   0,228 \u00b1 0,016  ns/op\n</code></pre>\n<p>but using java JDK 17.0.2, Java HotSpot(TM) 64-Bit Server VM, 17.0.2+8-LTS-86 the results have no sign of dead code elimination:</p>\n<pre><code>Benchmark                          Mode  Cnt  Score   Error  Units\nSample08DeadCode.benchmark         avgt    5  0,341 \u00b1 0,004  ns/op\nSample08DeadCode.measureCorrect    avgt    5  6,244 \u00b1 0,072  ns/op\nSample08DeadCode.measureIncorrect  avgt    5  6,263 \u00b1 0,094  ns/op\n</code></pre>\n<p>Why does the <code>measureIncorrect()</code> method is not optimized using java 17?</p>\n", "AcceptedAnswerId": 71053938, "AcceptedAnswer": "<p>Those samples depend on JDK internals.</p>\n<p>Looks like since JDK 9 and <a href=\"https://bugs.openjdk.java.net/browse/JDK-8152907\" rel=\"noreferrer\">JDK-8152907</a>, <code>Math.log</code> is no longer intrinsified into C2 intermediate representation. Instead, a direct call to a quick LIBM-backed stub is made. This is usually faster for the code that actually uses the result. Notice how <code>measureCorrect</code> is faster in JDK 17 output in your case.</p>\n<p>But for JMH samples, it limits the the compiler optimizations around the <code>Math.log</code>, and dead code / folding samples do not work properly. The fix it to make samples that do not rely on JDK internals without a good reason, and instead use a custom written payload.</p>\n<p>This is being done in JMH here:</p>\n<ul>\n<li><a href=\"https://bugs.openjdk.java.net/browse/CODETOOLS-7903094\" rel=\"noreferrer\">https://bugs.openjdk.java.net/browse/CODETOOLS-7903094</a></li>\n<li><a href=\"https://github.com/openjdk/jmh/pull/60\" rel=\"noreferrer\">https://github.com/openjdk/jmh/pull/60</a></li>\n</ul>\n"}
{"Id": 71494924, "PostTypeId": 1, "Title": "How does Java know which overloaded method to call with lambda expressions? (Supplier, Consumer, Callable, ...)", "Body": "<p>First off, I have no idea how to decently phrase the question, so this is up for suggestions.</p>\n<p>Lets say we have following overloaded methods:</p>\n<pre class=\"lang-java prettyprint-override\"><code>void execute(Callable&lt;Void&gt; callable) {\n    try {\n        callable.call();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n\n&lt;T&gt; T execute(Supplier&lt;T&gt; supplier) {\n    return supplier.get();\n}\n\nvoid execute(Runnable runnable) {\n    runnable.run();\n}\n</code></pre>\n<p>Going off from this table, I got from <a href=\"https://stackoverflow.com/a/62434813/3845362\">another SO question</a></p>\n<pre><code>Supplier       ()    -&gt; x\nConsumer       x     -&gt; ()\nBiConsumer     x, y  -&gt; ()\nCallable       ()    -&gt; x throws ex\nRunnable       ()    -&gt; ()\nFunction       x     -&gt; y\nBiFunction     x,y   -&gt; z\nPredicate      x     -&gt; boolean\nUnaryOperator  x1    -&gt; x2\nBinaryOperator x1,x2 -&gt; x3\n</code></pre>\n<p>These are the results I get locally:</p>\n<pre class=\"lang-java prettyprint-override\"><code>// Runnable -&gt; expected as this is a plain void  \nexecute(() -&gt; System.out.println()); \n\n// Callable -&gt; why is it not a Supplier? It does not throw any exceptions..\nexecute(() -&gt; null);\n\n// Supplier -&gt; this returns an Object, but how is that different from returning null?\nexecute(() -&gt; new Object());\n\n// Callable -&gt; because it can throw an exception, right?\nexecute(() -&gt; {throw new Exception();});\n</code></pre>\n<p>How does the compiler know which method to call?\nHow does it for example make the distinction between what's a <code>Callable</code> and what's a <code>Runnable</code>?</p>\n", "AcceptedAnswerId": 71496000, "AcceptedAnswer": "<p>I believe I have found where this is described in official documentation, although a bit hard to read.</p>\n<p><a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.27.3\" rel=\"noreferrer\">Here</a> is mentioned:</p>\n<blockquote>\n<p>15.27.3. Type of a Lambda Expression</p>\n<p>Note that while boxing is not allowed in a strict invocation context,\nboxing of lambda result expressions is always allowed - that is, the\nresult expression appears in an assignment context, regardless of the\ncontext enclosing the lambda expression. However, <strong>if an explicitly\ntyped lambda expression is an argument to an overloaded method, a\nmethod signature that avoids boxing or unboxing the lambda result is\npreferred by the most specific check (\u00a715.12.2.5).</strong></p>\n</blockquote>\n<p>and then <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.12.2.5\" rel=\"noreferrer\">here (15.12.2.5)</a> is described analytically how the most specific method is chosen.</p>\n<p>So according to this for example as described</p>\n<blockquote>\n<p>One applicable method m1 is more specific than another applicable\nmethod m2, for an invocation with argument expressions e1, ..., ek, if\nany of the following are true:</p>\n<p>m2 is generic, and m1 is inferred to be more specific than m2 for\nargument expressions e1, ..., ek</p>\n</blockquote>\n<p>So</p>\n<pre><code>// Callable -&gt; why is it not a Supplier?\nexecute(() -&gt; null);   &lt;-- Callable shall be picked from 2 options as M2 is generic and M1 is inferred to be more specific\n\nvoid execute(Callable&lt;Void&gt; callable) {  // &lt;------ M1 \n   try {\n    callable.call();\n  } catch (Exception e) {\n      e.printStackTrace();\n  }\n}\n\n\n &lt;T&gt; T execute(Supplier&lt;T&gt; supplier) {  // &lt;------ M2 is Generic\n    return supplier.get();\n }\n</code></pre>\n<p>Why M1 is inferred to be more specific can be traced down from this process described <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-18.html#jls-18.5.4\" rel=\"noreferrer\">here (18.5.4 More Specific Method Inference)</a></p>\n"}
{"Id": 71500951, "PostTypeId": 1, "Title": "maven-checkstyle-plugin failed to parse Java 'record'", "Body": "<p>I'm trying to setup checkstyle in our project - but seems like <code>Maven</code> (v3.8.3) or <code>maven-checkstyle-plugin</code> (v3.1.1) itself are not aware of Java 14's <code>record</code> (we use Java 17).</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>Caused by: java.lang.IllegalStateException: /Users/dmitry.adonin/IdeaProjects/raap/src/main/java/com/xxx/web/dto/Request.java:3:8: unexpected token: record\n    at com.puppycrawl.tools.checkstyle.JavaParser$1.reportError (JavaParser.java:93)\n    at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition (GeneratedJavaRecognizer.java:411)\n    at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compilationUnit (GeneratedJavaRecognizer.java:202)\n    at com.puppycrawl.tools.checkstyle.JavaParser.parse (JavaParser.java:99)\n    at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered (TreeWalker.java:159)\n    at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process (AbstractFileSetCheck.java:85)\n    at com.puppycrawl.tools.checkstyle.Checker.processFile (Checker.java:329)\n    at com.puppycrawl.tools.checkstyle.Checker.processFiles (Checker.java:291)\n    at com.puppycrawl.tools.checkstyle.Checker.process (Checker.java:216)\n    at org.apache.maven.plugins.checkstyle.exec.DefaultCheckstyleExecutor.executeCheckstyle (DefaultCheckstyleExecutor.java:202)\n    at org.apache.maven.plugins.checkstyle.CheckstyleViolationCheckMojo.execute (CheckstyleViolationCheckMojo.java:545)\n    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)\n    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)\n    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)\n    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)\n    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)\n    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)\n    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)\n    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)\n    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:972)\n    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:293)\n    at org.apache.maven.cli.MavenCli.main (MavenCli.java:196)\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)\n    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke (Method.java:566)\n    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)\n    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)\n    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)\n    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347)\nCaused by: antlr.NoViableAltException: unexpected token: record\n    at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinitionInternal (GeneratedJavaRecognizer.java:584)\n    at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition (GeneratedJavaRecognizer.java:389)\n    at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compilationUnit (GeneratedJavaRecognizer.java:202)\n    at com.puppycrawl.tools.checkstyle.JavaParser.parse (JavaParser.java:99)\n    at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered (TreeWalker.java:159)\n    at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process (AbstractFileSetCheck.java:85)\n    at com.puppycrawl.tools.checkstyle.Checker.processFile (Checker.java:329)\n    at com.puppycrawl.tools.checkstyle.Checker.processFiles (Checker.java:291)\n    at com.puppycrawl.tools.checkstyle.Checker.process (Checker.java:216)\n    at org.apache.maven.plugins.checkstyle.exec.DefaultCheckstyleExecutor.executeCheckstyle (DefaultCheckstyleExecutor.java:202)\n    at org.apache.maven.plugins.checkstyle.CheckstyleViolationCheckMojo.execute (CheckstyleViolationCheckMojo.java:545)\n    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)\n    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)\n    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)\n    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)\n    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)\n    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)\n    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)\n    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)\n    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:972)\n    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:293)\n    at org.apache.maven.cli.MavenCli.main (MavenCli.java:196)\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)\n    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke (Method.java:566)\n    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)\n    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)\n    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)\n    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>There are the following configs:</p>\n<p><code>pom.xml</code>:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;2.6.2&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;...&lt;/groupId&gt;\n    &lt;artifactId&gt;...&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;name&gt;...&lt;/name&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;17&lt;/java.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n    ...\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;excludes&gt;\n                        &lt;exclude&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                        &lt;/exclude&gt;\n                    &lt;/excludes&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.1.1&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;configLocation&gt;project-checks.xml&lt;/configLocation&gt;\n                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;\n                    &lt;consoleOutput&gt;true&lt;/consoleOutput&gt;\n                    &lt;failOnViolation&gt;true&lt;/failOnViolation&gt;\n                    &lt;failsOnError&gt;true&lt;/failsOnError&gt;\n                    &lt;linkXRef&gt;false&lt;/linkXRef&gt;\n                &lt;/configuration&gt;\n                &lt;executions&gt;\n                    &lt;execution&gt;\n                        &lt;id&gt;checkstyle-validation&lt;/id&gt;\n                        &lt;phase&gt;validate&lt;/phase&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;check&lt;/goal&gt;\n                        &lt;/goals&gt;\n                    &lt;/execution&gt;\n                &lt;/executions&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><code>project-checks.xml</code>:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;?xml version=\"1.0\"?&gt;\n\n&lt;!DOCTYPE module PUBLIC\n        \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"\n        \"https://checkstyle.org/dtds/configuration_1_3.dtd\"&gt;\n\n&lt;!--\n    Checkstyle configuration that checks the Google coding conventions from Google Java Style\n    that can be found at https://google.github.io/styleguide/javaguide.html\n    Checkstyle is very configurable. Be sure to read the documentation at\n    https://checkstyle.org (or in your downloaded distribution).\n    To completely disable a check, just comment it out or delete it from the file.\n    To suppress certain violations please review suppression filters.\n    Authors: Max Vetrenko, Ruslan Diachenko, Roman Ivanov.\n --&gt;\n\n&lt;module name = \"Checker\"&gt;\n    &lt;property name=\"charset\" value=\"UTF-8\"/&gt;\n\n    &lt;property name=\"severity\" value=\"error\"/&gt;\n\n    &lt;property name=\"fileExtensions\" value=\"java, properties, xml\"/&gt;\n    &lt;!-- Excludes all 'module-info.java' files              --&gt;\n    &lt;!-- See https://checkstyle.org/config_filefilters.html --&gt;\n    &lt;module name=\"BeforeExecutionExclusionFileFilter\"&gt;\n        &lt;property name=\"fileNamePattern\" value=\"module\\-info\\.java$\"/&gt;\n    &lt;/module&gt;\n    &lt;!-- Checks new line at end of file is required                     --&gt;\n    &lt;!-- See https://checkstyle.org/config_misc.html#NewlineAtEndOfFile --&gt;\n    &lt;module name=\"NewlineAtEndOfFile\"&gt;\n        &lt;property name=\"lineSeparator\" value=\"lf\"/&gt;\n        &lt;property name=\"fileExtensions\" value=\"java, xml, yml, yaml\"/&gt;\n    &lt;/module&gt;\n\n    &lt;!-- Checks for whitespace                            --&gt;\n    &lt;!-- See http://checkstyle.org/config_whitespace.html --&gt;\n    &lt;module name=\"FileTabCharacter\"&gt;\n        &lt;property name=\"eachLine\" value=\"true\"/&gt;\n    &lt;/module&gt;\n\n    &lt;module name=\"LineLength\"&gt;\n        &lt;property name=\"fileExtensions\" value=\"java\"/&gt;\n        &lt;property name=\"max\" value=\"200\"/&gt;\n        &lt;property name=\"ignorePattern\" value=\"^package.*|^import.*|a href|href|http://|https://|ftp://\"/&gt;\n    &lt;/module&gt;\n\n    &lt;module name=\"TreeWalker\"&gt;\n        &lt;module name=\"OuterTypeFilename\"/&gt;\n        &lt;module name=\"IllegalTokenText\"&gt;\n            &lt;property name=\"tokens\" value=\"STRING_LITERAL, CHAR_LITERAL\"/&gt;\n            &lt;property name=\"format\"\n                      value=\"\\\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\\\(0(10|11|12|14|15|42|47)|134)\"/&gt;\n            &lt;property name=\"message\"\n                      value=\"Consider using special escape sequence instead of octal value or Unicode escaped value.\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"AvoidEscapedUnicodeCharacters\"&gt;\n            &lt;property name=\"allowEscapesForControlCharacters\" value=\"true\"/&gt;\n            &lt;property name=\"allowByTailComment\" value=\"true\"/&gt;\n            &lt;property name=\"allowNonPrintableEscapes\" value=\"true\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"AvoidStarImport\"/&gt;\n        &lt;module name=\"UnusedImports\"/&gt;\n        &lt;module name=\"OneTopLevelClass\"/&gt;\n        &lt;module name=\"NoLineWrap\"&gt;\n            &lt;property name=\"tokens\" value=\"PACKAGE_DEF, IMPORT, STATIC_IMPORT\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"EmptyBlock\"&gt;\n            &lt;property name=\"option\" value=\"TEXT\"/&gt;\n            &lt;property name=\"tokens\"\n                      value=\"LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"NeedBraces\"&gt;\n            &lt;property name=\"tokens\"\n                      value=\"LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_IF, LITERAL_WHILE\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"LeftCurly\"&gt;\n            &lt;property name=\"tokens\"\n                      value=\"ANNOTATION_DEF, CLASS_DEF, CTOR_DEF, ENUM_CONSTANT_DEF, ENUM_DEF,\n                    INTERFACE_DEF, LAMBDA, LITERAL_CASE, LITERAL_CATCH, LITERAL_DEFAULT,\n                    LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF,\n                    LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF,\n                    OBJBLOCK, STATIC_INIT\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"RightCurly\"&gt;\n            &lt;property name=\"id\" value=\"RightCurlySame\"/&gt;\n            &lt;property name=\"tokens\"\n                      value=\"LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE,\n                    LITERAL_DO\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"RightCurly\"&gt;\n            &lt;property name=\"id\" value=\"RightCurlyAlone\"/&gt;\n            &lt;property name=\"option\" value=\"alone\"/&gt;\n            &lt;property name=\"tokens\"\n                      value=\"CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT,\n                    INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"SuppressionXpathSingleFilter\"&gt;\n            &lt;!-- suppresion is required till https://github.com/checkstyle/checkstyle/issues/7541 --&gt;\n            &lt;property name=\"id\" value=\"RightCurlyAlone\"/&gt;\n            &lt;property name=\"query\" value=\"//RCURLY[parent::SLIST[count(./*)=1]\n                                                 or preceding-sibling::*[last()][self::LCURLY]]\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"WhitespaceAround\"&gt;\n            &lt;property name=\"allowEmptyConstructors\" value=\"true\"/&gt;\n            &lt;property name=\"allowEmptyLambdas\" value=\"true\"/&gt;\n            &lt;property name=\"allowEmptyMethods\" value=\"true\"/&gt;\n            &lt;property name=\"allowEmptyTypes\" value=\"true\"/&gt;\n            &lt;property name=\"allowEmptyLoops\" value=\"true\"/&gt;\n            &lt;property name=\"tokens\"\n                      value=\"ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR,\n                    BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAMBDA, LAND,\n                    LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY,\n                    LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SWITCH, LITERAL_SYNCHRONIZED,\n                     LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN,\n                     NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR,\n                     SR_ASSIGN, STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND\"/&gt;\n            &lt;message key=\"ws.notFollowed\"\n                     value=\"WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)\"/&gt;\n            &lt;message key=\"ws.notPreceded\"\n                     value=\"WhitespaceAround: ''{0}'' is not preceded with whitespace.\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"OneStatementPerLine\"/&gt;\n        &lt;module name=\"MultipleVariableDeclarations\"/&gt;\n        &lt;module name=\"ArrayTypeStyle\"/&gt;\n        &lt;module name=\"MissingSwitchDefault\"/&gt;\n        &lt;module name=\"FallThrough\"/&gt;\n        &lt;module name=\"UpperEll\"/&gt;\n        &lt;module name=\"ModifierOrder\"/&gt;\n        &lt;module name=\"EmptyLineSeparator\"&gt;\n            &lt;property name=\"tokens\"\n                      value=\"PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF,\n                    STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, VARIABLE_DEF\"/&gt;\n            &lt;property name=\"allowNoEmptyLineBetweenFields\" value=\"true\"/&gt;\n            &lt;property name=\"allowMultipleEmptyLines\" value=\"false\"/&gt;\n            &lt;property name=\"allowMultipleEmptyLinesInsideClassMembers\" value=\"false\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"SeparatorWrap\"&gt;\n            &lt;property name=\"id\" value=\"SeparatorWrapDot\"/&gt;\n            &lt;property name=\"tokens\" value=\"DOT\"/&gt;\n            &lt;property name=\"option\" value=\"nl\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"SeparatorWrap\"&gt;\n            &lt;property name=\"id\" value=\"SeparatorWrapComma\"/&gt;\n            &lt;property name=\"tokens\" value=\"COMMA\"/&gt;\n            &lt;property name=\"option\" value=\"EOL\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"SeparatorWrap\"&gt;\n            &lt;!-- ELLIPSIS is EOL until https://github.com/google/styleguide/issues/258 --&gt;\n            &lt;property name=\"id\" value=\"SeparatorWrapEllipsis\"/&gt;\n            &lt;property name=\"tokens\" value=\"ELLIPSIS\"/&gt;\n            &lt;property name=\"option\" value=\"EOL\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"SeparatorWrap\"&gt;\n            &lt;!-- ARRAY_DECLARATOR is EOL until https://github.com/google/styleguide/issues/259 --&gt;\n            &lt;property name=\"id\" value=\"SeparatorWrapArrayDeclarator\"/&gt;\n            &lt;property name=\"tokens\" value=\"ARRAY_DECLARATOR\"/&gt;\n            &lt;property name=\"option\" value=\"EOL\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"SeparatorWrap\"&gt;\n            &lt;property name=\"id\" value=\"SeparatorWrapMethodRef\"/&gt;\n            &lt;property name=\"tokens\" value=\"METHOD_REF\"/&gt;\n            &lt;property name=\"option\" value=\"nl\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"PackageName\"&gt;\n            &lt;property name=\"format\" value=\"^[a-z]+(\\.[a-z][a-z0-9]*)*$\"/&gt;\n            &lt;message key=\"name.invalidPattern\"\n                     value=\"Package name ''{0}'' must match pattern ''{1}''.\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"TypeName\"&gt;\n            &lt;property name=\"tokens\" value=\"CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF\"/&gt;\n            &lt;message key=\"name.invalidPattern\"\n                     value=\"Type name ''{0}'' must match pattern ''{1}''.\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"MemberName\"&gt;\n            &lt;property name=\"format\" value=\"^[a-z][a-zA-Z0-9]*$\"/&gt;\n            &lt;message key=\"name.invalidPattern\"\n                     value=\"Member name ''{0}'' must match pattern ''{1}''.\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"ParameterName\"&gt;\n            &lt;property name=\"format\" value=\"^[a-z][a-zA-Z0-9]*$\"/&gt;\n            &lt;message key=\"name.invalidPattern\"\n                     value=\"Parameter name ''{0}'' must match pattern ''{1}''.\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"LambdaParameterName\"&gt;\n            &lt;property name=\"format\" value=\"^[a-z]([a-z0-9][a-zA-Z0-9]*)?$\"/&gt;\n            &lt;message key=\"name.invalidPattern\"\n                     value=\"Lambda parameter name ''{0}'' must match pattern ''{1}''.\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"CatchParameterName\"&gt;\n            &lt;property name=\"format\" value=\"^[a-z]([a-z0-9][a-zA-Z0-9]*)?$\"/&gt;\n            &lt;message key=\"name.invalidPattern\"\n                     value=\"Catch parameter name ''{0}'' must match pattern ''{1}''.\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"LocalVariableName\"&gt;\n            &lt;property name=\"format\" value=\"^[a-z]([a-z0-9][a-zA-Z0-9]*)?$\"/&gt;\n            &lt;message key=\"name.invalidPattern\"\n                     value=\"Local variable name ''{0}'' must match pattern ''{1}''.\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"ClassTypeParameterName\"&gt;\n            &lt;property name=\"format\" value=\"(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)|(^[A-Z]{1,2})$\"/&gt;\n            &lt;message key=\"name.invalidPattern\"\n                     value=\"Class type name ''{0}'' must match pattern ''{1}''.\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"MethodTypeParameterName\"&gt;\n            &lt;property name=\"format\" value=\"(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)\"/&gt;\n            &lt;message key=\"name.invalidPattern\"\n                     value=\"Method type name ''{0}'' must match pattern ''{1}''.\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"InterfaceTypeParameterName\"&gt;\n            &lt;property name=\"format\" value=\"(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)|(^[A-Z]{1,2})$\"/&gt;\n            &lt;message key=\"name.invalidPattern\"\n                     value=\"Interface type name ''{0}'' must match pattern ''{1}''.\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"MethodName\"&gt;\n            &lt;property name=\"format\" value=\"^[a-z][a-zA-Z0-9_]*$\"/&gt;\n            &lt;message key=\"name.invalidPattern\"\n                     value=\"Method name ''{0}'' must match pattern ''{1}''.\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"NoFinalizer\"/&gt;\n        &lt;module name=\"GenericWhitespace\"&gt;\n            &lt;message key=\"ws.followed\"\n                     value=\"GenericWhitespace ''{0}'' is followed by whitespace.\"/&gt;\n            &lt;message key=\"ws.preceded\"\n                     value=\"GenericWhitespace ''{0}'' is preceded with whitespace.\"/&gt;\n            &lt;message key=\"ws.illegalFollow\"\n                     value=\"GenericWhitespace ''{0}'' should followed by whitespace.\"/&gt;\n            &lt;message key=\"ws.notPreceded\"\n                     value=\"GenericWhitespace ''{0}'' is not preceded with whitespace.\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"Indentation\"&gt;\n            &lt;property name=\"basicOffset\" value=\"4\"/&gt;\n            &lt;property name=\"braceAdjustment\" value=\"0\"/&gt;\n            &lt;property name=\"caseIndent\" value=\"4\"/&gt;\n            &lt;property name=\"throwsIndent\" value=\"4\"/&gt;\n            &lt;property name=\"lineWrappingIndentation\" value=\"4\"/&gt;\n            &lt;property name=\"arrayInitIndent\" value=\"4\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"AbbreviationAsWordInName\"&gt;\n            &lt;property name=\"ignoreFinal\" value=\"false\"/&gt;\n            &lt;property name=\"allowedAbbreviationLength\" value=\"3\"/&gt;\n            &lt;property name=\"tokens\"\n                      value=\"CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF, ANNOTATION_FIELD_DEF,\n                    PARAMETER_DEF, VARIABLE_DEF, METHOD_DEF\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"OverloadMethodsDeclarationOrder\"/&gt;\n        &lt;module name=\"VariableDeclarationUsageDistance\"/&gt;\n        &lt;module name=\"CustomImportOrder\"&gt;\n            &lt;property name=\"customImportOrderRules\" value=\"THIRD_PARTY_PACKAGE###SPECIAL_IMPORTS###STANDARD_JAVA_PACKAGE###STATIC\"/&gt;\n            &lt;property name=\"specialImportsRegExp\" value=\"^javax\\.\"/&gt;\n            &lt;property name=\"standardPackageRegExp\" value=\"^java\\.\"/&gt;\n            &lt;property name=\"separateLineBetweenGroups\" value=\"false\"/&gt;\n            &lt;property name=\"sortImportsInGroupAlphabetically\" value=\"true\"/&gt;\n            &lt;property name=\"tokens\" value=\"IMPORT, STATIC_IMPORT, PACKAGE_DEF\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"MethodParamPad\"&gt;\n            &lt;property name=\"tokens\"\n                      value=\"CTOR_DEF, LITERAL_NEW, METHOD_CALL, METHOD_DEF,\n                    SUPER_CTOR_CALL, ENUM_CONSTANT_DEF\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"NoWhitespaceBefore\"&gt;\n            &lt;property name=\"tokens\"\n                      value=\"COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF\"/&gt;\n            &lt;property name=\"allowLineBreaks\" value=\"true\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"ParenPad\"&gt;\n            &lt;property name=\"tokens\"\n                      value=\"ANNOTATION, ANNOTATION_FIELD_DEF, CTOR_CALL, CTOR_DEF, DOT, ENUM_CONSTANT_DEF,\n                    EXPR, LITERAL_CATCH, LITERAL_DO, LITERAL_FOR, LITERAL_IF, LITERAL_NEW,\n                    LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_WHILE, METHOD_CALL,\n                    METHOD_DEF, QUESTION, RESOURCE_SPECIFICATION, SUPER_CTOR_CALL, LAMBDA\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"OperatorWrap\"&gt;\n            &lt;property name=\"option\" value=\"NL\"/&gt;\n            &lt;property name=\"tokens\"\n                      value=\"BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR,\n                    LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF \"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"AnnotationLocation\"&gt;\n            &lt;property name=\"id\" value=\"AnnotationLocationMostCases\"/&gt;\n            &lt;property name=\"tokens\"\n                      value=\"CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"AnnotationLocation\"&gt;\n            &lt;property name=\"id\" value=\"AnnotationLocationVariables\"/&gt;\n            &lt;property name=\"tokens\" value=\"VARIABLE_DEF\"/&gt;\n            &lt;property name=\"allowSamelineMultipleAnnotations\" value=\"true\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"NonEmptyAtclauseDescription\"/&gt;\n        &lt;module name=\"InvalidJavadocPosition\"/&gt;\n        &lt;module name=\"JavadocTagContinuationIndentation\"/&gt;\n        &lt;module name=\"SummaryJavadoc\"&gt;\n            &lt;property name=\"forbiddenSummaryFragments\"\n                      value=\"^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"JavadocParagraph\"/&gt;\n        &lt;module name=\"AtclauseOrder\"&gt;\n            &lt;property name=\"tagOrder\" value=\"@param, @return, @throws, @deprecated\"/&gt;\n            &lt;property name=\"target\"\n                      value=\"CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"JavadocMethod\"&gt;\n            &lt;property name=\"scope\" value=\"public\"/&gt;\n            &lt;property name=\"allowMissingParamTags\" value=\"true\"/&gt;\n            &lt;property name=\"allowMissingReturnTag\" value=\"true\"/&gt;\n            &lt;property name=\"allowedAnnotations\" value=\"Override, Test\"/&gt;\n            &lt;property name=\"tokens\" value=\"METHOD_DEF, CTOR_DEF, ANNOTATION_FIELD_DEF\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"SingleLineJavadoc\"&gt;\n            &lt;property name=\"ignoreInlineTags\" value=\"false\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"EmptyCatchBlock\"&gt;\n            &lt;property name=\"exceptionVariableName\" value=\"expected\"/&gt;\n        &lt;/module&gt;\n        &lt;module name=\"CommentsIndentation\"&gt;\n            &lt;property name=\"tokens\" value=\"SINGLE_LINE_COMMENT, BLOCK_COMMENT_BEGIN\"/&gt;\n        &lt;/module&gt;\n        &lt;!-- https://checkstyle.org/config_filters.html#SuppressionXpathFilter --&gt;\n        &lt;module name=\"SuppressionXpathFilter\"&gt;\n            &lt;property name=\"file\" value=\"checkstyle-xpath-suppressions.xml\"/&gt;\n            &lt;property name=\"optional\" value=\"true\"/&gt;\n        &lt;/module&gt;\n    &lt;/module&gt;\n&lt;/module&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Could someone please suggest what should be adjusted to make it work?</p>\n<p>Thank you!</p>\n", "AcceptedAnswerId": 71501025, "AcceptedAnswer": "<p>The plugin by default comes with Checkstyle version 8.29. Try explicitly defining the CheckStyle version (plus a small version bump to 3.1.2). For example, with version 9.2:</p>\n<pre><code>&lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n    &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;\n    &lt;version&gt;3.1.2&lt;/version&gt;\n    &lt;configuration&gt;\n       ...\n    &lt;/configuration&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.puppycrawl.tools&lt;/groupId&gt;\n            &lt;artifactId&gt;checkstyle&lt;/artifactId&gt;\n            &lt;version&gt;9.2&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n    &lt;executions&gt;\n        ...\n    &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre>\n"}
{"Id": 71063202, "PostTypeId": 1, "Title": "check valid date in java", "Body": "<p>I tried to check a <code>String</code> input that is a valid date using the format <code>dd/MM/yyyy</code> like this:</p>\n<pre><code>String input = Scanner.nextLine();\nDateTimeFormatter formater = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;);\ntry{\n    LocaleDate.parse(input, formater);\n}\ncatch(Exception e)\n</code></pre>\n<p>But it can't check some rules below:</p>\n<pre><code>Leap year, February 29 days.\n\nCommon year, February 28 days.\n\nMonth 1, 3, 5, 7, 8, 10, 12, max 31 days.\n\nMonth 4, 6, 9, 11, max 30 days.\n</code></pre>\n<p>When I use <code>input = &quot;30/02/2022&quot;</code>, it's legal.\nI use <code>netbeans 8.2</code> and <code>jdk 1.8</code>. Do they support some methods for checking these rules?</p>\n", "AcceptedAnswerId": 71063276, "AcceptedAnswer": "<p>There are two things you need to change in your formatter:</p>\n<ul>\n<li>Use <code>uuuu</code> instead of <code>yyyy</code>. It's easy to try the latter, but <code>y</code> means &quot;year within ERA&quot;. It doesn't know whether it's BC or AD. <code>u</code> means &quot;year&quot; including ERA information.</li>\n<li>The <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/format/DateTimeFormatter.html#ofPattern(java.lang.String)\" rel=\"nofollow noreferrer\">default resolver style</a> is <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/format/ResolverStyle.html#SMART\" rel=\"nofollow noreferrer\"><code>SMART</code></a>. Use <code>.withResolverStyle(ResolverStyle.STRICT)</code> to return a <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/format/ResolverStyle.html#STRICT\" rel=\"nofollow noreferrer\">strict</a> copy of the formatter.</li>\n</ul>\n"}
{"Id": 71250218, "PostTypeId": 1, "Title": "Java, project panama and how to deal with Hunspell 'suggest' result", "Body": "<p>I'm experimenting with <a href=\"https://github.com/hunspell/hunspell\" rel=\"noreferrer\">Hunspell</a> and how to interact with it using <a href=\"https://jdk.java.net/panama/\" rel=\"noreferrer\">Java Project Panama</a> (Build 19-panama+1-13 (2022/1/18)). I was able to get some initial testing done, as in creating a <code>handle to Hunspell</code> and subsequently using that to perform a spell check. I'm now trying something more elaborate, letting Hunspell give me <code>suggestions</code> for a word not present in the dictionary. This is the code that I have for that now:</p>\n<pre><code>public class HelloHun {\n    public static void main(String[] args) {\n        MemoryAddress hunspellHandle = null;\n        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n            var allocator = SegmentAllocator.nativeAllocator(scope);\n\n            // Point it to US english dictionary and (so called) affix file\n            // Note #1: it is possible to add words to the dictionary if you like\n            // Note #2: it is possible to have separate/individual dictionaries and affix files (e.g. per user/doc type)\n            var en_US_aff = allocator.allocateUtf8String(&quot;/usr/share/hunspell/en_US.aff&quot;);\n            var en_US_dic = allocator.allocateUtf8String(&quot;/usr/share/hunspell/en_US.dic&quot;);\n\n            // Get a handle to the Hunspell shared library and load up the dictionary and affix\n            hunspellHandle = Hunspell_create(en_US_aff, en_US_dic);\n\n            // Feed it a wrong word\n            var javaWord = &quot;koing&quot;;\n\n            // Do a simple spell check of the word\n            var word = allocator.allocateUtf8String(javaWord);\n            var spellingResult = Hunspell_spell(hunspellHandle, word);\n            System.out.println(String.format(&quot;%s is spelled %s&quot;, javaWord, (spellingResult == 0 ? &quot;incorrect&quot; : &quot;correct&quot;)));\n\n            // Hunspell also supports giving suggestions for a word - which is what we do next\n            // Note #3: by testing this `koing` word in isolation - we know that there are 4 alternatives for this word\n            // Note #4: I'm still investigating how to access individual suggestions\n\n            var suggestions = allocator.allocate(10);\n            var suggestionCount = Hunspell_suggest(hunspellHandle, suggestions, word);\n\n            System.out.println(String.format(&quot;There are %d suggestions for %s&quot;, suggestionCount, javaWord));\n\n            // `suggestions` - according to the hunspell API - is a `pointer to an array of strings pointer`\n            // we know how many `strings` pointer there are, as that is the returned value from `suggest`\n            // Question: how to process `suggestions` to get individual suggestions\n\n\n        } finally {\n            if (hunspellHandle != null) {\n                Hunspell_destroy(hunspellHandle);\n            }\n        }\n    }\n}\n</code></pre>\n<p>What I'm seeing is that a call to <code>Hunspell_suggest</code> (created from <code>jextract</code>) succeeds and gives me back (4) suggestions (which I verified using Hunspell from the commandline) - so no problem there.</p>\n<p>What is more challenging for me now is how do I unpack the <code>suggestions</code> element that comes back from this call? I've been looking at various examples, but none of them seem to go into this level of detail (and even if I find examples, they seem to be using outdated panama APIs).</p>\n<p>So in essence, here is my question:</p>\n<p>How do I unpack a structure that reportedly consists of a <em>pointer to an array of strings pointer</em> using panama JDK19 APIs to their respective collection of strings?</p>\n", "AcceptedAnswerId": 71258371, "AcceptedAnswer": "<p>Looking at the header here: <a href=\"https://github.com/hunspell/hunspell/blob/master/src/hunspell/hunspell.h#L80\" rel=\"nofollow noreferrer\">https://github.com/hunspell/hunspell/blob/master/src/hunspell/hunspell.h#L80</a></p>\n<pre><code>/* suggest(suggestions, word) - search suggestions\n * input: pointer to an array of strings pointer and the (bad) word\n *   array of strings pointer (here *slst) may not be initialized\n * output: number of suggestions in string array, and suggestions in\n *   a newly allocated array of strings (*slts will be NULL when number\n *   of suggestion equals 0.)\n */\nLIBHUNSPELL_DLL_EXPORTED int Hunspell_suggest(Hunhandle* pHunspell,\n                                              char*** slst,\n                                              const char* word);\n</code></pre>\n<p>The <code>slst</code> is a classic 'out' parameter. i.e. we pass a pointer to some value (in this case a <code>char**</code> i.e. an array of strings), and the function will set this pointer for us, as a way to return multiple results. (the first result being the number of suggestions)</p>\n<p>In panama you use 'out' parameters by allocating a segment with the layout of the type the parameter is a pointer of. In this case <code>char***</code> is a pointer to <code>char**</code>, so the layout is <code>ADDRESS</code>. We then pass the created segment to the function, and finally retrieve/use the value from that segment after the function call, which will have filled in the segment contents:</p>\n<pre><code>// char***\nvar suggestionsRef = allocator.allocate(ValueLayout.ADDRESS); // allocate space for an address\nvar suggestionCount = Hunspell_suggest(hunspellHandle, suggestionsRef, word);\n// char** (the value set by the function)\nMemoryAddress suggestions = suggestionsRef.get(ValueLayout.ADDRESS, 0);\n</code></pre>\n<p>After that, you can iterate over the array of strings:</p>\n<pre><code>for (int i = 0; i &lt; suggestionCount; i++) {\n    // char* (an element in the array)\n    MemoryAddress suggestion = suggestions.getAtIndex(ValueLayout.ADDRESS, i);\n    // read the string\n    String javaSuggestion = suggestion.getUtf8String(suggestion, 0);\n}\n</code></pre>\n"}
{"Id": 71338792, "PostTypeId": 1, "Title": "java.lang.NoClassDefFoundError: Failed resolution of: Ljava/lang/Math8 when upgrading Gradle and Android Gradle Plugin", "Body": "<p>I'm working on an Android app with a Gradle version of <code>7.1.1</code> and an Android Gradle Plugin version of <code>7.0.0</code>. When I upgrade to Gradle version <code>7.2</code> and Android Gradle Plugin version <code>7.1.1</code>, I get the following error.</p>\n<pre><code>2022-03-02 17:15:47.072 25300-25300/... E/AndroidRuntime: FATAL EXCEPTION: main\n    Process: ..., PID: 25300\n    java.lang.NoClassDefFoundError: Failed resolution of: Ljava/lang/Math8;\n        at j$.time.Instant.ofEpochSecond(Instant.java:328)\n        at j$.time.Instant.&lt;clinit&gt;(Instant.java:232)\n        at j$.time.Instant.ofEpochMilli(Instant.java:344)\n        ...\n        at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n        at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n        at android.os.Handler.handleCallback(Handler.java:883)\n        at android.os.Handler.dispatchMessage(Handler.java:100)\n        at android.os.Looper.loop(Looper.java:214)\n        at android.app.ActivityThread.main(ActivityThread.java:7356)\n        at java.lang.reflect.Method.invoke(Native Method)\n        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:492)\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930)\n     Caused by: java.lang.ClassNotFoundException: Didn't find class &quot;java.lang.Math8&quot; on path: DexPathList[[zip file &quot;/data/app/...-NbMXeOj8LumN03n4IMK5Cw==/base.apk&quot;],nativeLibraryDirectories=[/data/app/...-NbMXeOj8LumN03n4IMK5Cw==/lib/x86, /data/app/...-NbMXeOj8LumN03n4IMK5Cw==/base.apk!/lib/x86, /system/lib, /system/product/lib]]\n        at dalvik.system.BaseDexClassLoader.findClass(BaseDexClassLoader.java:196)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:379)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:312)\n        at j$.time.Instant.ofEpochSecond(Instant.java:328) \n        at j$.time.Instant.&lt;clinit&gt;(Instant.java:232) \n        at j$.time.Instant.ofEpochMilli(Instant.java:344) \n        ...\n        at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33) \n        at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106) \n        at android.os.Handler.handleCallback(Handler.java:883) \n        at android.os.Handler.dispatchMessage(Handler.java:100) \n        at android.os.Looper.loop(Looper.java:214) \n        at android.app.ActivityThread.main(ActivityThread.java:7356) \n        at java.lang.reflect.Method.invoke(Native Method) \n        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:492) \n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930)\n</code></pre>\n<p>The error is coming from this code:</p>\n<pre class=\"lang-kotlin prettyprint-override\"><code>fun toLocalStartOfDay(date: Long): Instant = Instant.ofEpochMilli(date)\n    .atZone(ZoneId.systemDefault())\n    .withHour(0)\n    .withMinute(0)\n    .withSecond(0)\n    .withNano(0)\n    .toInstant()\n</code></pre>\n<p>The <code>build.gradle</code> file is set to target JVM 1.8 with desugaring.</p>\n<pre><code>compileOptions {\n    coreLibraryDesugaringEnabled = true\n    sourceCompatibility JavaVersion.VERSION_1_8\n    targetCompatibility JavaVersion.VERSION_1_8\n}\n\nkotlinOptions {\n    jvmTarget = '1.8'\n}\n</code></pre>\n<p>The <code>desugar_jdk_libs</code> version is set to <code>1.0.9</code>.</p>\n<pre><code>versions.androidDesugaringVersion = '1.0.9'\nsupport.android_desugaring = &quot;com.android.tools:desugar_jdk_libs:$versions.androidDesugaringVersion&quot;\n</code></pre>\n<p>Why would upgrading cause this error?</p>\n", "AcceptedAnswerId": 71340133, "AcceptedAnswer": "<p>Desugaring effects &quot;a subset of <code>java.time</code>&quot; so upgrading to the latest version of <code>desugar_jdk_libs</code> should fix the issue. At the time of posting, the latest version is <code>1.1.5</code>.</p>\n<p><strong>References</strong></p>\n<ul>\n<li><a href=\"https://developer.android.com/studio/write/java8-support#library-desugaring\" rel=\"noreferrer\">Java 8+ API desugaring support (Android Gradle Plugin 4.0.0+)</a></li>\n<li><a href=\"https://mvnrepository.com/artifact/com.android.tools/desugar_jdk_libs?repo=google\" rel=\"noreferrer\">desugar_jdk_libs (Maven)</a></li>\n</ul>\n"}
{"Id": 71771423, "PostTypeId": 1, "Title": "React Native: 'compileJava' task (current target is 1.8) and 'compileKotlin' task (current target is 11) jvm target compat", "Body": "<p>Hello everyone I am trying to create and run a react native app. I run\n<code>npx react-native init rn4</code> but when I run <code>npm run android</code> I have this error:</p>\n<pre><code>&gt; Task :react-native-gradle-plugin:compileKotlin\n'compileJava' task (current target is 1.8) and 'compileKotlin' task (current target is 11) jvm target compatibility should be set to the same Java version.\nw: C:\\Users\\emanu\\App\\rn4\\node_modules\\react-native-gradle-plugin\\src\\main\\kotlin\\com\\facebook\\react\\ReactExtension.kt: (10, 37): 'BaseVariant' is deprecated. Deprecated in Java\nw: C:\\Users\\emanu\\App\\rn4\\node_modules\\react-native-gradle-plugin\\src\\main\\kotlin\\com\\facebook\\react\\ReactExtension.kt: (119, 30): 'BaseVariant' is deprecated. Deprecated in Java\nw: C:\\Users\\emanu\\App\\rn4\\node_modules\\react-native-gradle-plugin\\src\\main\\kotlin\\com\\facebook\\react\\ReactExtension.kt: (135, 26): 'BaseVariant' is deprecated. Deprecated in Java\nw: C:\\Users\\emanu\\App\\rn4\\node_modules\\react-native-gradle-plugin\\src\\main\\kotlin\\com\\facebook\\react\\ReactExtension.kt: (155, 32): 'BaseVariant' is deprecated. Deprecated in Java\nw: C:\\Users\\emanu\\App\\rn4\\node_modules\\react-native-gradle-plugin\\src\\main\\kotlin\\com\\facebook\\react\\ReactExtension.kt: (161, 31): 'BaseVariant' is deprecated. Deprecated in Java\nw: C:\\Users\\emanu\\App\\rn4\\node_modules\\react-native-gradle-plugin\\src\\main\\kotlin\\com\\facebook\\react\\ReactExtension.kt: (169, 36): 'BaseVariant' is deprecated. Deprecated in Java\nw: C:\\Users\\emanu\\App\\rn4\\node_modules\\react-native-gradle-plugin\\src\\main\\kotlin\\com\\facebook\\react\\ReactPlugin.kt: (99, 48): 'reactRoot: DirectoryProperty' is deprecated. reactRoot was confusing and has been replace with rootto point to your root project and reactNativeDir to point to the folder of the react-native NPM package\nw: C:\\Users\\emanu\\App\\rn4\\node_modules\\react-native-gradle-plugin\\src\\main\\kotlin\\com\\facebook\\react\\TaskConfiguration.kt: (10, 37): 'ApplicationVariant' is deprecated. Deprecated in Java\nw: C:\\Users\\emanu\\App\\rn4\\node_modules\\react-native-gradle-plugin\\src\\main\\kotlin\\com\\facebook\\react\\TaskConfiguration.kt: (11, 37): 'BaseVariant' is deprecated. Deprecated in Java\nw: C:\\Users\\emanu\\App\\rn4\\node_modules\\react-native-gradle-plugin\\src\\main\\kotlin\\com\\facebook\\react\\TaskConfiguration.kt: (12, 37): 'LibraryVariant' is deprecated. Deprecated in Java\nw: C:\\Users\\emanu\\App\\rn4\\node_modules\\react-native-gradle-plugin\\src\\main\\kotlin\\com\\facebook\\react\\TaskConfiguration.kt: (28, 51): 'BaseVariant' is deprecated. Deprecated in Java\nw: C:\\Users\\emanu\\App\\rn4\\node_modules\\react-native-gradle-plugin\\src\\main\\kotlin\\com\\facebook\\react\\TaskConfiguration.kt: (131, 12): 'ApplicationVariant' is deprecated. Deprecated in Java\nw: C:\\Users\\emanu\\App\\rn4\\node_modules\\react-native-gradle-plugin\\src\\main\\kotlin\\com\\facebook\\react\\TaskConfiguration.kt: (132, 12): 'LibraryVariant' is deprecated. Deprecated in Java\nw: C:\\Users\\emanu\\App\\rn4\\node_modules\\react-native-gradle-plugin\\src\\main\\kotlin\\com\\facebook\\react\\TaskConfiguration.kt: (250, 14): 'BaseVariant' is deprecated. Deprecated in Java\n\n&gt; Task :react-native-gradle-plugin:compileJava\n6 actionable tasks: 6 executed\nNote: C:\\Users\\emanu\\App\\rn4\\node_modules\\react-native-gradle-plugin\\src\\main\\java\\com\\facebook\\react\\codegen\\generator\\SchemaJsonParser.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\n\nFAILURE: Build failed with an exception.\n\n* Where:\nBuild file 'C:\\Users\\emanu\\App\\rn4\\android\\app\\build.gradle' line: 1\n\n* What went wrong:\nA problem occurred evaluating project ':app'.\n&gt; Failed to apply plugin 'com.android.internal.application'.\n   &gt; Android Gradle plugin requires Java 11 to run. You are currently using Java 1.8.\n     You can try some of the following options:\n       - changing the IDE settings.\n       - changing the JAVA_HOME environment variable.\n       - changing `org.gradle.java.home` in `gradle.properties`.\n\n* Try:\n&gt; Run with --stacktrace option to get the stack trace.\n&gt; Run with --info or --debug option to get more log output.\n&gt; Run with --scan to get full insights.\n\n* Get more help at https://help.gradle.org\n\nBUILD FAILED in 59s\n\nerror Failed to install the app. Make sure you have the Android development environment set up: https://reactnative.dev/docs/environment-setup.\nError: Command failed: gradlew.bat app:installDebug -PreactNativeDevServerPort=8081\nNote: C:\\Users\\emanu\\App\\rn4\\node_modules\\react-native-gradle-plugin\\src\\main\\java\\com\\facebook\\react\\codegen\\generator\\SchemaJsonParser.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\n\nFAILURE: Build failed with an exception.\n\n* Where:\nBuild file 'C:\\Users\\emanu\\App\\rn4\\android\\app\\build.gradle' line: 1\n\n* What went wrong:\nA problem occurred evaluating project ':app'.\n&gt; Failed to apply plugin 'com.android.internal.application'.\n   &gt; Android Gradle plugin requires Java 11 to run. You are currently using Java 1.8.\n     You can try some of the following options:\n       - changing the IDE settings.\n       - changing the JAVA_HOME environment variable.\n       - changing `org.gradle.java.home` in `gradle.properties`.\n\n* Try:\n&gt; Run with --stacktrace option to get the stack trace.\n&gt; Run with --info or --debug option to get more log output.\n&gt; Run with --scan to get full insights.\n\n* Get more help at https://help.gradle.org\n\nBUILD FAILED in 59s\n\n    at makeError (C:\\Users\\emanu\\App\\rn4\\node_modules\\execa\\index.js:174:9)\n    at C:\\Users\\emanu\\App\\rn4\\node_modules\\execa\\index.js:278:16\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async runOnAllDevices (C:\\Users\\emanu\\App\\rn4\\node_modules\\@react-native-community\\cli-platform-android\\build\\commands\\runAndroid\\runOnAllDevices.js:109:5)\n    at async Command.handleAction (C:\\Users\\emanu\\App\\rn4\\node_modules\\@react-native-community\\cli\\build\\index.js:192:9)\ninfo Run CLI with --verbose flag for more details.\n</code></pre>\n<p>I also run <code>cd android &amp;&amp; ./gradlew clean</code> and the output is:</p>\n<pre><code>FAILURE: Build failed with an exception.\n\n* Where:\nBuild file 'C:\\Users\\emanu\\App\\rn4\\android\\app\\build.gradle' line: 1\n\n* What went wrong:\nA problem occurred evaluating project ':app'.\n&gt; Failed to apply plugin 'com.android.internal.application'.\n   &gt; Android Gradle plugin requires Java 11 to run. You are currently using Java 1.8.\n     You can try some of the following options:\n       - changing the IDE settings.\n       - changing the JAVA_HOME environment variable.\n       - changing `org.gradle.java.home` in `gradle.properties`.\n</code></pre>\n<p>This is the file in <code>android/gradle/wrapper/gradle-wrapper.properties</code></p>\n<pre><code>distributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-7.3.3-all.zip\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n</code></pre>\n<p>and this is the output when I run <code>./gradlew --version</code></p>\n<pre><code>------------------------------------------------------------\nGradle 7.3.3\n------------------------------------------------------------\n\nBuild time:   2021-12-22 12:37:54 UTC\nRevision:     6f556c80f945dc54b50e0be633da6c62dbe8dc71\n\nKotlin:       1.5.31\nGroovy:       3.0.9\nAnt:          Apache Ant(TM) version 1.10.11 compiled on July 10 2021\nJVM:          1.8.0_302 (Oracle Corporation 25.302-b08)\nOS:           Windows 10 10.0 amd64\n</code></pre>\n<p>I read similar posts but I haven't been able to fix it. With folders that I created some days ago I have no problem when I run the app.</p>\n<p>Someone can help me please?\nVery thanks!</p>\n", "AcceptedAnswerId": 71800545, "AcceptedAnswer": "<p>If you are using React Native witch Chocolatey, you must update JDK version to 11.<br />\nIn order to do the update, execute this in PowerShell (with admin privileges):</p>\n<pre><code>choco install -y openjdk11\n</code></pre>\n<p>After that, the first time (only the first time) you run <code>npm android</code>, you will get a lot of warnings, but the built of the project will work.</p>\n<p>If you continue receiving an error, maybe you need to adjust the gradle version of your project to be compatible with the new JDK version.<br />\nYou can achieve this by editing the file <em>YOUR_PROJECT\\android\\gradle\\wrapper\\gradle-wrapper.properties</em><br />\nUpdate the version of <strong>distributionUrl</strong> to 7.4.2</p>\n<p>I hope I have been helpful</p>\n"}
{"Id": 71966064, "PostTypeId": 1, "Title": "Java: FileOutputStream(\"NUL:\") not working after Java upgrade", "Body": "<p>On Windows, NUL is the null output device similar to /dev/null on Linux.</p>\n<p>With Oracle Java 8 <strong>Update 331</strong>, trying to get a <code>new FileOutputStream(&quot;NUL:&quot;)</code> throws an exception. Previously (Java 8u321) it worked fine.</p>\n<p>The problem seems to be the colon:</p>\n<ul>\n<li><code>new FileOutputStream(&quot;NUL&quot;)</code> - OK</li>\n<li><code>new FileOutputStream(&quot;NUL:&quot;)</code> - exception</li>\n</ul>\n<p>Can anyone point me to docs or JDK sources regarding this change? I can't change the code itself because it is in a 3rd party lib (xnio-api).</p>\n<pre><code>try\n{\n  new FileOutputStream(&quot;NUL:&quot;);\n  System.out.println(&quot;OK&quot;);\n}\ncatch (FileNotFoundException e)\n{\n  System.out.println(e);\n}\n</code></pre>\n", "AcceptedAnswerId": 71966125, "AcceptedAnswer": "<p>I suspect <a href=\"https://github.com/openjdk/jdk8u/commit/d72d28967d732ba32e02178b828255378c5a8938\" rel=\"noreferrer\">this is the offending change</a>.</p>\n<p>Apparently it tries to avoid accessing ADS (alternate data streams), but seems to &quot;accidentally&quot; also prevent access to device-files like this.</p>\n<p>If that's correct, then you can try setting the system property <code>jdk.io.File.enableADS</code> to <code>true</code> to re-enable the old behaviour.</p>\n"}
{"Id": 71434304, "PostTypeId": 1, "Title": "Does Java Evaluate a Variable Declared as Final only Once?", "Body": "<p>I'm writing a Java program that requires thousands of <code>System.out.println()</code> statements that will be printed hundreds of millions (or billions) of times throughout the lifecycle of the program for debugging purposes:</p>\n<pre><code>if (GVar.runInDebugMode) System.out.println(&quot;Print debug message&quot;);\n</code></pre>\n<p>In the real world, these statements can be deactivated in order to speed up a computational heavy calculation.</p>\n<p>If I set:</p>\n<pre><code>public final static boolean runInDebugMode = false;\n</code></pre>\n<p>Does the compiler re-evaluate <code>runInDebugMode</code> each time it comes across a statement like: <code>if (GVar.runInDebugMode)</code> or since it was declared as final it will be evaluated once at the beginning of the program and won't put additional strain on the CPU? In other words, would I be better off commenting out all debug statements entirely once I deploy the app or is setting <code>runInDebugMode</code>  to <code>false</code> sufficient?</p>\n", "AcceptedAnswerId": 71470775, "AcceptedAnswer": "<p>When you declare a variable like</p>\n<pre class=\"lang-java prettyprint-override\"><code>public final static boolean runInDebugMode = false;\n</code></pre>\n<p>it\u2019s a <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-4.html#jls-4.12.4\" rel=\"nofollow noreferrer\" title=\"4.12.4. final Variables\"><em>compile-time constant</em></a>.</p>\n<blockquote>\n<p>A <em>constant variable</em> is a <code>final</code> variable of primitive type or type <code>String</code> that is initialized with a constant expression (<a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-15.html#jls-15.29\" rel=\"nofollow noreferrer\" title=\"15.29. Constant Expressions\">\u00a715.29</a>).</p>\n</blockquote>\n<p><a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-13.html#jls-13.1-110-C\" rel=\"nofollow noreferrer\" title=\"13.1. The Form of a Binary\">which means that</a></p>\n<blockquote>\n<p>A reference to a field that is a constant variable (<a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-4.html#jls-4.12.4\" rel=\"nofollow noreferrer\" title=\"4.12.4. final Variables\">\u00a74.12.4</a>) must be resolved at compile time to the value <code>V</code> denoted by the constant variable's initializer.</p>\n<p>If such a field is <code>static</code>, then no reference to the field should be present in the code in a binary file, including the class or interface which declared the field.</p>\n</blockquote>\n<p>In other words, when you write <code>if(runInDebugMode)</code> anywhere and <code>runInDebugMode</code> is <code>false</code> at compile time, the behavior is as if you\u2019ve written <code>if(false)</code>, as the value must be resolved at compile time and no reference to the field appears in the compiled class file.</p>\n<p>Your use case has been discussed specifically in <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-14.html#jls-14.22-300-ZA\" rel=\"nofollow noreferrer\" title=\"14.22. Unreachable Statements\">\u00a714.22</a></p>\n<blockquote>\n<p>However, in order to allow the <code>if</code> statement to be used conveniently for &quot;conditional compilation&quot; purposes, the actual rules differ.</p>\n<p>As an example, the following statement results in a compile-time error:</p>\n<pre><code>while (false) { x=3; }\n</code></pre>\n<p>because the statement <code>x=3;</code> is not reachable; but the superficially similar case:</p>\n<pre><code>if (false) { x=3; }\n</code></pre>\n<p>does not result in a compile-time error. An optimizing compiler may realize that the statement <code>x=3;</code> will never be executed and may choose to omit the code for that statement from the generated <code>class</code> file, but the statement <code>x=3;</code> is not regarded as &quot;unreachable&quot; in the technical sense specified here.</p>\n<p>The rationale for this differing treatment is to allow programmers to define &quot;flag&quot; variables such as:</p>\n<pre><code>static final boolean DEBUG = false;\n</code></pre>\n<p>and then write code such as:</p>\n<pre><code>if (DEBUG) { x=3; }\n</code></pre>\n<p>The idea is that it should be possible to change the value of <code>DEBUG</code> from <code>false</code> to <code>true</code> or from <code>true</code> to <code>false</code> and then compile the code correctly with no other changes to the program text.</p>\n<p>Conditional compilation comes with a caveat. If a set of classes that use a &quot;flag&quot; variable - or more precisely, any <code>static</code> constant variable (<a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-4.html#jls-4.12.4\" rel=\"nofollow noreferrer\" title=\"4.12.4. final Variables\">\u00a74.12.4</a>) - are compiled and conditional code is omitted, it does not suffice later to distribute just a new version of the class or interface that contains the definition of the flag.</p>\n</blockquote>\n<p>So, this statement makes clear that this form of conditional compilation matches the intent of the language designers and that compilers are entitled to omit the code in question (all relevant compilers do). In principle, a compiler is not required to omit the code, but since it <em>must not</em> generate a reference to the field <code>GVar.runInDebugMode</code> in the compiled code, the code can\u2019t contain a real conditional. If the code is not omitted, it must be skipped in a de-facto unconditional way. Either, by a <code>goto</code> instruction or, when compiling in the most na\u00efve way imaginable, by literally testing <code>false</code>, <code>iconst_0; ifeq \u2026</code>. Both approaches would be on the nanosecond scale in interpreted execution mode and no challenge to the JIT compiler/ optimizer at all.</p>\n<hr />\n<p>It\u2019s worth mentioning that <code>static final</code> fields are trusted fields which are normally not even changeable by Reflection. This is used, e.g. by the Assertion feature, as under the hood, a class containing an <code>assert</code> statement will have a <code>static final boolean</code> field initialized at class initialization time (so it\u2019s not a compile-time constant) and each <code>assert</code> statement will skip its check conditionally, depending on the state of the <code>static final</code> variable. It was as early as at Java\u00a01.4 time, when it was concluded that the necessary dead code elimination is commonplace in JVMs, to rely on it in this way.</p>\n<p>So even if you turn your debug flag from compile-time constant to an initialization-time constant, the impact on the performance would be hardly noticeable. But the way you\u2019re using it now, the code is removed at compile-time already and doesn\u2019t rely on the JVM anyway.</p>\n"}
{"Id": 71363302, "PostTypeId": 1, "Title": "Java sorting list of array vs sorting list of list", "Body": "<p>I have a <strong>list of points</strong> where each <strong>point</strong> is a tiny <strong>list</strong> of size <code>2</code>. I want to sort the list of points in increasing order of <code>x</code> and if <code>x</code> values are equal, I break tie by sorting in decreasing order of <code>y</code>.</p>\n<p>I wrote a custom comparator to sort the points like this:</p>\n<pre><code>Collections.sort(points, (a, b) -&gt; {\n    if (a.get(0) != b.get(0)) {\n        return a.get(0) - b.get(0);\n    } return b.get(1) - a.get(1); \n});\n</code></pre>\n<p>Here's the <strong>input</strong> before sorting:</p>\n<pre><code>(2, 1000)\n(9, -1000)\n(3, 15)\n(9, -15)\n(5, 12)\n(12, -12)\n(5, 10)\n(10001, -10)\n(19, 8)\n(10001, -8)\n</code></pre>\n<p>Here's the <strong>result</strong> produced after sorting with the above comparator:</p>\n<pre><code>(2, 1000)\n(3, 15)\n(5, 12)\n(5, 10)\n(9, -15)\n(9, -1000)\n(12, -12)\n(19, 8)\n(10001, -10)\n(10001, -8)\n</code></pre>\n<p><strong>Observations:</strong></p>\n<ol>\n<li>The input is sorted in ascending order on <code>x</code>.</li>\n<li><code>(5, 12)</code> was correctly put before <code>(5, 10)</code>.</li>\n<li><code>(9, -15)</code> was correctly put before <code>(9, -1000)</code>.</li>\n<li>However, <code>(10001, -10)</code> was put before <code>(10001, -8)</code>. Even though <code>-8</code> is larger than <code>-10</code>.</li>\n</ol>\n<p>Feel like I am missing something trivial. I experimented with a few other ways of writing the comparator like using <code>Integer.compare(a, b)</code> or just <code>a.compareTo(t)</code>, but got the same result.</p>\n<p>Finally, I changed the representation of point from <code>List&lt;Integer&gt;</code> to <code>int[]</code> and wrote the same comparator again. See results below:</p>\n<pre><code>Collections.sort(points, (a, b) -&gt; {\n    if (a[0] != b[0])\n        return a[0] - b[0];\n    return b[1] - a[1];\n});\n</code></pre>\n<p><strong>Input</strong> before sorting:</p>\n<pre><code>(2, 1000)\n(9, -1000)\n(3, 15)\n(9, -150\n(5, 12)\n(12, -12)\n(5, 10)\n(10001, -10)\n(19, 8)\n(10001, -8)\n</code></pre>\n<p><strong>After sorting:</strong></p>\n<pre><code>(2, 1000)\n(3, 15)\n(5, 12)\n(5, 10)\n(9, -15)\n(9, -1000)\n(12, -12)\n(19, 8)\n(10001, -8)\n(10001, -10)\n</code></pre>\n<p>So list of arrays is getting sorted correctly as <code>(10001, -8)</code> was correctly put before <code>(10001, -10)</code>.</p>\n<p>I am not able to understand why changing the representation of point resolved the issue and hence this question. I can give more details on how I am creating the List of points if required.</p>\n", "AcceptedAnswerId": 71363726, "AcceptedAnswer": "<blockquote>\n<p>I am missing something trivial</p>\n</blockquote>\n<p>Method <code>equals()</code> should be used for object comparison. Double equals <code>==</code> checks whether two references point to the <strong>same object</strong> in memory.</p>\n<p>If you change the condition inside the comparator to <code>!a.get(0).equals(b.get(0))</code> it will work correctly.</p>\n<blockquote>\n<p>However, <strong>(10001, -10)</strong> was put before <strong>(10001, -8)</strong>. Even though <strong>-8</strong> is larger than <strong>-10</strong>.</p>\n</blockquote>\n<p>The reason for such behavior is that <strong>JVM</strong> caches all the instances of <code>Integer</code> (as well as <code>Byte</code>, <code>Short</code> and <code>Long</code>) in the range <strong><code>[-128; 127]</code></strong>. I.e. these instances are reused, the result of autoboxing of let's say <code>int</code> with a value of <code>12</code> will be <strong>always</strong> the same object.</p>\n<p>Because small values in your example like <code>3</code>, <code>5</code>, <code>12</code> will be represented by a <strong>single object</strong>, they were compared with <code>==</code> without issues. But the result of comparison with <code>==</code> for two <code>Integer</code> instances with a value of <code>10001</code> will be <strong><code>false</code></strong> because in this case there will be <strong>two distinct objects</strong> in the <em>heap</em>.</p>\n<p>The approach of caching frequently used objects is called the <a href=\"https://en.wikipedia.org/wiki/Flyweight_pattern\" rel=\"nofollow noreferrer\"><strong>Flyweight design pattern</strong></a>. It's very rarely used in <strong>Java</strong> because this pattern can bring benefits when <em>tons of identical objects</em> are being <em>created and destroyed</em>. Only in such a case caching these objects will pay off with a significant performance improvement. As far as I know, it's used in game development.</p>\n<h3>Use the power of objects</h3>\n<p><code>Point</code> must be an object, not a list, as <a href=\"https://stackoverflow.com/a/71363938/17949945\">Code-Apprentice</a> has pointed out in his answer. Use the <strong>power of objects</strong> and don't <a href=\"https://stackoverflow.com/questions/70993311/how-i-can-access-and-add-value-from-the-list-which-is-nested-in-the-hashmap-and/71113033\">overuse collections</a>. It brings several <em>advantages</em>:</p>\n<ul>\n<li>class provides you a <strong>structure</strong>, it's easier to organize your code when you are thinking in terms of objects;</li>\n<li>behavior declared inside a class is <strong>reusable</strong> and easier to test;</li>\n<li>with classes, you can use the power of <a href=\"https://docs.oracle.com/javase/tutorial/java/IandI/polymorphism.html\" rel=\"nofollow noreferrer\"><strong>polymorphism</strong></a>.</li>\n</ul>\n<p><strong>Caution:</strong> objects could be also misused, one of the possible indicators of that is when a class doesn't declare any behavior apart from getters and its data is being processed somehow in the code outside this class.</p>\n<p>Although the notion of point (<em>as a geometrical object</em>) isn't complicated, there are some useful options with regard to methods. For example, you could make instances of the <code>Point</code> class to be able to check to whether they are aligned <em>horizontally</em> or <em>vertically</em>, or whether two points are within a particular <em>radius</em>. And <code>Point</code> class can implement <code>Comparable</code> interface so that points will be able to compare themselves without a <code>Comparator</code>.</p>\n<h3>Sorting</h3>\n<p>With <strong>Java 8</strong> method <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/List.html#sort(java.util.Comparator)\" rel=\"nofollow noreferrer\"><strong><code>sort()</code></strong></a>\nwas added to the <code>List</code> interface. It expects an instance of <code>Comparator</code>, and if element of the list implement comparable, and you want them to be sorted according to the natural order <code>null</code> can be passed as an argument.</p>\n<blockquote>\n<p>If the specified comparator is null then all elements in this list must implement the Comparable interface and the elements' natural ordering should be used.</p>\n</blockquote>\n<p>So instead of using utility class <code>Collections</code> you can invoke method <code>sort()</code> directly on a list of points (assuming that <code>Point</code> implements <code>Comparable&lt;Point&gt;</code>):</p>\n<pre><code>points.sort(null); // the same as   points.sort(Comparator.naturalOrder()); \n</code></pre>\n<p>Also, you can create multiple custom comparators by utilizing <code>default</code> and <code>static</code> methods from the <code>Comparator</code> interface like <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Comparator.html#comparingInt(java.util.function.ToIntFunction)\" rel=\"nofollow noreferrer\"><strong>comparingInt()</strong></a> and <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Comparator.html#thenComparing(java.util.Comparator)\" rel=\"nofollow noreferrer\"><strong>thenComparing()</strong></a>.</p>\n<p>(<em>for more information on how to build comparators with <strong>Java 8</strong> methods take a look at <a href=\"https://www.baeldung.com/java-8-comparator-comparing\" rel=\"nofollow noreferrer\">this tutorial</a></em>)</p>\n"}
{"Id": 71642208, "PostTypeId": 1, "Title": "Parameter value [%Gabrek%] did not match expected type [java.lang.Character (n/a)];", "Body": "<p>i've been writing wirting a program in Spring Boot Web with JPA and i'm using a query to access some data with a 'contains' and 'ignorecase' filter, i've done this before in other programs and it has worked fine, but now i'm getting this error, i'm completely lost at this point since i can't find anything in google, i went really far down the rabbit hole looking as to why it happens and so far i don't see anything out of place in my code, the type of variable declared seems to be okay but as i've said, i'm lost. It's important to mention that for some reason when I do the query on my website for the first time, everything works fine, i get the proper results and all, but when I go back to home and try with another query (or even the same) i get the error. Code below:</p>\n<p><strong>Model</strong></p>\n<pre><code>import javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\n\n@Entity\npublic class Serie {\n    \n    @Id\n    @Column(columnDefinition = &quot;NUMERIC(19,0)&quot;)\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id;\n    private String title;\n    private String red;\n    @Column(columnDefinition = &quot;NUMERIC(19,0)&quot;)\n    private double rating;\n</code></pre>\n<p><strong>Repository</strong></p>\n<pre><code>import java.util.List;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport cl.desafiolatam.imdb.modelo.Serie;\n\npublic interface SerieRepository extends JpaRepository&lt;Serie, Integer&gt; {\n\n    public List&lt;Serie&gt; findByTitleContainingIgnoreCase(String title);\n    \n}\n</code></pre>\n<p><strong>Service</strong></p>\n<pre><code>import cl.desafiolatam.imdb.vo.SerieVO;\n\npublic interface SerieService {\n    \n    public SerieVO findByTitleContainingIgnoreCase(String title);\n\n}\n</code></pre>\n<p><strong>Service implementation</strong></p>\n<pre><code>import java.util.ArrayList;\nimport java.util.List;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport cl.desafiolatam.imdb.dao.SerieRepository;\nimport cl.desafiolatam.imdb.modelo.Serie;\nimport cl.desafiolatam.imdb.service.SerieService;\nimport cl.desafiolatam.imdb.vo.SerieVO;\n\n@Service\npublic class SerieServiceImpl implements SerieService {\n    \n    private static final Logger logger = LoggerFactory.getLogger(SerieServiceImpl.class);\n    \n    @Autowired\n    SerieRepository dao;\n    SerieVO respuesta;\n\n    @Override\n    @Transactional(readOnly = true)\n    public SerieVO findByTitleContainingIgnoreCase(String title) {\n        \n        respuesta = new SerieVO(&quot;Ha ocurrido un error!&quot;, &quot;104&quot;, new ArrayList&lt;Serie&gt;());\n\n        try {\n            List&lt;Serie&gt; serie = dao.findByTitleContainingIgnoreCase(title);\n            System.out.println(serie);\n            if(serie.size() &gt; 0) {\n                respuesta.setSeries(serie);\n                respuesta.setMensaje(&quot;Se ha encontrado el registro&quot;);\n                respuesta.setCodigo(&quot;0&quot;);\n            } else {\n                respuesta.setMensaje(&quot;No se ha encontrado el registro&quot;);\n                respuesta.setCodigo(&quot;104&quot;);\n            }\n        } catch (Exception e) {\n            logger.error(&quot;Error al buscar la serie&quot;, e);\n        }\n        \n        return respuesta;\n    }\n\n}\n</code></pre>\n<p><strong>Visual object</strong></p>\n<pre><code>import java.util.List;\n\nimport cl.desafiolatam.imdb.modelo.Serie;\n\npublic class SerieVO extends GenericVO {\n    \n    List&lt;Serie&gt; series;\n\n    public SerieVO(String mensaje, String codigo, List&lt;Serie&gt; series) {\n        super(mensaje, codigo);\n        this.series = series;\n    }\n\n    public SerieVO() {\n        super();\n    }\n</code></pre>\n<p><strong>Controller</strong></p>\n<pre><code>import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport cl.desafiolatam.imdb.modelo.Serie;\nimport cl.desafiolatam.imdb.service.SerieService;\nimport cl.desafiolatam.imdb.vo.SerieVO;\n\n@Controller\npublic class SerieController {\n\n    private final static Logger logger = LoggerFactory.getLogger(SerieController.class);\n\n    @Autowired\n    private SerieService svc;\n\n@GetMapping(&quot;/buscarSerie&quot;)\n    public ModelAndView buscarSerie(Model model, @RequestParam String nombreSerie) {\n        \n        SerieVO respuestaServicio = new SerieVO();\n        respuestaServicio.setMensaje(&quot;No se ha encontrado la serie&quot;);\n        \n        try {\n            respuestaServicio = svc.findByTitleContainingIgnoreCase(nombreSerie);\n            model.addAttribute(&quot;listaSeries&quot;, respuestaServicio.getSeries());\n            return new ModelAndView(&quot;resultadoserie&quot;);\n        } catch (Exception e) {\n            logger.error(&quot;Error al buscar la serie&quot;, e);\n        }\n        \n        return new ModelAndView(&quot;redirect:/user&quot;);\n        \n    }\n}\n</code></pre>\n<p><strong>Search input</strong></p>\n<pre><code>&lt;div class=&quot;d-flex justify-content-center pb-2&quot;&gt;\n        &lt;div class=&quot;container row&quot;&gt;\n            &lt;div class=&quot;col-md-4&quot;&gt;\n                &lt;div class=&quot;d-flex justify-content-center&quot;&gt;\n                    &lt;h2&gt;Buscar serie&lt;/h2&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;col-md-8&quot;&gt;\n                &lt;form action=&quot;buscarSerie&quot; method=&quot;get&quot;&gt;\n                    &lt;div class=&quot;row g-2&quot;&gt;\n                        &lt;div class=&quot;col-md&quot;&gt;\n                            &lt;div class=&quot;form-floating&quot;&gt;\n                                &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;floatingInputGrid&quot;\n                                    value=&quot;&quot; name=&quot;nombreSerie&quot; required&gt; &lt;label\n                                    for=&quot;floatingInputGrid&quot;&gt;Serie&lt;/label&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                    &lt;div class=&quot;d-flex justify-content-center pt-4&quot;&gt;\n                        &lt;input type=&quot;submit&quot; class=&quot;btn m-2 btn-dark&quot; value=&quot;Buscar&quot; /&gt;\n                    &lt;/div&gt;\n                &lt;/form&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n</code></pre>\n<p>As i've said, im really lost, researched everywhere, and checked the code in my last projects, i just can't find out why this one does me this dirty. Won't even fail at the start, it gives me a glimpse of hope and when i want to retry it, it crushes that little hope. :)</p>\n<p>I tried deleting my code and copy&amp;paste from projects where i know it works as intended, changed the variable and param. names to make it work with the new program but didn't work. Did a side by side comparison, tried a @Query writing the specific instruction. Looking for info. only with the 'contains' filter and yet, nothing worked.</p>\n", "AcceptedAnswerId": 71649782, "AcceptedAnswer": "<p>According to the Spring Data JPA <a href=\"https://github.com/spring-projects/spring-data-jpa/issues/2472\" rel=\"nofollow noreferrer\">issue #2472</a> this seems to be a problem in Hibernate 5.6.6 and 5.6.7.</p>\n<p>The Hibernate bug is <a href=\"https://hibernate.atlassian.net/browse/HHH-15142\" rel=\"nofollow noreferrer\">HHH-15142</a>.</p>\n<p>The solution is to either downgrade to Hibernate 5.6.5 or wait for a Hibernate patch to solve this issue.</p>\n<p><strong>Update</strong>: According to the bug report above this is resolved in version 5.6.9.</p>\n"}
{"Id": 71525731, "PostTypeId": 1, "Title": "java.lang.IllegalAccessError: class org.jetbrains.kotlin.kapt3.base.KaptContext Android", "Body": "<p>I've been getting an error like this for days, but I couldn't find a solution. Can you please help me?</p>\n<p>What could the problem be caused by?</p>\n<p>Error :</p>\n<pre><code>java.lang.IllegalAccessError: class org.jetbrains.kotlin.kapt3.base.KaptContext (in unnamed module @0x6acdb135) cannot access class com.sun.tools.javac.util.Context (in module jdk.compiler) because module jdk.compiler does not export com.sun.tools.javac.util to unnamed module @0x6acdb135\n    at org.jetbrains.kotlin.kapt3.base.KaptContext.&lt;init&gt;(KaptContext.kt:28)\n    at org.jetbrains.kotlin.kapt3.KaptContextForStubGeneration.&lt;init&gt;(KaptContextForStubGeneration.kt:40)\n    at org.jetbrains.kotlin.kapt3.AbstractKapt3Extension.contextForStubGeneration(Kapt3Extension.kt:287)\n    at org.jetbrains.kotlin.kapt3.AbstractKapt3Extension.analysisCompleted(Kapt3Extension.kt:171)\n    at org.jetbrains.kotlin.kapt3.ClasspathBasedKapt3Extension.analysisCompleted(Kapt3Extension.kt:102)\n    at org.jetbrains.kotlin.cli.jvm.compiler.TopDownAnalyzerFacadeForJVM.analyzeFilesWithJavaIntegration$invokeExtensionsOnAnalysisComplete(TopDownAnalyzerFacadeForJVM.kt:112)\n    at org.jetbrains.kotlin.cli.jvm.compiler.TopDownAnalyzerFacadeForJVM.analyzeFilesWithJavaIntegration(TopDownAnalyzerFacadeForJVM.kt:122)\n    at org.jetbrains.kotlin.cli.jvm.compiler.TopDownAnalyzerFacadeForJVM.analyzeFilesWithJavaIntegration$default(TopDownAnalyzerFacadeForJVM.kt:86)\n    at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler$analyze$1.invoke(KotlinToJVMBytecodeCompiler.kt:252)\n    at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler$analyze$1.invoke(KotlinToJVMBytecodeCompiler.kt:243)\n    at org.jetbrains.kotlin.cli.common.messages.AnalyzerWithCompilerReport.analyzeAndReport(AnalyzerWithCompilerReport.kt:113)\n    at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.analyze(KotlinToJVMBytecodeCompiler.kt:243)\n    at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.compileModules$cli(KotlinToJVMBytecodeCompiler.kt:90)\n    at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.compileModules$cli$default(KotlinToJVMBytecodeCompiler.kt:56)\n    at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:169)\n    at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:52)\n    at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:92)\n    at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:44)\n    at org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:98)\n    at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:412)\n    at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:112)\n    at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileIncrementally(IncrementalCompilerRunner.kt:358)\n    at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileIncrementally$default(IncrementalCompilerRunner.kt:300)\n    at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileImpl$rebuild(IncrementalCompilerRunner.kt:119)\n    at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileImpl(IncrementalCompilerRunner.kt:170)\n    at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:81)\n    at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:607)\n    at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:96)\n    at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1658)\n    at jdk.internal.reflect.GeneratedMethodAccessor103.invoke(Unknown Source)\n    at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.base/java.lang.reflect.Method.invoke(Method.java:568)\n    at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:360)\n    at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)\n    at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)\n    at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)\n    at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)\n    at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:587)\n    at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)\n    at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:705)\n    at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)\n    at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:704)\n    at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n    at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n    at java.base/java.lang.Thread.run(Thread.java:833)\n\n\nExecution failed for task ':app:kaptGenerateStubsMacellanDebugKotlin'.\n&gt; Internal compiler error. See log for more details\n</code></pre>\n", "AcceptedAnswerId": 71527580, "AcceptedAnswer": "<p>I found a solution and fixed this damn problem :D</p>\n<p>I recommend using, adding it to the root build.gradle. This will force using the given dependency in the whole project:</p>\n<p>build.gradle (Project)</p>\n<pre><code>allprojects {\n    configurations.all {\n        resolutionStrategy {\n            force 'org.xerial:sqlite-jdbc:3.34.0'\n        }\n    }\n}\n</code></pre>\n"}
{"Id": 71818173, "PostTypeId": 1, "Title": "How to handle NumberFormatException with Java StreamAPI", "Body": "<p>Is there a way to filter out all values that are bigger than the max value that can be stored in a <code>Long</code> using Stream API?</p>\n<p>The current situation is that you can search in the frontend with a simple search bar after some customers by using their ID.</p>\n<p>For example: <code>123456789, 10987654321.</code> If you put a <em>&quot;separator&quot;</em> between these two IDs, everything works. But if you forget the <em>&quot;separator&quot;</em> my code is trying to parse <code>12345678910987654321</code> into a Long and I guess there is the problem.</p>\n<p>That causes a <code>NumberFormatException</code> after trying to search. Is there a way to filter these numbers out that can't be parsed into a <code>Long</code> because they are too big?</p>\n<pre><code>String hyphen = &quot;-&quot;;\n\nString[] customerIds = bulkCustomerIdProperty.getValue()\n              .replaceAll(&quot;[^0-9]&quot;, hyphen)\n              .split(hyphen);\n...\ncustomerFilter.setCustomerIds(Arrays.asList(customerIds).stream()\n              .filter(n -&gt; !n.isEmpty()) \n              .map(n -&gt; Long.valueOf(n)) // convert to Long\n              .collect(Collectors.toSet()));\n</code></pre>\n", "AcceptedAnswerId": 71818306, "AcceptedAnswer": "<p>You can either extract parsing into a separate method and wrap it with a <code>try/catch</code>, or use <code>BigInteger</code> to eliminate values that exceed the range of <code>long</code>.</p>\n<p>Example with <code>BigInteger</code>:</p>\n<pre><code>Set&lt;Long&gt; result =  Stream.of(&quot;&quot;, &quot;12345&quot;, &quot;9999999999999999999999999999&quot;)\n        .filter(n -&gt; !n.isEmpty())\n        .map(BigInteger::new)\n        .filter(n -&gt; n.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) &lt;= 0 &amp;&amp;\n                     n.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) &gt;= 0)\n        .map(BigInteger::longValueExact) // convert to Long\n        .peek(System.out::println) // printing the output\n        .collect(Collectors.toSet());\n</code></pre>\n<p>Example with handling <code>NumberFormatException</code> in a separate method:</p>\n<pre><code>Set&lt;Long&gt; result =  Stream.of(&quot;&quot;, &quot;12345&quot;, &quot;9999999999999999999999999999&quot;)\n        .filter(n -&gt; !n.isEmpty())\n        .map(n -&gt; safeParse(n))\n        .filter(OptionalLong::isPresent)\n        .map(OptionalLong::getAsLong) // extracting long primitive and boxing it into Long\n        .peek(System.out::println) // printing the output\n        .collect(Collectors.toSet());\n\npublic static OptionalLong safeParse(String candidate) {\n    try {\n        return OptionalLong.of(Long.parseLong(candidate));\n    } catch (NumberFormatException e) {\n        return OptionalLong.empty();\n    }\n}\n</code></pre>\n<p><strong>Output</strong> (from <code>peek()</code>)</p>\n<pre><code>12345\n</code></pre>\n"}
{"Id": 71884469, "PostTypeId": 1, "Title": "Unable to find /oauth/device/code Auth0 Java API", "Body": "<p>Is there an API to fetch the device code via Auth0 Java API, we use the following snippet in Go, the question is if there is a standard API or should we make a HTTP request call</p>\n<pre class=\"lang-go prettyprint-override\"><code>url := &quot;https://dev-foo.us.auth0.com/oauth/device/code&quot;\n\npayload := strings.NewReader(&quot;client_id=RO6N7mr&amp;scope=openid&amp;audience=https://dev-foo.us.auth0.com/api/v2/&quot;)\n\nreq, _ := http.NewRequest(&quot;POST&quot;, url, payload)\n</code></pre>\n", "AcceptedAnswerId": 71909729, "AcceptedAnswer": "<p>The <a href=\"https://auth0.com/docs/api/authentication#get-device-code\" rel=\"nofollow noreferrer\">documentation</a> tells you that you need to send a POST request like the following:</p>\n<blockquote>\n<p>POST https://YOUR_DOMAIN/oauth/device/code</p>\n</blockquote>\n<blockquote>\n<p>Content-Type:</p>\n</blockquote>\n<blockquote>\n<p>application/x-www-form-urlencoded</p>\n<p>client_id=YOUR_CLIENT_ID&amp;scope=SCOPE&amp;audience=API_IDENTIFIER</p>\n</blockquote>\n<p>and the response would look like</p>\n<pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n{\n  &quot;device_code&quot;:&quot;GmRh...k9eS&quot;,\n  &quot;user_code&quot;:&quot;WDJB-MJHT&quot;,\n  &quot;verification_uri&quot;:&quot;https://YOUR_DOMAIN/device&quot;,\n  &quot;verification_uri_complete&quot;:&quot;https://YOUR_DOMAIN/device?user_code=WDJB-MJHT&quot;,\n  &quot;expires_in&quot;:900, //in seconds\n  &quot;interval&quot;:5\n}\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/J11aI.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/J11aI.png\" alt=\"enter image description here\" /></a></p>\n"}
{"Id": 72598626, "PostTypeId": 1, "Title": "Official recommendation / coding style guide on using multiple @throws tags for the same exception in JavaDoc", "Body": "<p>I just recently found out that <a href=\"https://stackoverflow.com/questions/9229991/can-i-use-multiple-throws-tags-for-the-same-exception-in-javadoc\">one can use multiple <code>@throws</code> tags for the same exception in Javadoc</a>.</p>\n<p>One of my students used it to document one of his methods in <a href=\"https://en.wikipedia.org/wiki/Connect_Four\" rel=\"noreferrer\">Connect Four</a>:</p>\n<pre><code>/*\n * ...\n * @throws IllegalArgumentException if the number of rows or columns is invalid \n * @throws IllegalArgumentException if one of the players has {@link Stone#None} as stone\n * @throws IllegalStateException if both players use the same stone color\n */\npublic void doSomething(...) { ... }\n</code></pre>\n<p>Now my (and his) question: Is there an official style guide or a general recommendation on whether to use a single <code>@throws</code> tag or &quot;is it fine&quot; to use multiple ones per exception type?</p>\n", "AcceptedAnswerId": 72600530, "AcceptedAnswer": "<p>There is an Oracle style guide for javadocs:</p>\n<ul>\n<li><a href=\"https://www.oracle.com/au/technical-resources/articles/java/javadoc-tool.html\" rel=\"nofollow noreferrer\">How to Write Doc Comments for the Javadoc Tool</a>.</li>\n</ul>\n<p>Whether that counts as &quot;official&quot; depends on your point of view.  Either way, I cannot see any mention in that document of multiple tags for the same exception.</p>\n<p>However, according to the following Q&amp;A, multiple <code>@throws</code> tags for the same exception is <em>supported</em> by the standard Javadoc tool chain; i.e. each of them will result in an entry in the generated HTML.</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/9229991/\">Can I use multiple @throws tags for the same exception in Javadoc?</a></li>\n</ul>\n<p><sub>(My personal opinion is the javadocs will be more readable if you don't do this, but that is <em>just my opinion</em>.)</sub></p>\n"}
{"Id": 73126185, "PostTypeId": 1, "Title": "What is overhead of Java Native Memory Tracking in \"summary\" mode?", "Body": "<p>I'm wondering what is the real/typical overhead when NMT is enabled via <code>\u2011XX:NativeMemoryTracking=summary</code> (the full command options I'm after are <code>-XX:+UnlockDiagnosticVMOptions \u2011XX:NativeMemoryTracking=summary \u2011XX:+PrintNMTStatistics</code>)</p>\n<p>I could not find much information anywhere - either on SO, blog posts or the official docs.\nThe docs say:</p>\n<blockquote>\n<p>Note: Enabling NMT causes a <strong>5% -10% performance overhead</strong>.</p>\n</blockquote>\n<p>But they do not say which mode is expected to have this performance overhead (both <em>summary</em> and <em>detail</em>?)\nand what this overhead really is (CPU, memory, ...).\nIn <a href=\"https://docs.oracle.com/en/java/javase/18/troubleshoot/diagnostic-tools.html#GUID-1F53A50E-86FF-491D-A023-8EC4F1D1AC77\" rel=\"noreferrer\">Native Memory Tracking guide</a> they claim:</p>\n<blockquote>\n<p>Enabling NMT will result in a 5-10 percent JVM performance drop, and memory usage for NMT adds 2 machine words to all malloc memory as a malloc header. NMT memory usage is also tracked by NMT.</p>\n</blockquote>\n<p>But again, is this true for both <em>summary</em> and <em>detail</em> mode?</p>\n<p>What I'm after is basically whether it's safe to add <code>\u2011XX:NativeMemoryTracking=summary</code> permanently for a production app (similar to <em>continuous</em> JFR recording) and what are potential costs.\nSo far, when testing this on our app, I didn't spot a difference but it's difficult to</p>\n<p>Is there an authoritative source of information containing more details about this performance overhead?\nDoes somebody have experience with enabling this permanently for production apps?</p>\n", "AcceptedAnswerId": 73167790, "AcceptedAnswer": "<p>The overhead of Native Memory Tracking obviously depends on how often the application allocates native memory. Usually, this is not something too frequent in a Java application, but cases may differ. Since you've already tried and didn't notice performance difference, your application is apparently not an exception.</p>\n<p>In the <code>summary</code> mode, Native Memory Tracking roughly does the following things:</p>\n<ul>\n<li>increases every <code>malloc</code> request in the JVM by 2 machine words (16 bytes);</li>\n<li>records the allocation size and flags in these 2 words;</li>\n<li>atomically increments (or decrements on <code>free</code>) the counter corresponding to the given memory type;</li>\n<li>besides <code>malloc</code> and <code>free</code>, it also handles changes in virtual memory reservation and allocations of new arenas, but these are even less frequent than <code>malloc/free</code> calls.</li>\n</ul>\n<p>So, to me, the overhead is quite small; 5-10% is definitely a large overestimation (the numbers would make sense for <code>detail</code> mode which collects and stores stack traces, which is expensive, but <code>summary</code> doesn't do that).</p>\n<p>When many threads concurrently allocate/free native memory, the update of an atomic counter could become a bottleneck, but again, that's more like an extreme case. In short, if you measured a real application and didn't notice any degradation, you're likely safe to enable NMT summary in production.</p>\n"}
{"Id": 73281636, "PostTypeId": 1, "Title": "Java Generics: Stream.map() returns \"capture of ?\" instead of \"?\"", "Body": "<p>I'm trying to build a <code>List</code> of Classes that implement a certain interface called <code>Interface</code>:</p>\n<pre><code>List&lt;Class&lt;? extends Interface&gt;&gt; myList= myMap.entrySet().stream()\n    .filter(entry -&gt; entry.getValue().equals(myValue))\n    .map(Map.Entry::getKey)   // Stream&lt;Interface&gt;\n    .map(Interface::getClass) // Stream&lt;Class&lt;capture of ? extends Interface&gt;&gt;\n    .distinct()\n    .toList();\n</code></pre>\n<p>I added as comment the type of the elements in the Stream after <code>map()</code> is called.</p>\n<p>The code iterates over all the entries in the map, and if their value is equal to <code>myValue</code>, then:</p>\n<ul>\n<li>first, gets the <em>instance</em> of type <code>Interface</code> (which is the <em>key</em> of the <em>entry</em>)</li>\n<li>then, gets the <code>Class</code> implementing the <code>Interface</code>.</li>\n</ul>\n<p><code>myMap</code> is defined as:</p>\n<pre><code>Map&lt;Interface, Integer&gt; myMap = new HashMap&lt;&gt;()\n</code></pre>\n<p>The error I'm getting :</p>\n<pre><code>Incompatible types.\nFound: 'java.util.List&lt;java.lang.Class&lt;capture&lt;? extends application.interfaces.Interface&gt;&gt;&gt;',\nrequired: 'java.util.List&lt;java.lang.Class&lt;? extends application.interfaces.Interface&gt;&gt;'\n</code></pre>\n<p>I am clearly missing something about how <em>Generics</em> work in Java, but I am at a loss here. I suppose it's something related to the fact that the compiler cannot correctly reify my <code>?</code> wildcard.</p>\n", "AcceptedAnswerId": 73281848, "AcceptedAnswer": "<p>As <em>@Slaw</em> has pointed out in the comments, in this case <code>getClass()</code> is capable to provide the information about the generic type to the compiler.</p>\n<p>According to the <a href=\"https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/Object.html#getClass()\" rel=\"nofollow noreferrer\"><em>documentation</em></a>:</p>\n<blockquote>\n<p>The actual result type is <code>Class&lt;? extends |X|&gt;</code> where <code>|X|</code> is the erasure of the static type of the expression on which getClass is called.</p>\n</blockquote>\n<p>Hence, at compile time, we would have a type <code>? extends Interface</code> and the reason of the observed behavior is related solely to peculiarities of <strong>type inference</strong> in Java.</p>\n<p>In this case, when we are chaining methods after <code>map()</code> operation, the compiler fails to infer the type of the method reference <code>Interface::getClass</code> correctly based on the resulting type returned by the stream.</p>\n<p>If we substitute <code>toList</code>, which expects elements of type <code>T</code> and produces <code>List&lt;T&gt;</code>, with <code>collect(Collectors.toList())</code>, in which collector is of type <code>Collector&lt;? super T, A, R&gt;</code>, the compiler would be able to do its job (here's a <a href=\"https://www.jdoodle.com/ia/tN1\" rel=\"nofollow noreferrer\"><em>proof</em></a>):</p>\n<pre><code>List&lt;Class&lt;? extends Interface&gt;&gt; myList = myMap.entrySet().stream()\n    .filter(entry -&gt; Objects.equals(entry.getValue(), myValue))\n    .map(Map.Entry::getKey)   // Stream&lt;Interface&gt;\n    .map(Interface::getClass) // Stream&lt;Class&lt;? extends Interface&gt;&gt;\n    .distinct()\n    .collect(Collectors.toList());\n</code></pre>\n<p>But to make type inference working with <code>toList()</code> we need to provide the generic type <strong>explicitly</strong>.</p>\n<p>For instance, this code would compile, because the type of <code>Interface::getClass</code> could be inferred from the assignment context (here there are no operations after <code>map()</code>, hence <code>myStream</code> directly says what should be the return type of <code>map()</code>):</p>\n<pre><code>Stream&lt;Class&lt;? extends Interface&gt;&gt; myStream = myMap.entrySet().stream()\n    .filter(entry -&gt; Objects.equals(entry.getValue(), myValue))\n    .map(Map.Entry::getKey)\n    .map(Interface::getClass);\n\nList&lt;Class&lt;? extends Interface&gt;&gt; myList = myStream.distinct().toList();\n</code></pre>\n<p>A more handy way would be to use a so-called <em>Type Witness</em>:</p>\n<pre><code>Map&lt;Interface, Integer&gt; myMap = Map.of(new ClasA(), 1, new ClasB(), 1);\n        \nint myValue = 1;\n        \nList&lt;Class&lt;? extends Interface&gt;&gt; myList = myMap.entrySet().stream()\n    .filter(entry -&gt; Objects.equals(entry.getValue(), myValue))\n    .map(Map.Entry::getKey)                               // Stream&lt;Interface&gt;\n    .&lt;Class&lt;? extends Interface&gt;&gt;map(Interface::getClass) // Stream&lt;Class&lt;? extends Interface&gt;&gt;\n    .distinct()\n    .toList();\n        \nmyList.forEach(c -&gt; System.out.println(c.getSimpleName()));\n</code></pre>\n<p><em>Output:</em></p>\n<pre><code>ClasA\nClasB\n</code></pre>\n<p><em>Dummy classes:</em></p>\n<pre><code>interface Interface {}\nclass ClasA implements Interface {}\nclass ClasB implements Interface {}\n</code></pre>\n"}
{"Id": 73336136, "PostTypeId": 1, "Title": "Does having a wrapper object return value (e.g. Integer) cause auto boxing in Java?", "Body": "<p>I couldn't find a definitive answer for this seemingly simple question. If I write a method like this:</p>\n<pre><code>public Integer getAnInt() {\n  int[] i = {4};\n  return i[0];\n}\n</code></pre>\n<p>is the return value autoboxed into an Integer, or does it depend on what happens to the value after it's returned (e.g. whether the variable it is assigned to is declared as an Integer or int)?</p>\n", "AcceptedAnswerId": 73336170, "AcceptedAnswer": "<h1>Yes, boxed</h1>\n<p>It will be (auto)boxed in the bytecode (<code>.class</code> file) because it's part of the public API, so other code might depend on the return value being an <code>Integer</code>.</p>\n<p>The boxing and unboxing might be removed at runtime by the JITter under the right circumstances, but I don't know if it does that sort of thing.</p>\n"}
{"Id": 72841549, "PostTypeId": 1, "Title": "Container Fails to Start: Insufficient memory for the Java Runtime Environment to continue", "Body": "<p>We have an enterprise application running on Java 8. The deployment environment is built &amp; updated through Bitbucket pipelines. I have a <a href=\"https://i.stack.imgur.com/0Z3Ga.png\" rel=\"noreferrer\">graphic showing the high-level architecture of the environment</a>.  We have two app servers running identical configurations apart from some application specific environment variables.</p>\n<p>It was all working well until a week ago when after a successful pipeline run, the 2 app instances on one of the servers stopped working with the following error:</p>\n<pre><code>There is insufficient memory for the Java Runtime Environment to continue.\nCannot create GC thread. Out of system resources.\n</code></pre>\n<p>Both the instances are working fine on the other server. In contrast, the containers fail to start on this server.</p>\n<h2>Solutions Tried</h2>\n<p>The error accompanies the following information:</p>\n<p>Possible reasons:\nThe system is out of physical RAM or swap space\nThe process is running with CompressedOops enabled, and the Java Heap may be blocking the growth of the native heap.</p>\n<p>Possible solutions:</p>\n<ul>\n<li>Reduce memory load on the system</li>\n<li>Increase physical memory or swap space</li>\n<li>Check if swap backing store is full</li>\n<li>Decrease Java heap size (-Xmx/-Xms)</li>\n<li>Decrease number of Java threads</li>\n<li>Decrease Java thread stack sizes (-Xss)</li>\n<li>Set larger code cache with -XX:ReservedCodeCacheSize=</li>\n</ul>\n<p>We have tried:</p>\n<ol>\n<li>Adding more swap memory. The server has 8GB of RAM while we have tried the swap from 4GB to 9GB.</li>\n<li>Played with the heap sizes Xms &amp; Xmx from 128m to 4096m.</li>\n<li>Increased the RAM on this server to 16GB while the other server that works still does on 8GB.</li>\n</ol>\n<p>Here is how the memory &amp; swap consumption looks like:</p>\n<pre><code>free -mh\n              total        used        free      shared  buff/cache   available\nMem:           15Gi       378Mi        12Gi       1.0Mi       2.9Gi        14Gi\nSwap:           9Gi          0B         9Gi\n</code></pre>\n<p>I have links to several related artifacts.  These include the <a href=\"https://pastebin.mozilla.org/tE82QzDQ\" rel=\"noreferrer\">complete <code>docker logs</code> output</a> and the output of <code>docker info</code> on <a href=\"https://pastebin.mozilla.org/DdgUDpwj\" rel=\"noreferrer\">the failing server</a> and <a href=\"https://pastebin.mozilla.org/GrzhTFBT\" rel=\"noreferrer\">the operational server</a>.</p>\n<p>This is what <code>docker ps -a</code> gets us:</p>\n<pre><code>:~$ docker ps -a\nCONTAINER ID   IMAGE                                                                                  COMMAND                  CREATED        STATUS                    PORTS                                       NAMES\nd29747bf2ad3   :a7608a838625ae945bd0a06fea9451f8bf11ebe4   &quot;catalina.sh run&quot;        10 hours ago   Exited (1) 10 hours ago                                               jbbatch\n0951b6eb5d42   :a7608a838625ae945bd0a06fea9451f8bf11ebe4   &quot;catalina.sh run&quot;        10 hours ago   Exited (1) 10 hours ago                                               jbapp\n</code></pre>\n<p>We are out of ideas right now as we have tried almost all the solutions on stack overflow. What are we missing?</p>\n", "AcceptedAnswerId": 72841934, "AcceptedAnswer": "<p>I see that your Docker image uses Ubuntu 22.04 LTS as its base. Recently base Java images were rebuilt on top of this LTS version, which caused a lot of issues on older Docker runtimes. Most likely this is what you're experiencing. It has nothing to do with memory, but rather with Docker incompatibility with a newer Linux version used as a base image.</p>\n<p>Your operational server has Docker server version 20.10.10, while the failing server has version 20.10.09. The incompatibility issue was fixed exactly in Docker 20.10.10. Some more technical details on the incompatibility issue are available <a href=\"https://github.com/adoptium/containers/issues/215#issuecomment-1142046045\" rel=\"noreferrer\">here</a>.</p>\n<p>The solution would be to upgrade the failing server to at least Docker 20.10.10.</p>\n"}
{"Id": 71832118, "PostTypeId": 1, "Title": "sbt assembly cannot create jar getting java.lang.UnsupportedOperationException", "Body": "<p>I am using</p>\n<pre><code>scala 1.12.10\nakka 2.6.3\naddSbtPlugin(&quot;io.spray&quot; % &quot;sbt-revolver&quot; % &quot;0.9.1&quot;)\naddSbtPlugin(&quot;com.eed3si9n&quot; % &quot;sbt-assembly&quot; % &quot;1.1.0&quot;)\n</code></pre>\n<p>However when executing <code>sbt assembly</code> I am getting:</p>\n<pre><code>java.lang.UnsupportedOperationException: The Security Manager is deprecated and will be removed in a future release\n    at java.base/java.lang.System.setSecurityManager(System.java:416)\n    at sbt.TrapExit$.installManager(TrapExit.scala:53)\n    at sbt.StandardMain$.runManaged(Main.scala:109)\n    at sbt.xMain.run(Main.scala:76)\n    at xsbt.boot.Launch$$anonfun$run$1.apply(Launch.scala:111)\n    at xsbt.boot.Launch$.withContextLoader(Launch.scala:131)\n    at xsbt.boot.Launch$.run(Launch.scala:111)\n    at xsbt.boot.Launch$$anonfun$apply$1.apply(Launch.scala:37)\n    at xsbt.boot.Launch$.launch(Launch.scala:120)\n    at xsbt.boot.Launch$.apply(Launch.scala:20)\n    at xsbt.boot.Boot$.runImpl(Boot.scala:56)\n    at xsbt.boot.Boot$.main(Boot.scala:18)\n    at xsbt.boot.Boot.main(Boot.scala)\n[error] [launcher] error during sbt launcher: java.lang.UnsupportedOperationException: The Security Manager is deprecated and will be removed in a future release\n</code></pre>\n<p>running java 18</p>\n<pre><code>java -version\nopenjdk version &quot;18&quot; 2022-03-22\nOpenJDK Runtime Environment (build 18+36-2087)\nOpenJDK 64-Bit Server VM (build 18+36-2087, mixed mode, sharing)\n</code></pre>\n", "AcceptedAnswerId": 71847512, "AcceptedAnswer": "<p>Using java 8 solved this issue as AminMal suggested</p>\n"}
{"Id": 71641264, "PostTypeId": 1, "Title": "How can I solve this issue on Mac M1 Caused by: java.lang.Exception: No native library is found for os.name=Mac and os.arch=aarch64", "Body": "<p>I solved this issue with the code below in my build.gradle</p>\n<pre><code>  allprojects {\nconfigurations.all {\n    resolutionStrategy {\n        force 'org.xerial:sqlite-jdbc:3.34.0'\n      }\n   }\n } \n</code></pre>\n<p>But it has an effect on the project I am working on. for some reason, it is not working with room sql implemented on the project.</p>\n<p>I get this error when i removed the code above.</p>\n<p>Is there a better approach to solve this.</p>\n<pre><code>Caused by: java.lang.ExceptionInInitializerError\nat androidx.room.processor.DatabaseProcessor.doProcess(DatabaseProcessor.kt:82)\nat androidx.room.processor.DatabaseProcessor.process(DatabaseProcessor.kt:57)\nat androidx.room.RoomProcessor$DatabaseProcessingStep.process(RoomProcessor.kt:134)\nat com.google.auto.common.BasicAnnotationProcessor.process(BasicAnnotationProcessor.java:330)\nat com.google.auto.common.BasicAnnotationProcessor.process(BasicAnnotationProcessor.java:181)\nat org.jetbrains.kotlin.kapt3.base.incremental.IncrementalProcessor.process(incrementalProcessors.kt)\nat org.jetbrains.kotlin.kapt3.base.ProcessorWrapper.process(annotationProcessing.kt:161)\nat \n\n \n</code></pre>\n<p>jdk.compiler/com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:980)\n... 39 more</p>\n<pre><code>Caused by: java.lang.Exception: No native library is found for os.name=Mac and \nos.arch=aarch64. path=/org/sqlite/native/Mac/aarch64\nat org.sqlite.SQLiteJDBCLoader.loadSQLiteNativeLibrary(SQLiteJDBCLoader.java:333)\nat org.sqlite.SQLiteJDBCLoader.initialize(SQLiteJDBCLoader.java:64)\nat androidx.room.verifier.DatabaseVerifier.&lt;clinit&gt;(DatabaseVerifier.kt:68)\n... 47 more\n</code></pre>\n", "AcceptedAnswerId": 71898182, "AcceptedAnswer": "<p>update your room library</p>\n<pre><code>   implementation &quot;androidx.room:room-runtime:2.4.2&quot;\n   implementation &quot;androidx.room:room-ktx:2.4.2&quot;\n   kapt &quot;androidx.room:room-compiler:2.4.2&quot;\n</code></pre>\n<p>Here is <a href=\"https://developer.android.com/jetpack/androidx/releases/room#version_240_2\" rel=\"noreferrer\">Reference</a></p>\n"}
{"Id": 72046624, "PostTypeId": 1, "Title": "Firebase Tools and Java 11", "Body": "<p>This question falls somewhere between Firebase Tools, MacOS and Java. Probably 75% Java, 20% Firebase Tools and 5% MacOS.</p>\n<p>Starting with v10.5, firebase-tools started stating that 'Support for Java version &lt;= 10 will be dropped soon in firebase-tools@11. Please upgrade to Java version 11 or above to continue using the emulators.'</p>\n<p>I run macOS v11.6.5 on a Macbook Pro from mid-2014. When I go to <a href=\"https://www.java.com/en/download/\" rel=\"noreferrer\">Java's Downloads page</a>, it recommends Java 'Version 8 Update 331'. Not Java 11.</p>\n<p>Information on downloading Java 11 seems to be scarce. Oracle's <a href=\"https://www.oracle.com/java/technologies/javase/products-doc-jdk11certconfig.html\" rel=\"noreferrer\">page of certified configurations</a> includes MacOS 11, but I can't find anywhere obvious where Java 11 can be readily downloaded.</p>\n<p>A big part of the problem seems to be the terminology used. If I run <code>java -version</code>, I get:</p>\n<pre><code>java version &quot;1.8.0_331&quot;\nJava(TM) SE Runtime Environment (build 1.8.0_331-b09)\nJava HotSpot(TM) 64-Bit Server VM (build 25.331-b09, mixed mode)\n</code></pre>\n<p>Okay, I have build 1.8 of the Java Runtime Environment, aka the JRE if you are a Java enthusiast. <a href=\"https://github.com/firebase/firebase-tools/pull/4347/commits/9c2029cd0ed650a0403fb73ffe5bb1a8b989597f#diff-a1ad4cf0c9fac1cb8905b5f41ced4ca7dab42af061d383305738cc514a7923f3R442\" rel=\"noreferrer\">That</a> is apparently what is triggering the warning in Firebase Tools.</p>\n<p>There is also a Java product out there called 'Java SE 11'. The product itself is ambiguous, but the <a href=\"https://www.oracle.com/a/tech/docs/11-0-15-1-checksum.html\" rel=\"noreferrer\">checksums</a> all say 'SDK'. (A Software Development Kit: a thing that enables developers to develop Java programs. The name doesn't imply a Runtime Environment: a thing that enables Java to run on an operating system.) There is <a href=\"https://java.tutorials24x7.com/blog/how-to-install-java-11-on-mac\" rel=\"noreferrer\">an article</a> out there which claims that, if you <a href=\"https://www.oracle.com/java/technologies/downloads/#java11\" rel=\"noreferrer\">install Java SE 11</a> and run <code>java -version</code>, it will spit out <code>java version &quot;11.0.7&quot;</code>. That will probably satisfy Firebase Tools.</p>\n<p>But <a href=\"https://www.oracle.com/java/technologies/javase/11-relnote-issues.html\" rel=\"noreferrer\">Oracle's release notes</a> say: 'In Windows and macOS, installing the JDK in previous releases optionally installed a JRE. In JDK 11, this is no longer an option.' No longer an option... as in now you implicitly get JRE 11 with SDK 11? Or as in the SDK and JRE are now fully divorced, and the JRE must be ferreted out of its hiding like a wild beast?</p>\n<p>UPDATE 6/5/22: Java's checksums page now says 'JDK', and I guess that is better than 'SDK' because it implies 'Java Development Kit', which <a href=\"https://en.wikipedia.org/wiki/Java_Development_Kit\" rel=\"noreferrer\">this Wikipedia article</a> claims to include both a JRE ('java') and SDK (most of the other files).</p>\n", "AcceptedAnswerId": 72046625, "AcceptedAnswer": "<p>To install Java SE:</p>\n<p>Go <a href=\"https://www.oracle.com/java/technologies/downloads/\" rel=\"nofollow noreferrer\">here</a>.</p>\n<ol>\n<li>Scroll down to find your product. I chose Java SE 11. (Oracle will probably list later versions as they are made available.)</li>\n<li>Choose your operating system. I chose MacOS.</li>\n<li>Choose your file set. I chose the DMG installer.</li>\n<li>Download your chosen file set.</li>\n</ol>\n<p><a href=\"https://i.stack.imgur.com/XkYUB.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/XkYUB.png\" alt=\"Illustration\" /></a>\n5. Do whatever is required by your platform to install Java SE using the downloaded file set from #5.</p>\n<p>After installing Java SE 11, <code>java -version</code> now says <code>&quot;11.0.14&quot;</code> and Firebase Tools is now satisfied. My best guess is that JRE 11 was implicitly downloaded, and that developers need to start ignoring the <a href=\"https://www.java.com/en/download/\" rel=\"nofollow noreferrer\">main Download page</a> used by everyone else. (Why didn't the main Download page recommend Java 11 from the start?) Hopefully someone will see this question and clarify whether in the future, the 'Java SE' product implicitly includes both the JRE and SDK, and that the numbering system will always encompass both. In other words, hopefully when someone says we need 'Java 11', it means that we need to download SE 11, containing JRE 11 and SDK 11.</p>\n"}
{"Id": 72140664, "PostTypeId": 1, "Title": "Azure build error: \"Android Gradle plugin requires Java 11 to run. You are currently using Java 1.8\"", "Body": "<p>When building <code>Flutter</code> app in <code>azure devOps</code>, I receive this error:</p>\n<pre><code>Build file 'D:\\a\\1\\s\\android\\app\\build.gradle' line: 24\n\n* What went wrong:\nA problem occurred evaluating project ':app'.\n&gt; Failed to apply plugin 'com.android.internal.application'.\n   &gt; Android Gradle plugin requires Java 11 to run. You are currently using Java 1.8.\n     You can try some of the following options:\n       - changing the IDE settings.\n       - changing the JAVA_HOME environment variable.\n       - changing `org.gradle.java.home` in `gradle.properties`.\n</code></pre>\n<p>I've tried, these solutions:</p>\n<ul>\n<li>Creating <code>jitpack.yml</code> file, with <code>- openjdk11</code> value.</li>\n<li>Adding below lines to <code>app/build.gradle</code> file inside <code>android {}</code> block:</li>\n</ul>\n<p>...</p>\n<pre><code>compileOptions {\n\nsourceCompatibility JavaVersion.VERSION_11\n\n    targetCompatibility JavaVersion.VERSION_11\n}\n\nkotlinOptions {\n    jvmTarget = JavaVersion.VERSION_11.toString()\n}\n</code></pre>\n<p>And another solutions, but my error doesn't solve. By the way, I easily run app and build apk, locally on my mac without any errors, but when I push my code, Azure gives those build error.</p>\n", "AcceptedAnswerId": 72140711, "AcceptedAnswer": "<p>My error is solved by adding below lines into <code>azure-pipelines.yml</code> file:</p>\n<pre><code>steps:\n - task: JavaToolInstaller@0\n    inputs:\n      versionSpec: '11'\n      jdkArchitectureOption: 'x64'\n      jdkSourceOption: 'PreInstalled'\n</code></pre>\n"}
{"Id": 73187929, "PostTypeId": 1, "Title": "Android Studio Chipmunk (2021.2.1) Java 8 library desugaring in D8 and R8 Build Error: \"Unsupported desugared library configuration version\"", "Body": "<p>After updating my apps build gradle and dependencies (I did not update Android Studio itself), Android Studio is giving me this error: <code>Error: Unsupported desugared library configuration version, please upgrade the D8/R8 compiler.</code>\nBefore the update everything compiled fine.</p>\n<p>I am using:</p>\n<ul>\n<li><code>com.android.tools:desugar_jdk_libs:1.2.0</code> (This was the newest version I could find)</li>\n<li>Gradle plugin version <code>7.2.0</code></li>\n<li>Gradle version <code>7.5</code></li>\n<li>Android Studio version <code>Chipmunk (2021.2.1)</code></li>\n</ul>\n<p>Did I configuration something wrong? How can I fix this? Thanks in advance!</p>\n", "AcceptedAnswerId": 73189430, "AcceptedAnswer": "<p>According to <a href=\"https://developer.android.com/studio/write/java8-support#library-desugaring\" rel=\"noreferrer\">this page</a>, the minimum version of Android Gradle plugin required is <code>7.3.0-beta03</code> to be able to upgrade the desugar library to <code>1.2.0</code>, and <code>7.3.x</code> is not yet available for Android Studio Chipmunk.</p>\n"}
{"Id": 74011238, "PostTypeId": 1, "Title": "Understanding Java 17 Vector slowness and performance with pow operator", "Body": "<p>I have a question relating to the pow() function in Java's 17 new Vector API feature. I'm trying to implement the black scholes formula in a vectorized manner, but I'm having difficulty in obtaining the same performance as the scalar implementation</p>\n<p>The code is as follows:</p>\n<ol>\n<li>I create an array of doubles (currently, just 5.0)</li>\n<li>I loop over elements of that array (different looping syntax for scalar and vector)</li>\n<li>I create DoubleVectors from the double arrays within and do calculations (or just calculations for scalar) I am trying to do e^(value), and I believe that is the problem</li>\n</ol>\n<p>Here are some code snippets:</p>\n<pre><code>    public static double[] createArray(int arrayLength)\n    {\n        double[] array0 = new double[arrayLength];\n        for(int i=0;i&lt;arrayLength;i++)\n        {\n            array0[i] = 2.0;\n        }\n        return array0;\n    } \n</code></pre>\n<pre><code>    @Param({&quot;256000&quot;})\n    int arraySize;\n    public static final VectorSpecies&lt;Double&gt; SPECIES = DoubleVector.SPECIES_PREFERRED;\n    DoubleVector vectorTwo =  DoubleVector.broadcast(SPECIES,2);\n    DoubleVector vectorHundred =  DoubleVector.broadcast(SPECIES,100);\n\n    double[] scalarTwo = new double[]{2,2,2,2};\n    double[] scalarHundred  = new double[]{100,100,100,100};\n\n    @Setup\n    public void Setup()\n    {\n        javaSIMD = new JavaSIMD();\n        javaScalar = new JavaScalar();\n        spotPrices = createArray(arraySize);\n        timeToMaturity = createArray(arraySize);\n        strikePrice = createArray(arraySize);\n        interestRate = createArray(arraySize);\n        volatility = createArray(arraySize);\n        e = new double[arraySize];\n        for(int i=0;i&lt;arraySize;i++)\n        {\n            e[i] = Math.exp(1);\n        }\n        upperBound = SPECIES.loopBound(spotPrices.length);\n    }\n    @Benchmark\n    @BenchmarkMode(Mode.Throughput)\n    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n    public void testVectorPerformance(Blackhole bh) {\n        var upperBound = SPECIES.loopBound(spotPrices.length);\n        for (var i=0;i&lt;upperBound; i+= SPECIES.length())\n        {\n            bh.consume(javaSIMD.calculateBlackScholesSingleCalc(spotPrices,timeToMaturity,strikePrice,\n                    interestRate,volatility,e, i));\n        }\n    }\n\n    @Benchmark\n    @BenchmarkMode(Mode.Throughput)\n    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n    public void testScalarPerformance(Blackhole bh) {\n        for(int i=0;i&lt;arraySize;i++)\n        {\n            bh.consume(javaScalar.calculateBlackScholesSingleCycle(spotPrices,timeToMaturity,strikePrice,\n                    interestRate,volatility, i,normDist));\n        }\n    }\n</code></pre>\n<pre><code>    public DoubleVector calculateBlackScholesSingleCalc(double[] spotPrices, double[] timeToMaturity, double[] strikePrice,\n                                                        double[] interestRate, double[] volatility, double[] e,int i){\n...(skip lines)\n        DoubleVector vSpot = DoubleVector.fromArray(SPECIES, spotPrices, i);\n...(skip lines)\n        DoubleVector powerOperand = vRateScaled\n                .mul(vTime)\n                .neg();\n        DoubleVector call  = (vSpot\n                .mul(CDFVectorizedExcelOptimized(d1,vE)))\n                .sub(vStrike\n                .mul(vE\n                        .pow(powerOperand))\n                .mul(CDFVectorizedExcelOptimized(d2,vE)));\n        return call;\n</code></pre>\n<p>Here are some JMH benchmarks (2 forks,2 warmups,2 iterations) on a Ryzen 5800X using WSL: Overall, it seems ~2x slower vs the scalar version.  I ran a simple time before vs time after separately, of the method without JMH and it seems inline.</p>\n<pre><code>Result &quot;blackScholes.TestJavaPerf.testScalarPerformance&quot;:\n  0.116 \u00b1(99.9%) 0.002 ops/ms [Average]\n       89873915287      cycles:u                  #    4.238 GHz                      (40.43%)\n      242060738532      instructions:u            #    2.69  insn per cycle   \n\n      \nResult &quot;blackScholes.TestJavaPerf.testVectorPerformance&quot;:\n  0.071 \u00b1(99.9%) 0.001 ops/ms [Average]\n       90878787665      cycles:u                  #    4.072 GHz                      (39.25%)\n      254117779312      instructions:u            #    2.80  insn per cycle  \n</code></pre>\n<p>I also enabled diagnostic options for the JVM. I see the following:</p>\n<pre><code>&quot;-XX:+UnlockDiagnosticVMOptions&quot;, &quot;-XX:+PrintIntrinsics&quot;,&quot;-XX:+PrintAssembly&quot;\n</code></pre>\n<pre><code>  0x00007fe451959413:   call   0x00007fe451239f00           ; ImmutableOopMap {rsi=Oop }\n                                                            ;*synchronization entry\n                                                            ; - jdk.incubator.vector.DoubleVector::arrayAddress@-1 (line 3283)\n                                                            ;   {runtime_call counter_overflow Runtime1 stub}\n  0x00007fe451959418:   jmp    0x00007fe4519593ce\n  0x00007fe45195941a:   movabs $0x7fe4519593ee,%r10         ;   {internal_word}\n  0x00007fe451959424:   mov    %r10,0x358(%r15)\n  0x00007fe45195942b:   jmp    0x00007fe451193100           ;   {runtime_call SafepointBlob}\n  0x00007fe451959430:   nop\n  0x00007fe451959431:   nop\n  0x00007fe451959432:   mov    0x3d0(%r15),%rax\n  0x00007fe451959439:   movq   $0x0,0x3d0(%r15)\n  0x00007fe451959444:   movq   $0x0,0x3d8(%r15)\n  0x00007fe45195944f:   add    $0x40,%rsp\n  0x00007fe451959453:   pop    %rbp\n  0x00007fe451959454:   jmp    0x00007fe451231e80           ;   {runtime_call unwind_exception Runtime1 stub}\n  0x00007fe451959459:   hlt    \n&lt;More halts cut off&gt;   \n[Exception Handler]\n  0x00007fe451959460:   call   0x00007fe451234580           ;   {no_reloc}\n  0x00007fe451959465:   movabs $0x7fe46e76df9a,%rdi         ;   {external_word}\n  0x00007fe45195946f:   and    $0xfffffffffffffff0,%rsp\n  0x00007fe451959473:   call   0x00007fe46e283d40           ;   {runtime_call}\n  0x00007fe451959478:   hlt    \n[Deopt Handler Code]\n  0x00007fe451959479:   movabs $0x7fe451959479,%r10         ;   {section_word}\n  0x00007fe451959483:   push   %r10\n  0x00007fe451959485:   jmp    0x00007fe4511923a0           ;   {runtime_call DeoptimizationBlob}\n  0x00007fe45195948a:   hlt    \n&lt;More halts cut off&gt;\n--------------------------------------------------------------------------------\n\n============================= C2-compiled nmethod ==============================\n  ** svml call failed for double_pow_32\n                                            @ 3   jdk.internal.misc.Unsafe::loadFence (0 bytes)   (intrinsic)\n                                            @ 3   jdk.internal.misc.Unsafe::loadFence (0 bytes)   (intrinsic)\n                                          @ 2   java.lang.Math::pow (6 bytes)   (intrinsic)\n</code></pre>\n<p>Investigations/Questions:</p>\n<ol>\n<li>Im writing different implementations of the formula, it is not 1:1 - could this be the cause? Looking at the number of instructions according to JMH, there is roughly a 12billion difference in num of instructions. With vectorization the processor runs at a lower clock rate as well.</li>\n<li>Is the choice of input numbers a problem? I've tried i+10/(array.Length) as well.</li>\n<li>Is there a reason I see that the SVML call fail for double_pow_32 ? I don't see this problem for smaller input array sizes BTW</li>\n<li>I changed the pow to mul (for both,obviously the eq is now very different) but it seems to be much faster as a result, results are as expected scalar vs vector</li>\n</ol>\n<p>Note: I believe it is using 256bit width vectors (checked during debugging)</p>\n", "AcceptedAnswerId": 74017185, "AcceptedAnswer": "<p>This might be related to <a href=\"https://bugs.openjdk.org/browse/JDK-8262275\" rel=\"noreferrer\">JDK-8262275, Math vector stubs are not called for double64 vectors</a></p>\n<blockquote>\n<p>For Double64Vector, the svml math vector stubs intrinsification is failing and they are not being called from jitted code.<br />\nBut we do have svml double64 vectors.</p>\n</blockquote>\n<p>You might try alternative operations, e.g. instead of <code>vE.pow(powerOperand)</code> with <code>vE</code> being a vector of <em>e</em>, you can use <code>powerOperand.lanewise(VectorOperators.EXP)</code> to perform <em>e</em><sup>x</sup> for all lanes.</p>\n<p>Keep in mind that this API is work in progress in incubator state\u2026</p>\n"}
{"Id": 74356407, "PostTypeId": 1, "Title": "How to get the date and time in format 2022-10-03T19:45:47.844Z in Java", "Body": "<p>I need the current system date and time in 2022-10-03T19:45:47.844Z format in a java class.</p>\n<p>I tried using the zoneddatetime and simple date format but couldn't get the write syntax or code from online. I'm beginner in Java, any help is appreciated.\nThanks.</p>\n", "AcceptedAnswerId": 74356572, "AcceptedAnswer": "<p>I hope this solves your problem:</p>\n<pre><code>import java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\n\npublic class Main {\n    public static void main(String[] args) {\n        ZonedDateTime zdt = ZonedDateTime.now(ZoneId.of(&quot;UTC&quot;));\n        DateTimeFormatter formatter =\n                DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd'T'HH:mm:ss.SSS'Z'&quot;);\n        System.out.println(zdt.format(formatter));\n    }\n}\n</code></pre>\n"}
{"Id": 73299265, "PostTypeId": 1, "Title": "Java Stream Collect() classifier can't detect type", "Body": "<p>I have the following code reading lines from a text file:</p>\n<pre><code>try (BufferedReader br = new BufferedReader(new InputStreamReader(Uio.decodeFrom(url)))) {\n        return br.lines()\n                .parallel()\n                .map(s -&gt; s.split(&quot;\\\\s+&quot;)) // split by whitespace\n                .collect(\n                        Collectors.groupingByConcurrent(\n                                arr -&gt; arr[0], // String 1\n                                Collectors.groupingByConcurrent(\n                                        arr -&gt; arr[arr.length-1], // String 2\n                                        Collectors.counting()\n                                )\n                        )\n                );\n    } catch (IOException e) {\n        throw new UncheckedIOException(e);\n    }\n</code></pre>\n<p>The text file has data like</p>\n<pre><code>String1     ... cols      ... String2\nstring1data ... otherdata ... string2data\n...\n</code></pre>\n<p>And I'm trying to group by <code>String1</code> and <code>String2</code> and get their counts. Then end result should be a <code>Map&lt;String, Map&lt;String, Long&gt;&gt;</code>. However, with the code above, the compiler is saying that the <code>collect()</code> returns a <code> ConcurrentMap &lt;Object, ConcurrentMap&lt;Object, Long&gt;&gt;</code>.</p>\n<p>Why are the keys not Strings?</p>\n", "AcceptedAnswerId": 73299327, "AcceptedAnswer": "<p>I can duplicate this error message, but the replacement of <code>String</code> with <code>Object</code> in the error message appears to be a red herring.  The real problem is that Java's generics are invariant.</p>\n<p>If the call to <code>collect</code> is returning a <code>ConcurrentMap&lt;String, ConcurrentMap&lt;String, Long&gt;&gt;</code>, that doesn't match <code>Map&lt;String, Map&lt;String, Long&gt;&gt;</code>, even though a <code>ConcurrentMap</code> is a <code>Map</code>.  The inner <code>Map</code> type must match exactly without a wildcard and bounds.</p>\n<p>If you introduce an upper-bounded wildcard to the return type, it will compile without error.  Have it return the type <code>Map&lt;String, ? extends Map&lt;String, Long&gt;&gt;</code>, so that the inner <code>ConcurrentMap&lt;String, Long&gt;</code> will match.</p>\n<p>A return type of <code>Map&lt;String, ConcurrentMap&lt;String, Long&gt;&gt;</code> will also work.</p>\n<p>It's unclear why <code>String</code> wasn't captured until the generics invariant issue was worked out.  Just a guess: the compiler didn't capture <code>String</code> yet, because it found the invariant generics issue first.  Once the invariant generics issue is resolved, it compiles without error, implying <code>String</code> does get inferred.</p>\n"}
{"Id": 73480342, "PostTypeId": 1, "Title": "Manifest for java:8-jre-alpine not found: manifest unknown: manifest unknown", "Body": "<p>I'm facing this error while building on Ubuntu server:</p>\n<blockquote>\n<p>Step 1/10 : FROM java:8-jre-alpine</p>\n<p>ERROR: Service 'XXXX' failed to build: manifest for java:8-jre-alpine not found: manifest unknown: manifest unknown</p>\n</blockquote>\n<p>It was working fine since months, suddenly now its not working. What could be the reason?</p>\n", "AcceptedAnswerId": 73490179, "AcceptedAnswer": "<p>I change java:8 to openjdk:8 and it works.</p>\n"}
{"Id": 74377433, "PostTypeId": 1, "Title": "What is the difference between \".\" and \"/\" in java classname?", "Body": "<p>I'm new to java. When I try to learn <a href=\"https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html\" rel=\"noreferrer\">Maven in 5 minutes</a>, I found that this command</p>\n<pre><code>java -cp target/my-app-1.0-SNAPSHOT.jar com.mycompany.app.App\n</code></pre>\n<p>worked the same way as</p>\n<pre><code>java -cp target/my-app-1.0-SNAPSHOT.jar com/mycompany/app/App\n</code></pre>\n<p>It drives me crazy because the last argument in the second command is actually a path. What is the difference between &quot;.&quot; and &quot;/&quot; in java classname?</p>\n<p>I have looked up some articles but still don't get it.</p>\n", "AcceptedAnswerId": 74377496, "AcceptedAnswer": "<p>This is an implementation detail leaking out.  Class names in the language are dot-separated; class names in the classfile format are slash-separated.  (<a href=\"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.2.\" rel=\"noreferrer\">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.2.</a>)  For the most part, internal names are not visible to users, but they do leak in some circumstances.  Many tools that deal with classfiles will convert from the external (dotted) to internal (slashed) name using something like <code>replace('.', '/')</code>, which has the effect that internal names are also accepted by the tool.  That's what's going on here.</p>\n"}
{"Id": 72040055, "PostTypeId": 1, "Title": "Wildfly org.jboss.nio -> FileNotFoundException: Invalid file path with Windows Java JDK 11.0.15+10", "Body": "<p>Since the update to <em>Eclipse Tamurin</em> <em>JDK 11.0.15+10</em> we notice a problem as soon a HTTP request reaches Wildfly 20.0.1.Final. The same behaviour exsists in Wildfly 26.1.0.Final This only happens with the <em>JDK</em> Windows version, the Linux <em>JDK</em> works fine.\nAs it is an &quot;Invalid file path&quot; error, an OS dependent BUG seems possible.</p>\n<p>Until now SAP Machine is the only JDK that does not encounter this failure.</p>\n<p>I'm still not sure if this is a <em>JDK</em> or a <em>Wildfly</em> problem...</p>\n<p>You can check that when opening the <em>Wildfly Management Interface</em>.</p>\n<pre><code>ERROR [io.undertow.request] (External Management Request Threads -- 1) UT005071: Undertow request failed HttpServerExchange{ GET /management}: java.io.IOError: java.io.FileNotFoundException: Invalid file path\n    at org.jboss.xnio@3.8.1.Final//org.xnio.channels.Channels$4.run(Channels.java:1103)\n    at org.jboss.xnio@3.8.1.Final//org.xnio.channels.Channels$4.run(Channels.java:1093)\n    at java.base/java.security.AccessController.doPrivileged(Native Method)\n    at org.jboss.xnio@3.8.1.Final//org.xnio.channels.Channels.&lt;clinit&gt;(Channels.java:1093)\n    at io.undertow.core@2.1.3.Final//io.undertow.io.UndertowOutputStream.write(UndertowOutputStream.java:231)\n    at io.undertow.core@2.1.3.Final//io.undertow.io.BlockingSenderImpl.writeBuffer(BlockingSenderImpl.java:245)\n    at io.undertow.core@2.1.3.Final//io.undertow.io.BlockingSenderImpl.writeBuffer(BlockingSenderImpl.java:238)\n    at io.undertow.core@2.1.3.Final//io.undertow.io.BlockingSenderImpl.send(BlockingSenderImpl.java:75)\n    at io.undertow.core@2.1.3.Final//io.undertow.io.BlockingSenderImpl.send(BlockingSenderImpl.java:107)\n    at org.jboss.as.domain-http-interface@12.0.3.Final//org.jboss.as.domain.http.server.DomainUtil.writeResponse(DomainUtil.java:89)\n    at org.jboss.as.domain-http-interface@12.0.3.Final//org.jboss.as.domain.http.server.DomainApiHandler$1.doSendResponse(DomainApiHandler.java:177)\n    at org.jboss.as.domain-http-interface@12.0.3.Final//org.jboss.as.domain.http.server.ResponseCallback.sendResponse(ResponseCallback.java:32)\n    at org.jboss.as.domain-http-interface@12.0.3.Final//org.jboss.as.domain.http.server.DomainApiHandler.handleRequest(DomainApiHandler.java:232)\n    at io.undertow.core@2.1.3.Final//io.undertow.server.handlers.encoding.EncodingHandler.handleRequest(EncodingHandler.java:72)\n    at org.jboss.as.domain-http-interface@12.0.3.Final//org.jboss.as.domain.http.server.DomainApiCheckHandler.handleRequest(DomainApiCheckHandler.java:91)\n    at org.jboss.as.domain-http-interface@12.0.3.Final//org.jboss.as.domain.http.server.security.ElytronIdentityHandler.lambda$handleRequest$0(ElytronIdentityHandler.java:62)\n    at org.wildfly.security.elytron-private@1.12.1.Final//org.wildfly.security.auth.server.SecurityIdentity.runAs(SecurityIdentity.java:328)\n    at org.wildfly.security.elytron-private@1.12.1.Final//org.wildfly.security.auth.server.SecurityIdentity.runAs(SecurityIdentity.java:285)\n    at org.jboss.as.controller@12.0.3.Final//org.jboss.as.controller.AccessAuditContext.doAs(AccessAuditContext.java:254)\n    at org.jboss.as.controller@12.0.3.Final//org.jboss.as.controller.AccessAuditContext.doAs(AccessAuditContext.java:225)\n    at org.jboss.as.domain-http-interface@12.0.3.Final//org.jboss.as.domain.http.server.security.ElytronIdentityHandler.handleRequest(ElytronIdentityHandler.java:61)\n    at io.undertow.core@2.1.3.Final//io.undertow.server.handlers.BlockingHandler.handleRequest(BlockingHandler.java:56)\n    at io.undertow.core@2.1.3.Final//io.undertow.server.Connectors.executeRootHandler(Connectors.java:370)\n    at io.undertow.core@2.1.3.Final//io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:830)\n    at org.jboss.threads@2.3.3.Final//org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)\n    at org.jboss.threads@2.3.3.Final//org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1982)\n    at org.jboss.threads@2.3.3.Final//org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1486)\n    at org.jboss.threads@2.3.3.Final//org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1348)\n    at java.base/java.lang.Thread.run(Thread.java:829)\n    at org.jboss.threads@2.3.3.Final//org.jboss.threads.JBossThread.run(JBossThread.java:485)\nCaused by: java.io.FileNotFoundException: Invalid file path\n    at java.base/java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:231)\n    at java.base/java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:126)\n    at org.jboss.xnio@3.8.1.Final//org.xnio.channels.Channels$4.run(Channels.java:1098)\n    ... 29 more\n</code></pre>\n<div class=\"s-table-container\">\n<table class=\"s-table\">\n<thead>\n<tr>\n<th>JDK</th>\n<th>Works with Wildfly</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Eclipse Tamurin</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Amazon Coretto</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Azul Zulu</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Bellsoft</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Oracle OpenJDK</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Oracle JDK</td>\n<td>no</td>\n</tr>\n<tr>\n<td>SAP Machine</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table>\n</div>", "AcceptedAnswerId": 72465068, "AcceptedAnswer": "<p>This is an issue in the JDK. You can wait for JDK 11.0.16 or downgrade to a lower version like JDK 11.0.14.</p>\n"}
{"Id": 73878386, "PostTypeId": 1, "Title": "Lock-free array expansion in Java", "Body": "<p>I have an array to which many threads are writing. However each thread has a pre-assigned range of indices which it may write to. Further, nothing will be reading from the array until all threads are done.</p>\n<p>So far, so thread-safe. The problem arises when I need to expand the array, by which of course I mean swap it out for a larger array which copies the first. This is only done occasionally (similar to an ArrayList).</p>\n<p>Currently I'm acquiring a lock for every single write to the array. Even though there is no need to lock in order to keep the array consistent, I'm having to lock in case the array is currently being copied/swapped.</p>\n<p>As there are very many writes I don't want to require a lock for them. I'm okay with a solution which requires locking for writer threads only while the array is being copied and swapped, as this is infrequent.</p>\n<p>But I can't just impose write locks only when the copy/swap is in progress, as threads may already be committing writes to the old array.</p>\n<p>I think I need some variety of barrier which waits for all writes to complete, then pauses the threads while I copy/swap the array. But CyclicBarrier would require me to know exactly how many threads are currently active, which is non-trivial and possibly susceptible to edge-cases in which   the barrier ends up waiting forever, or lowers itself too early. In particular I'm not sure how I'd deal with a new thread coming in while the barrier is already up, or how to deal with threads which are currently polling a job queue, so will never decrement the barrier count while there are no new jobs.</p>\n<p>I may have to implement something which (atomically) counts active threads and tries to pre-empt all the edge cases.</p>\n<p>But this may well be a &quot;solved&quot; problem that I don't know about, so I'm hoping there may be a simpler (therefore better) solution than the Cyclic barrier/thread counting. Ideally one which uses an existing utility class.</p>\n<p>By the way, I've considered CopyOnWriteArray. This is no use to me, as it copies for every write (a lot of them), not just array expansions.</p>\n<p>Also note the structure written to pretty much has to be an array, or array-based.</p>\n<p>Thanks</p>\n", "AcceptedAnswerId": 73878933, "AcceptedAnswer": "<p>Although it's technically not correct, you can probably use a <a href=\"https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/concurrent/locks/ReadWriteLock.html\" rel=\"nofollow noreferrer\">ReadWriteLock</a>. The threads that are writing to a single portion all use a read lock (this is the technically incorrect part, they're not reading...), and the resize uses a write lock. That way, all writing threads can work together. A resize has to wait until all portioned writes are done, which then blocks the entire array. Once that is done, all portioned writes can continue.</p>\n"}
{"Id": 72703351, "PostTypeId": 1, "Title": "Java 19 Pattern Matching Compilation Error: \"the switch statement does not cover all possible input values\"", "Body": "<p>Using the Brian Goetz article: <a href=\"https://www.infoq.com/articles/data-oriented-programming-java/\" rel=\"nofollow noreferrer\">https://www.infoq.com/articles/data-oriented-programming-java/</a></p>\n<pre class=\"lang-java prettyprint-override\"><code>sealed interface Opt&lt;T&gt; { \n    record Some&lt;T&gt;(T value) implements Opt&lt;T&gt; { }\n    record None&lt;T&gt;() implements Opt&lt;T&gt; { }\n}\n</code></pre>\n<p>This compiles and runs as expected. The exhaustive pattern matching works:</p>\n<pre class=\"lang-java prettyprint-override\"><code>Opt&lt;String&gt; optValue = doCalc(value);\nswitch (optValue) {\n  case Opt.Some&lt;String&gt; some -&gt; System.out.printf(&quot;got string: %s%n&quot;, some.value());\n  case Opt.None&lt;String&gt; none -&gt; System.out.printf(&quot;got none%n&quot;);\n};\n</code></pre>\n<p>This variation where I use the new Record patterns preview feature, breaks the exhaustive pattern matching, where this won't compile without adding a default case statement:</p>\n<pre class=\"lang-java prettyprint-override\"><code>Opt&lt;String&gt; optValue = doCalc(value);\nswitch (optValue) {\n    case Opt.Some&lt;String&gt;(String v) -&gt; System.out.printf(&quot;got string: %s%n&quot;, v);\n    case Opt.None&lt;String&gt; none -&gt; System.out.printf(&quot;got none%n&quot;);\n};\n</code></pre>\n<p>With <code>OpenJDK Runtime Environment (build 19-ea+32-2220)</code>, I get the compilation error: <code>the switch statement does not cover all possible input values</code>.</p>\n<p>When I add a default case statement, and the program works, but I don't get exhaustive pattern matching.</p>\n<p>If I remove the record pattern matching, the program works.</p>\n<p>If I create a variation of this without generics, that uses sealed classes, exhaustive pattern matching, and record patterns, it works.</p>\n<p>However, it seems the combination of record patterns, generics and exhaustive pattern matching does not work.</p>\n", "AcceptedAnswerId": 73977879, "AcceptedAnswer": "<p>This is a known bug in Java 19. This was confirmed by Brian Goetz himself on the amber-dev mailing list.</p>\n<p><strong>UPDATE</strong>: This issue is completely fixed in Java 20.</p>\n"}
{"Id": 74240190, "PostTypeId": 1, "Title": "Numeric comparing option for Java Collator", "Body": "<p><strong>Problem:</strong></p>\n<p>Let's say we have the following list of strings <code>{&quot;Test1.txt&quot;, &quot;Test2.txt&quot;, &quot;Test11.txt&quot;, &quot;Test22.txt&quot;}</code>, sorting them using <code>String::compareTo</code> or <code>Collator::compare</code> would result in following order:</p>\n<pre><code>Test1.txt\nTest2.txt\nTest22.txt\nTest3.txt\n</code></pre>\n<p>Which is inconvenient(arguably), while a more human-friendly outcome is:</p>\n<pre><code>Test1.txt\nTest2.txt\nTest3.txt\nTest22.txt\n</code></pre>\n<p>To resolve this issues we can write our own compare method which is numeric sensitive.\nBut what if we want numeric sensitive sort as well as the benefit of using existing implementation of <code>Collator</code> (or to avoid implementing one) for internationalization?</p>\n<p>Is there a right way to handle this? or maybe a reliable library that addresses this problem?</p>\n<p><strong>Other Languages:</strong></p>\n<p>In Javascript world the <code>Intl.Collator</code>'s constructors accepts a <code>CollatorOption</code> which allows you to set configs to achieve such functionality and more:</p>\n<pre><code>const usCollator = Intl.Collator(&quot;us&quot;, { numeric: true });\nconst list = [&quot;Test1.txt&quot;, &quot;Test2.txt&quot;, &quot;Test3.txt&quot;, &quot;Test22.txt&quot;];\nlist.sort(usCollator.compare);\nconsole.log(list);\n</code></pre>\n", "AcceptedAnswerId": 74302933, "AcceptedAnswer": "<p>You can use <a href=\"https://github.com/sawano/alphanumeric-comparator\" rel=\"nofollow noreferrer\">alphanumeric-comparator</a>, which is available in <a href=\"https://search.maven.org/search?q=a:alphanumeric-comparator\" rel=\"nofollow noreferrer\">Maven</a>.</p>\n"}
{"Id": 74337681, "PostTypeId": 1, "Title": "Is the permits relationship of Java Sealed classes/interfaces transitive", "Body": "<p>If I read the JLS <a href=\"https://docs.oracle.com/javase/specs/jls/se19/html/jls-8.html#jls-8.1.6\" rel=\"nofollow noreferrer\">\u00a78.1.6</a> and <a href=\"https://docs.oracle.com/javase/specs/jls/se19/html/jls-9.html#jls-9.1.4\" rel=\"nofollow noreferrer\">\u00a79.1.4</a> correctly, the classes that a sealed class/interface permits, are just the <em>direct</em> subclasses/interfaces.</p>\n<p>To illustrate this, consider the following example:</p>\n<pre class=\"lang-java prettyprint-override\"><code>public sealed interface I1 permits I2, C, D { /*...*/ }\npublic final class C implements I1 { /*...*/ }\npublic final class D implements I1 { /*...*/ }\n\npublic sealed interface I2 extends I1 permits E, F { /*...*/ }\npublic final class E implements I2 { /*...*/ }\npublic final class F implements I2 { /*...*/ }\n</code></pre>\n<p>If I understand the specification correctly, <code>I1</code> obviously permits <code>C</code> and <code>D</code> but not <code>E</code> and <code>F</code> (via the <code>extends</code> hierarchy of <code>I2</code> from <code>I1</code>). Is this correct?</p>\n<p>The reason I'm asking is what patterns are allowed for switch expressions of the following kind:</p>\n<pre class=\"lang-java prettyprint-override\"><code>I1 i1 = // ...\nreturn switch (i1) {\n    case C c -&gt; &quot;1&quot;;\n    case D d -&gt; &quot;2&quot;;\n    case E e -&gt; &quot;3&quot;; // Can we match over E?\n    case F f -&gt; &quot;4&quot;; // Can we match over F?\n    default  -&gt; &quot;5&quot;;\n};\n</code></pre>\n", "AcceptedAnswerId": 74339207, "AcceptedAnswer": "<blockquote>\n<p><code>I1</code> obviously permits <code>C</code> and <code>D</code> but not <code>E</code> and <code>F</code>. Is this correct?</p>\n</blockquote>\n<p>More accurately, you can say that <code>C</code> and <code>D</code> are in the set of <em>permitted direct subclasses</em> of <code>I1</code>, which is a term defined in section 9.1.4. The JLS doesn't really define what &quot;<code>I1</code> <em>permits</em> <code>C</code> and <code>D</code>&quot; means though.</p>\n<p>As for your switch expression, the reason why it works is two-fold. First, you are able to write a type pattern in a switch label if the type of the switch selector expression is downcast-convertible to that type.</p>\n<p><a href=\"https://docs.oracle.com/javase/specs/jls/se19/preview/specs/patterns-switch-record-patterns-jls.html#jls-14.11.1\" rel=\"nofollow noreferrer\">14.11.1</a></p>\n<blockquote>\n<p>A pattern case element p is switch compatible with T if p is applicable at type T (<a href=\"https://docs.oracle.com/javase/specs/jls/se19/preview/specs/patterns-switch-record-patterns-jls.html#jls-14.30.3\" rel=\"nofollow noreferrer\">14.30.3</a>).</p>\n</blockquote>\n<p>14.30.3:</p>\n<blockquote>\n<p>A pattern p is said to be applicable at a type T if one of the following rules apply:</p>\n<ul>\n<li>A type pattern that declares a pattern variable of a reference type U is applicable at another reference type T if T is downcast convertible to U (<a href=\"https://docs.oracle.com/javase/specs/jls/se19/preview/specs/patterns-switch-record-patterns-jls.html#jls-5.5\" rel=\"nofollow noreferrer\">5.5</a>).</li>\n</ul>\n</blockquote>\n<p>Obviously, <code>E</code> is downcast-convertible to <code>I1</code> through a widening reference conversion, because <code>E</code> implements <code>I1</code>. Note that this fact has nothing to do with <code>permits</code>. It is simply a result of <code>E implements I2</code> and <code>I2 extends I1</code>. Surely you would agree that <code>implements</code> and <code>extends</code> are transitive!</p>\n<p>Second, switch expressions need to be exhaustive. Your switch expression is always exhaustive because it has a <code>default</code> case. However, it is still exhaustive even without the <code>default</code> case.</p>\n<p>From now on, we will consider your switch expression but without the <code>default</code> case, because that is where <code>permits</code> plays a role. The rules to determine whether the set of case labels you wrote are exhaustive are specified in <a href=\"https://docs.oracle.com/javase/specs/jls/se19/preview/specs/patterns-switch-record-patterns-jls.html#jls-14.11.1.1\" rel=\"nofollow noreferrer\">14.11.1.1</a>. The important bit of your case is (this is kind of an inductive definition):</p>\n<blockquote>\n<ul>\n<li>A set of case elements is exhaustive for a type T if it contains a pattern that is unconditional at type T (14.30.3).</li>\n<li>A set of case elements is exhaustive for a type T that includes an abstract and sealed class or interface named C, if it is exhaustive\nfor every applicable permitted direct subtype of T.</li>\n</ul>\n</blockquote>\n<p>&quot;applicable permitted direct subtype of T&quot; in your case is really just the same as &quot;permitted direct subtype of T&quot;. You can also treat &quot;a type T that includes an abstract and sealed class or interface named C&quot; as the same as <code>T</code> - the &quot;includes&quot; relationship isn't relevant to your case. With <code>T=I1</code> in mind, we can start &quot;running&quot; this algorithm.</p>\n<p>We use the second rule first - the permitted direct subtypes of <code>I1</code> are <code>I2</code>, <code>C</code> and <code>D</code>. Since we have a <code>C c</code> and <code>D d</code> in the case elements, we know that our set of case elements is exhaustive for <code>C</code> and <code>D</code> (first rule). Is it also exhaustive for <code>I2</code>? To determine that, we use the second rule again. The permitted direct subtypes of <code>I2</code> are <code>E</code> and <code>F</code>. Using the first rule, we know that the case elements <code>E e</code> and <code>F f</code> are exhaustive for <code>E</code> and <code>F</code> respectively. We have now proven that that the set of case elements are exhaustive for <code>I2</code>, <code>C</code> and <code>D</code>, so it is exhaustive for <code>I1</code>, according to the second rule.</p>\n<p>So if you are talking about how switch patterns work, I think &quot;inductive&quot; is a better word to describe how the exhaustiveness of switch case labels are verified.</p>\n"}
{"Id": 72724816, "PostTypeId": 1, "Title": "Running unit tests with Spark 3.3.0 on Java 17 fails with IllegalAccessError: class StorageUtils cannot access class sun.nio.ch.DirectBuffer", "Body": "<p>According to the <a href=\"https://spark.apache.org/releases/spark-release-3-3-0.html\" rel=\"noreferrer\">release notes</a>, and specifically the ticket <em>Build and Run Spark on Java 17 (<a href=\"https://issues.apache.org/jira/browse/SPARK-33772\" rel=\"noreferrer\">SPARK-33772</a>)</em>, Spark now supports running on Java 17.</p>\n<p>However, using Java 17 (Temurin-17.0.3+7) with Maven (3.8.6) and maven-surefire-plugin (3.0.0-M7), when running a unit test that uses Spark (3.3.0) it fails with:</p>\n<blockquote>\n<p><code>java.lang.IllegalAccessError: class org.apache.spark.storage.StorageUtils$ (in unnamed module @0x1e7ba8d9) cannot access class sun.nio.ch.DirectBuffer (in module java.base) because module java.base does not export sun.nio.ch to unnamed module @0x1e7ba8d9</code></p>\n</blockquote>\n<p>The stack is:</p>\n<pre><code>java.lang.IllegalAccessError: class org.apache.spark.storage.StorageUtils$ (in unnamed module @0x1e7ba8d9) cannot access class sun.nio.ch.DirectBuffer (in module java.base) because module java.base does not export sun.nio.ch to unnamed module @0x1e7ba8d9\n  at org.apache.spark.storage.StorageUtils$.&lt;init&gt;(StorageUtils.scala:213)\n  at org.apache.spark.storage.StorageUtils$.&lt;clinit&gt;(StorageUtils.scala)\n  at org.apache.spark.storage.BlockManagerMasterEndpoint.&lt;init&gt;(BlockManagerMasterEndpoint.scala:114)\n  at org.apache.spark.SparkEnv$.$anonfun$create$9(SparkEnv.scala:353)\n  at org.apache.spark.SparkEnv$.registerOrLookupEndpoint$1(SparkEnv.scala:290)\n  at org.apache.spark.SparkEnv$.create(SparkEnv.scala:339)\n  at org.apache.spark.SparkEnv$.createDriverEnv(SparkEnv.scala:194)\n  at org.apache.spark.SparkContext.createSparkEnv(SparkContext.scala:279)\n  at org.apache.spark.SparkContext.&lt;init&gt;(SparkContext.scala:464)\n  at org.apache.spark.SparkContext$.getOrCreate(SparkContext.scala:2704)\n  at org.apache.spark.sql.SparkSession$Builder.$anonfun$getOrCreate$2(SparkSession.scala:953)\n  at scala.Option.getOrElse(Option.scala:189)\n  at org.apache.spark.sql.SparkSession$Builder.getOrCreate(SparkSession.scala:947)\n  [...]\n</code></pre>\n<p>The question <a href=\"https://stackoverflow.com/questions/72230174\"><em>Java 17 solution for Spark - java.lang.NoClassDefFoundError: Could not initialize class org.apache.spark.storage.StorageUtils</em></a> was asked only 2 months ago, but this pre-dated the Spark 3.3.0 release, and thus predated official support for Java 17.</p>\n<p>Why can't I run my Spark 3.3.0 test with Java 17, and how can we fix it?</p>\n", "AcceptedAnswerId": 72724817, "AcceptedAnswer": "<p>Even though Spark now supports Java 17, it still references the JDK internal class <code>sun.nio.ch.DirectBuffer</code>:</p>\n<pre><code>  // In Java 8, the type of DirectBuffer.cleaner() was sun.misc.Cleaner, and it was possible\n  // to access the method sun.misc.Cleaner.clean() to invoke it. The type changed to\n  // jdk.internal.ref.Cleaner in later JDKs, and the .clean() method is not accessible even with\n  // reflection. However sun.misc.Unsafe added a invokeCleaner() method in JDK 9+ and this is\n  // still accessible with reflection.\n  private val bufferCleaner: DirectBuffer =&gt; Unit = [...]\n</code></pre>\n<p>Under the Java module system, access to this class is restricted.  The <a href=\"https://docs.oracle.com/javase/9/migrate/toc.htm\" rel=\"noreferrer\">Java 9 migration guide</a> says:</p>\n<blockquote>\n<p>If you must use an internal API that has been made inaccessible by default, then you can break encapsulation using the --add-exports command-line option.</p>\n</blockquote>\n<p>We need to open access to our module.  To do this for Surefire, we add this configuration to the plugin:</p>\n<pre><code>&lt;plugin&gt;\n  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n  &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;\n  &lt;version&gt;3.0.0-M7&lt;/version&gt;\n  &lt;configuration&gt;\n    &lt;argLine&gt;--add-exports java.base/sun.nio.ch=ALL-UNNAMED&lt;/argLine&gt;\n  &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre>\n<p>Based on a <a href=\"https://lists.apache.org/thread/814cpb1rpp73zkhtv9t4mkzzrznl82yn\" rel=\"noreferrer\">discussion with one of the Spark developers</a>, Spark adds the following in order to execute all of its internal unit tests.</p>\n<blockquote>\n<p>These options are used to pass all Spark UTs, but maybe you don't need all.</p>\n</blockquote>\n<pre><code>--add-opens=java.base/java.lang=ALL-UNNAMED\n--add-opens=java.base/java.lang.invoke=ALL-UNNAMED\n--add-opens=java.base/java.lang.reflect=ALL-UNNAMED\n--add-opens=java.base/java.io=ALL-UNNAMED\n--add-opens=java.base/java.net=ALL-UNNAMED\n--add-opens=java.base/java.nio=ALL-UNNAMED\n--add-opens=java.base/java.util=ALL-UNNAMED\n--add-opens=java.base/java.util.concurrent=ALL-UNNAMED\n--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED\n--add-opens=java.base/sun.nio.ch=ALL-UNNAMED\n--add-opens=java.base/sun.nio.cs=ALL-UNNAMED\n--add-opens=java.base/sun.security.action=ALL-UNNAMED\n--add-opens=java.base/sun.util.calendar=ALL-UNNAMED\n</code></pre>\n<p>It was also commented:</p>\n<blockquote>\n<p>However, these Options needn't explicit add when using spark-shell, spark-sql and spark-submit</p>\n</blockquote>\n"}
{"Id": 74683791, "PostTypeId": 1, "Title": "Java CompletableFuture for sequential code", "Body": "<p>My new team is writing a Java gRPC service and to ensure that we never block the request thread we ended-up wrapping more or less ALL methods inside a <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html\" rel=\"nofollow noreferrer\">CompletableFuture</a> even if those endpoints are conceptually a sequential list of operation (no parallelism).</p>\n<p>So the code look something like (a Java example is available at the end if needed) :</p>\n<pre><code>  methodA()\n    methodB()\n      methodD() (let say this one is a 15ms RPC call)\n      methodE()\n    methodC()\n      methodF() (let say this one is a 5ms CPU intensive work)\n      methodG()\n \n</code></pre>\n<p>Context:</p>\n<ul>\n<li>In practice the application is much bigger and there're many more layers of functions</li>\n<li>Each application host need to handle 1000 QPS, so you can imagine that methodA is called at that rate</li>\n<li>Some function (few) make a RPC call that can take 5-30ms (IO)</li>\n<li>Some function (very few) run CPU intensive work (&lt; 5ms)</li>\n</ul>\n<p><strong>Edit 1:</strong> After more reading online yesterday, I understand that <strong>if, and only if, we are using true non-blocking HTTP and DB Client (and it doesn't seem like JDBC is non-blocking)</strong>, this pattern can reduce the total number of threads required. My understanding is that if we have enough memory to keep one thread per request, using a synchronous code would still probably be the most efficient implementation (reduce the overhead of switching threads and loading data), but if we didn't have enough memory to keep that many threads alive, then this notion of making the whole code non-blocking can reduce the number of thread and thus allow the application to scale to more request.</p>\n<p><strong>Question 1:</strong>\nI understand this unblocks the &quot;request thread&quot;, but in practice what's the advantage? Are we truly saving CPU time? In the example below, it feels like &quot;some&quot; thread will be alive the whole time anyways (in the example below, mostly the thread from CompletableFuture.supplyAsync in methodD), it just happens that it\u2019s not the same thread as the one who received the initial request.</p>\n<p><strong>Question 2:</strong>\nIs that pattern truly a &quot;best practice&quot; and all services should follow a similar pattern? Outside of making the code a bit harder to read I feel, per request 50+ methods gets invoked and 50+ times we call a mix of CompletableFuture <code>.thenCompose()</code> or <code>.supplyAsync</code>. It seems like it's would be adding some overhead. Was <code>CompletableFuture</code> designed to be used that way across the whole code base in every method?</p>\n<p><strong>Annex (java example):</strong></p>\n<pre><code>  public void myEndpoint(MyRequest request, StreamObserver&lt;MyResponse&gt; responseObserver) {\n    methodA(10)\n        .thenApply((response) -&gt; responseObserver.next(response));\n    \n  }\n\n  public CompletableFuture&lt;Integer&gt; methodA(Integer input) {\n    return CompletableFuture.completedFuture(input)\n        .thenCompose(this::methodB)\n        .thenCompose(this::methodC)\n        .thenApply((i) -&gt; {\n          System.out.println(&quot;MethodA executed by &quot;.concat(Thread.currentThread().getName() + &quot;: &quot; + i));\n          return i;\n        });\n  }\n\n  public CompletableFuture&lt;Integer&gt; methodB(Integer input) {\n    return CompletableFuture.completedFuture(input)\n        .thenCompose(this::methodD)\n        .thenCompose(this::methodE)\n        .thenApply((i) -&gt; {\n          System.out.println(&quot;MethodB executed by &quot;.concat(Thread.currentThread().getName() + &quot;: &quot; + i));\n          return i;\n        });\n  }\n\n  public CompletableFuture&lt;Integer&gt; methodC(Integer input) {\n    return CompletableFuture.completedFuture(input)\n        .thenCompose(this::methodF)\n        .thenCompose(this::methodG)\n        .thenApply((i) -&gt; {\n          System.out.println(&quot;MethodC executed by &quot;.concat(Thread.currentThread().getName() + &quot;: &quot; + i));\n          return i;\n        });\n  }\n\n  public CompletableFuture&lt;Integer&gt; methodD(Integer input) {\n    return CompletableFuture.supplyAsync(() -&gt; {\n      try {\n        // Assume it's a RPC call that takes 5-30ms\n        Thread.sleep(20);\n        System.out.println(&quot;MethodD executed by &quot;.concat(Thread.currentThread().getName() + &quot;: &quot; + input));\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n      return input + 1;\n    });\n  }\n\n  public CompletableFuture&lt;Integer&gt; methodE(Integer input) {\n    return CompletableFuture.supplyAsync(() -&gt; {\n      System.out.println(&quot;MethodE executed by &quot;.concat(Thread.currentThread().getName() + &quot;: &quot; + input));\n      return input + 1;\n    });\n  }\n\n  public CompletableFuture&lt;Integer&gt; methodF(Integer input) {\n    return CompletableFuture.supplyAsync(() -&gt; {\n      try {\n        // Let's assume it's a CPU intensive work that takes 2-5ms\n        Thread.sleep(5);\n        System.out.println(&quot;MethodF executed by &quot;.concat(Thread.currentThread().getName() + &quot;: &quot; + input));\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n      return input + 1;\n    });\n  }\n\n  public CompletableFuture&lt;Integer&gt; methodG(Integer input) {\n    return CompletableFuture.supplyAsync(() -&gt; {\n      System.out.println(&quot;MethodG executed by &quot;.concat(Thread.currentThread().getName() + &quot;: &quot; + input));\n      return input + 1;\n    });\n  }\n</code></pre>\n", "AcceptedAnswerId": 74796834, "AcceptedAnswer": "<p>The premise is that threads are a scarce resource, which is not intrinsic to threads but a consequence of using a pool of threads with a configured maximum. The reason today\u2019s frameworks use a pool is that threads, as implemented today, are expensive and creating too many of them can cause significant performance problems.</p>\n<p>You wrote</p>\n<blockquote>\n<p>My understanding is that if we have enough memory to keep one thread per request, using a synchronous code would still probably be the most efficient implementation\u2026</p>\n</blockquote>\n<p>which is going into the right direction, but it\u2019s important to keep in mind that there might be more constraints than memory. Some operating system\u2019s schedulers become significantly less efficient with a large number of threads, some may even have a fixed limit on how many threads a process is allowed to create.</p>\n<p>So, when you block a thread by waiting for another, you are limiting the parallel processing capabilities of the thread pool. This applies if you are using, as you put it, a \u201ctrue non-blocking\u201d API, or just any already existing API that returns futures. Submitting your own operations via <code>supplyAsync</code> has no point as the supplier\u2019s code still is executed by a thread, as you correctly pointed out.</p>\n<p>But when you have an existing future returned by an operation, you should rather chain dependent processing steps instead of waiting for its result via <code>join</code> and friends. Note that calling <code>join()</code> on existing futures can make things even worse than just blocking threads:</p>\n<p>When you call <code>join()</code> on a <code>CompletableFuture</code>, it tries to compensate the problem. When the caller is a worker thread of a Fork/Join pool, one of two things can happen:</p>\n<ul>\n<li>Instead of doing nothing, it may try to fetch pending jobs and execute them in-place, similar to <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#awaitQuiescence(long,java.util.concurrent.TimeUnit)\" rel=\"nofollow noreferrer\"><code>awaitQuiescence</code></a>.\n<ul>\n<li>In the best case, it will directly pick up the job you just scheduled with <code>supplyAsync</code> (if using the same pool) and execute it, almost as if you executed it without <code>CompletableFuture</code> (just consuming far more stack space).</li>\n<li>In the worst case, the thread will be busy executing a long running, entirely unrelated job while the job it\u2019s actually waiting for has been completed long ago. Imagine what happens if that unrelated job also calls <code>join</code>.</li>\n</ul>\n</li>\n<li>It may end up actually blocking the thread but using <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#managedBlock(java.util.concurrent.ForkJoinPool.ManagedBlocker)\" rel=\"nofollow noreferrer\"><code>ForkJoinPool.managedBlock(\u2026)</code></a>, which may start a new worker thread to ensure that the pool\u2019s configured parallelism is kept. Great to solve the problem of reduced parallelism, but on the other hand, reintroducing the very problem of resource consumption you actually wanted to solve with thread pools.</li>\n</ul>\n<p>The worst of all is that you can\u2019t even predict which of the two things will happen.</p>\n<hr />\n<p>There are, however, cases where not blocking a request thread by utilizing other threads has a point. Most notably when the response time for the request itself matters and the results of the background computation are delivered independent of the initial response. The most prominent example of this pattern is the event dispatch thread of GUI frameworks which must be kept free of long running operations, to be able to process subsequent user input.</p>\n<hr />\n<p>Note that there is a general solution on the way, to make 99% of all future chains obsolete. <a href=\"https://bugs.openjdk.org/browse/JDK-8277131\" rel=\"nofollow noreferrer\">Virtual Threads</a>, which are in preview state in JDK\u00a019, are cheap to create and allow to create one thread per request, just like you envisioned in the cite above. When a virtual thread gets blocked, it will release the underlying platform thread for the next virtual thread, so there is no reason to hesitate to call <code>join()</code> on any future, even those belonging to \u201ctrue non-blocking\u201d APIs.</p>\n<p>The best way to interoperate with this concept and the status quo is to design methods to <em>not</em> return futures, but perform the operation in-place. It\u2019s still possible to design a future chain when necessary, i.e. by using <code>.thenApplyAsync(this::inPlaceEvalMethod)</code> instead of <code>.thenCompose(this::futureReturningMethod)</code>. But at the same time, you can write a plain sequential version just calling these methods, which can be executed by a virtual thread. In fact, you could even add the plain sequential version today and benchmark both approaches. The results might convince your team members that \u201cnot blocking the request thread\u201d is not necessarily an improvement.</p>\n"}
{"Id": 72738837, "PostTypeId": 1, "Title": "In Java, what does the / (i.e., forward slash) mean in object references like $Lambda$15/0x00000008000a9440@32e6e9c3)?", "Body": "<p>In JShell, if I do this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>interface Foo { String foo(); }\n(Foo) () -&gt; &quot;hi&quot;\n</code></pre>\n<p>I get</p>\n<pre class=\"lang-java prettyprint-override\"><code>|  created interface Foo\n$2 ==&gt; $Lambda$15/0x00000008000a9440@32e6e9c3\n</code></pre>\n<p>From the research below, I know the following:</p>\n<p>$Lambda = <a href=\"https://blogs.oracle.com/javamagazine/post/behind-the-scenes-how-do-lambda-expressions-really-work-in-java\" rel=\"noreferrer\">an in-memory reference, as opposed to one persisted to disk by an anonymous inner class (AIC), to the generated bytecode</a></p>\n<p>$15 = <a href=\"https://stackoverflow.com/questions/11388840/java-compiled-classes-contain-dollar-signs/11388863#11388863\">an object reference to the AIC</a></p>\n<p>@32e6e9c3 = <a href=\"https://stackoverflow.com/questions/50624284/while-debugging-java-codes-what-does-mean-in-statements-like-instance789-or/50625530#50625530\">the sequential number of the object created--at least, in IntelliJ</a></p>\n<p>But what does the <code>/</code> (slash) indicate, as in <code>/0x00000008000a9440</code>?</p>\n", "AcceptedAnswerId": 72887915, "AcceptedAnswer": "<h1>Summary</h1>\n<p><code>$Lambda$15/0x00000008000a9440</code> is the name of the created hidden class.</p>\n<p>As it will be shown below, <code>0x00000008000a9440</code> is called a suffix.</p>\n<p>The name of the class can be retrieved by calling the <code>java.lang.Class.getName()</code> method.\nTherefore:</p>\n<ul>\n<li>For example, the same class names can be retrieved by a Java program (not through JShell).</li>\n<li>The question does not seem to be about JShell, but about the Java language and the Java Virtual Machine.</li>\n</ul>\n<h2>Example program to show name of hidden class</h2>\n<h3><code>Program</code> class</h3>\n<pre class=\"lang-java prettyprint-override\"><code>package info.brunov.stackoverflow.question72804142;\n\nimport java.util.function.Supplier;\n\npublic final class Program {\n    public static void main(final String args[]) {\n        printRuntimeInformation();\n\n        final Supplier&lt;String&gt; supplier1 = () -&gt; &quot;&quot;;\n        final Supplier&lt;String&gt; supplier2 = () -&gt; &quot;&quot;;\n        final Supplier&lt;String&gt; supplier3 = () -&gt; &quot;&quot;;\n        System.out.println(\n            String.format(&quot;Supplier 1: %s&quot;, supplier1.getClass().getName())\n        );\n        System.out.println(\n            String.format(&quot;Supplier 2: %s&quot;, supplier2.getClass().getName())\n        );\n        System.out.println(\n            String.format(&quot;Supplier 3: %s&quot;, supplier3.getClass().getName())\n        );\n    }\n\n    private static void printRuntimeInformation() {\n        System.out.println(\n            String.format(\n                &quot;Java Virtual Machine specification name: %s&quot;,\n                System.getProperty(&quot;java.vm.specification.name&quot;)\n            )\n        );\n        System.out.println(\n            String.format(\n                &quot;Java Virtual Machine specification version: %s&quot;,\n                System.getProperty(&quot;java.vm.specification.version&quot;)\n            )\n        );\n        System.out.println(\n            String.format(\n                &quot;Java Virtual Machine specification vendor: %s&quot;,\n                System.getProperty(&quot;java.vm.specification.vendor&quot;)\n            )\n        );\n        System.out.println(\n            String.format(\n                &quot;Java Virtual Machine implementation name: %s&quot;,\n                System.getProperty(&quot;java.vm.name&quot;)\n            )\n        );\n        System.out.println(\n            String.format(\n                &quot;Java Virtual Machine implementation version: %s&quot;,\n                System.getProperty(&quot;java.vm.version&quot;)\n            )\n        );\n        System.out.println(\n            String.format(\n                &quot;Java Virtual Machine implementation vendor: %s&quot;,\n                System.getProperty(&quot;java.vm.vendor&quot;)\n            )\n        );\n    }\n}\n</code></pre>\n<h3>Program output</h3>\n<pre><code>Java Virtual Machine specification name: Java Virtual Machine Specification\nJava Virtual Machine specification version: 18\nJava Virtual Machine specification vendor: Oracle Corporation\nJava Virtual Machine implementation name: OpenJDK 64-Bit Server VM\nJava Virtual Machine implementation version: 18.0.1-ea+10-Debian-1\nJava Virtual Machine implementation vendor: Debian\nSupplier 1: info.brunov.stackoverflow.question72804142.Program$$Lambda$18/0x0000000800c031f0\nSupplier 2: info.brunov.stackoverflow.question72804142.Program$$Lambda$19/0x0000000800c033f8\nSupplier 3: info.brunov.stackoverflow.question72804142.Program$$Lambda$20/0x0000000800c03600\n</code></pre>\n<h1>Documentation references</h1>\n<h2>JEP 371: Hidden Classes</h2>\n<p>The hidden classes have been introduced since JDK 15.\nFor additional details, please, refer to the JEP: <a href=\"https://openjdk.org/jeps/371\" rel=\"noreferrer\">JEP 371: Hidden Classes</a>.</p>\n<p>Here is an excerpt from the JEP on the hidden class names:</p>\n<blockquote>\n<p>The major difference in how a hidden class is created lies in the name it is given. <strong>A hidden class is not anonymous.</strong> It has a name that is available via <code>Class::getName</code> and may be shown in diagnostics (such as the output of <code>java -verbose:class</code>), in JVM TI class loading events, in JFR events, and in stack traces. However, the name has a sufficiently unusual form that it effectively makes the class invisible to all other classes. The name is the concatenation of:</p>\n<ol>\n<li>The binary name in internal form (JVMS 4.2.1) specified by <code>this_class</code> in the <code>ClassFile</code> structure, say <code>A/B/C</code>;</li>\n<li>The <code>'.'</code> character; and</li>\n<li>An unqualified name (JVMS 4.2.2) that is chosen by the JVM implementation.</li>\n</ol>\n<p>For example, if <code>this_class</code> specifies <code>com/example/Foo</code> (the internal form of the binary name <code>com.example.Foo</code>), then a hidden class derived from the <code>ClassFile</code> structure may be named <code>com/example/Foo.1234</code>. This string is neither a binary name nor the internal form of a binary name.</p>\n<p>Given a hidden class whose name is <code>A/B/C.x</code>, the result of <code>Class::getName</code> is the concatenation of:</p>\n<ol>\n<li>The binary name <code>A.B.C</code> (obtained by taking <code>A/B/C</code> and replacing each <code>'/'</code> with <code>'.'</code>);</li>\n<li>The '/' character; and</li>\n<li>The unqualified name <code>x</code>.</li>\n</ol>\n<p>For example, if a hidden class is named <code>com/example/Foo.1234</code>, then the result of <code>Class::getName</code> is <code>com.example.Foo/1234</code>. Again, this string is neither a binary name nor the internal form of a binary name.</p>\n<p>The namespace of hidden classes is disjoint from the namespace of normal classes. Given a <code>ClassFile</code> structure where <code>this_class</code> specifies <code>com/example/Foo/1234</code>, invoking <code>cl.defineClass(&quot;com.example.Foo.1234&quot;, bytes, ...)</code> merely results in a normal class named <code>com.example.Foo.1234</code>, distinct from the hidden class named <code>com.example.Foo/1234</code>. It is impossible to create a normal class named <code>com.example.Foo/1234</code> because <code>cl.defineClass(&quot;com.example.Foo/1234&quot;, bytes, ...)</code> will reject the string argument as being not a binary name.</p>\n</blockquote>\n<h2>Javadoc: <code>java.lang.Class#getName()</code> method</h2>\n<p>Let's refer to the method documentation: <a href=\"https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/Class.html#getName()\" rel=\"noreferrer\">Class (Java SE 15 &amp; JDK 15)</a>.</p>\n<p>An excerpt from the documentation:</p>\n<blockquote>\n<p>public\u00a0<a href=\"https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/String.html\" rel=\"noreferrer\" title=\"class in java.lang\">String</a>\u00a0getName()</p>\n<p>Returns the name of the entity (class, interface, array class, primitive type, or void) represented by this <code>Class</code> object.</p>\n<p>If this <code>Class</code> object represents a class or interface, not an array class, then:</p>\n<ul>\n<li>If the class or interface is not <a href=\"https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/Class.html#isHidden()\" rel=\"noreferrer\">hidden</a>, then the <a href=\"https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/ClassLoader.html#binary-name\" rel=\"noreferrer\">binary name</a> of the class or interface is returned.</li>\n<li>If the class or interface is hidden, then the result is a string of the form: <code>N + '/' + &lt;suffix&gt;</code> where <code>N</code> is the <a href=\"https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/ClassLoader.html#binary-name\" rel=\"noreferrer\">binary name</a> indicated by the <code>class</code> file passed to <a href=\"https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#defineHiddenClass(byte%5B%5D,boolean,java.lang.invoke.MethodHandles.Lookup.ClassOption...)\" rel=\"noreferrer\"><code>Lookup::defineHiddenClass</code></a>, and <code>&lt;suffix&gt;</code> is an unqualified name.</li>\n</ul>\n</blockquote>\n<h1>Implementation details: OpenJDK Java Virtual Machine: Hidden class name</h1>\n<h2>Introduction</h2>\n<p>Let's consider the source code of OpenJDK 18.</p>\n<p>Let's refer to the tag: <a href=\"https://github.com/openjdk/jdk18/tree/jdk-18%2B37\" rel=\"noreferrer\">openjdk/jdk18 at jdk-18+37</a>.</p>\n<p>Please, note that:</p>\n<ul>\n<li>The below execution paths are theoretical: I am using the mentioned source code tag.</li>\n<li>The below call stacks are real: I am using OpenJDK <code>18.0.1-ea+10-Debian-1</code>.</li>\n</ul>\n<h2>Hidden class name mangling</h2>\n<p>Hidden class creation (the <code>java.lang.invoke.MethodHandles.Lookup.defineHiddenClass()</code> method) includes the mangling of its name.</p>\n<p>Let's consider the following call stack:</p>\n<pre><code>&quot;main@1&quot; prio=5 tid=0x1 nid=NA runnable\n  java.lang.Thread.State: RUNNABLE\n      at java.lang.System$2.defineClass(System.java:2346)\n      at java.lang.invoke.MethodHandles$Lookup$ClassDefiner.defineClass(MethodHandles.java:2432)\n      at java.lang.invoke.MethodHandles$Lookup$ClassDefiner.defineClassAsLookup(MethodHandles.java:2413)\n      at java.lang.invoke.MethodHandles$Lookup.defineHiddenClass(MethodHandles.java:2119)\n      at java.lang.invoke.InnerClassLambdaMetafactory.generateInnerClass(InnerClassLambdaMetafactory.java:385)\n      at java.lang.invoke.InnerClassLambdaMetafactory.spinInnerClass(InnerClassLambdaMetafactory.java:293)\n      at java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite(InnerClassLambdaMetafactory.java:228)\n      at java.lang.invoke.LambdaMetafactory.metafactory(LambdaMetafactory.java:341)\n      at java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(DirectMethodHandle$Holder:-1)\n      at java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder:-1)\n      at java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:134)\n      at java.lang.invoke.CallSite.makeSite(CallSite.java:315)\n      at java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:279)\n      at java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:269)\n      at info.brunov.stackoverflow.question72804142.Program.main(Program.java:9)\n</code></pre>\n<p>Then let's consider the following execution path as <strong>the continuation of the call stack</strong>:</p>\n<pre><code>Class&lt;?&gt; java.lang.ClassLoader#defineClass0(ClassLoader loader, Class&lt;?&gt; lookup, String name, byte[] b, int off, int len, ProtectionDomain pd, boolean initialize, int flags, Object classData)\n\n// Native calls below.\njclass Unsafe_DefineClass0(JNIEnv *env, jobject unsafe, jstring name, jbyteArray data, int offset, int length, jobject loader, jobject pd)\njclass Unsafe_DefineClass_impl(JNIEnv *env, jstring name, jbyteArray data, int offset, int length, jobject loader, jobject pd)\nJNIEXPORT jclass JNICALL\njclass JVM_DefineClass(JNIEnv *env, const char *name, jobject loader, const jbyte *buf, jsize len, jobject pd)\njclass jvm_define_class_common(const char *name, jobject loader, const jbyte *buf, jsize len, jobject pd, const char *source, TRAPS)\nInstanceKlass* SystemDictionary::resolve_from_stream(ClassFileStream* st, Symbol* class_name, Handle class_loader, const ClassLoadInfo&amp; cl_info, TRAPS)\nInstanceKlass* SystemDictionary::resolve_hidden_class_from_stream(ClassFileStream* st, Symbol* class_name, Handle class_loader, const ClassLoadInfo&amp; cl_info, TRAPS)\nInstanceKlass* KlassFactory::create_from_stream(ClassFileStream* stream, Symbol* name, ClassLoaderData* loader_data, const ClassLoadInfo&amp; cl_info, TRAPS)\nInstanceKlass* ClassFileParser::create_instance_klass(bool changed_by_loadhook, const ClassInstanceInfo&amp; cl_inst_info, TRAPS)\nvoid ClassFileParser::mangle_hidden_class_name(InstanceKlass* const ik)\n</code></pre>\n<p>Let's refer to the piece of source code: <a href=\"https://github.com/openjdk/jdk18/blob/jdk-18+37/src/hotspot/share/classfile/classFileParser.cpp#L5920-L5938\" rel=\"noreferrer\">jdk18/classFileParser.cpp at jdk-18+37 \u00b7 openjdk/jdk18</a>:</p>\n<pre><code>void ClassFileParser::mangle_hidden_class_name(InstanceKlass* const ik) {\n  ResourceMark rm;\n  // Construct hidden name from _class_name, &quot;+&quot;, and &amp;ik. Note that we can't\n  // use a '/' because that confuses finding the class's package.  Also, can't\n  // use an illegal char such as ';' because that causes serialization issues\n  // and issues with hidden classes that create their own hidden classes.\n  char addr_buf[20];\n  if (DumpSharedSpaces) {\n    // We want stable names for the archived hidden classes (only for static\n    // archive for now). Spaces under default_SharedBaseAddress() will be\n    // occupied by the archive at run time, so we know that no dynamically\n    // loaded InstanceKlass will be placed under there.\n    static volatile size_t counter = 0;\n    Atomic::cmpxchg(&amp;counter, (size_t)0, Arguments::default_SharedBaseAddress()); // initialize it\n    size_t new_id = Atomic::add(&amp;counter, (size_t)1);\n    jio_snprintf(addr_buf, 20, SIZE_FORMAT_HEX, new_id);\n  } else {\n    jio_snprintf(addr_buf, 20, INTPTR_FORMAT, p2i(ik));\n  }\n</code></pre>\n<p>Please, note that the <code>+</code> character is used as the separator.</p>\n<h2>Get hidden class name</h2>\n<p>The <code>java.lang.Class#getName()</code> method includes the character replacement: <code>+</code> is replaced with <code>/</code>.</p>\n<p>Let's consider the following execution path:</p>\n<pre><code>String java.lang.Class.getName()\nString java.lang.Class.initClassName()\n\n// Native calls below.\nJNIEXPORT jstring JNICALL JVM_InitClassName(JNIEnv *env, jclass cls)\noop java_lang_Class::name(Handle java_class, TRAPS)\nconst char* java_lang_Class::as_external_name(oop java_class)\nconst char* Klass::external_name() const\nstatic char* convert_hidden_name_to_java(Symbol* name)\n</code></pre>\n<p>Let's refer to the piece of source code: <a href=\"https://github.com/openjdk/jdk18/blob/jdk-18%2B37/src/hotspot/share/oops/klass.cpp#L665-L666\" rel=\"noreferrer\">jdk18/klass.cpp at jdk-18+37 \u00b7 openjdk/jdk18</a>:</p>\n<pre><code>// Replace the last '+' char with '/'.\nstatic char* convert_hidden_name_to_java(Symbol* name) {\n</code></pre>\n"}
{"Id": 72635074, "PostTypeId": 1, "Title": "Java Record with @Builder.Default", "Body": "<p>I'm wondering is there any way to combine java record with lombok's <code>@Builder.Default</code>?\nLet's consider an example with properties object for new file creation.</p>\n<p>Before java 14</p>\n<pre><code>@Value\n@Builder\npublic class FileProperties {\n    @Builder.Default\n    String directory = System.getProperty(&quot;user.home&quot;);\n    @Builder.Default\n    String name = &quot;New file&quot;;\n    @Builder.Default\n    String extension = &quot;.txt&quot;;\n}\n</code></pre>\n<p>Java 14</p>\n<pre><code>@Builder\npublic record FileProperties (\n        String directory,\n        String name,\n        String extension\n) {}\n</code></pre>\n<p>But in case if I try to use something like</p>\n<pre><code>@Builder\npublic record FileProperties (\n        @Builder.Default\n        String directory = System.getProperty(&quot;user.home&quot;)\n) {}\n</code></pre>\n<p>Compiler will fail with an error, revealing that such syntax is not allowed. Do we have any solution to this problem?</p>\n", "AcceptedAnswerId": 75812314, "AcceptedAnswer": "<p>This functionality is not available at the moment. Please check the first comment under the question</p>\n<blockquote>\n<p>Not right now, I hadn't considered that when extending support of @Builder to records.</p>\n</blockquote>\n"}
{"Id": 73162834, "PostTypeId": 1, "Title": "Why writing map entries to a HashSet is slower than to a CopyOnWriteArraySet in Java", "Body": "<p>I think writing to a <code>HashSet</code> will be faster than to a <code>CopyOnWriteArraySet</code>; I'm not doing multi threading here. However I surpisingly got benchmark results indicate writing map entries to a CopyOnWriteArraySet is faster.</p>\n<p>I did benchmarking on writing 1000 of Map.Entry&lt;Integer, Integer&gt; into a HashSet vs CopyOnWriteArraySet.</p>\n<pre><code>Benchmark          (n)   Mode  Cnt     Score    Error  Units\nA.writeToCOWAS    1000  thrpt    4  1269.214 \u00b1 40.635  ops/s\nA.writeToHashSet  1000  thrpt    4   223.118 \u00b1 34.955  ops/s\n</code></pre>\n<p>In addition to that, I got benchmark results of equals() and hashCode() of <code>Map.Entry</code> reveal that the former is more expensive.</p>\n<pre><code>Benchmark           Mode  Cnt          Score          Error  Units\nMapEntry.equals    thrpt    4  177773394.054 \u00b1 75436098.388  ops/s\nMapEntry.hashCode  thrpt    4  272240403.923 \u00b1 38794396.671  ops/s\n</code></pre>\n<p>I believe writing to a HashSet calls to hashCode() while CopyOnWriteArraySet calls to equals().</p>\n<p>In the case of writing Integer or String,HashSet is way faster. Then I'm wondering what happens with <code>Map.Entry</code> type and why CopyOnWriteArraySet is faster according to my analysis?</p>\n<p>My perf test:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@State(Scope.Benchmark)\n@Fork(value = 2)\n@Warmup(iterations = 2, time = 3)\n@Measurement(iterations = 2, time = 3)\npublic class A {\n    public Set&lt;Map.Entry&lt;Integer,Integer&gt;&gt; set;\n\n    @Param({&quot;1000&quot;})\n    public int n;\n\n    @Setup\n    public void setup() {\n        set = new HashSet&lt;&gt;((int) (n / 0.75f + 1f), 0.75f);\n        for (int i = 0; i &lt; n; i++)\n            set.add(Map.entry(i, i));\n    }\n\n    private void eliminateDeadCode(Set&lt;Map.Entry&lt;Integer,Integer&gt;&gt; out, Blackhole hole) {\n        int hash = 0;\n        for (Map.Entry&lt;Integer,Integer&gt; o : out)\n            hash += o.hashCode();\n        hole.consume(hash);\n        if (out.size() != set.size())\n            throw new RuntimeException(out.size() + &quot; != &quot; + set.size());\n    }\n\n    @Benchmark\n    public void writeToCOWAS(Blackhole hole) {\n        Set&lt;Map.Entry&lt;Integer,Integer&gt;&gt; out = new CopyOnWriteArraySet&lt;&gt;(set);\n        eliminateDeadCode(out, hole);\n    }\n\n    @Benchmark\n    public void writeToHashSet(Blackhole hole) {\n        Set&lt;Map.Entry&lt;Integer,Integer&gt;&gt; out = new HashSet&lt;&gt;(set);\n        eliminateDeadCode(out, hole);\n    }\n\n    public static void main(String[] args) throws RunnerException {\n        Options opt = new OptionsBuilder()\n                .include(A.class.getSimpleName())\n                .build();\n        new Runner(opt).run();\n    }\n}\n</code></pre>\n", "AcceptedAnswerId": 73188382, "AcceptedAnswer": "<p>Hulk's answer is very instructive. However the problem is not necessarily the <code>Map.entry()</code> hashCode implementation, which is this, at least in Java 11:</p>\n<pre class=\"lang-java prettyprint-override\"><code>public int hashCode() {\n    return key.hashCode() ^ value.hashCode();\n}\n</code></pre>\n<p>The problem is that the hash codes of key and value are always the same, both in the OP's test, and in Hulk's test, hence the hash codes combined via XOR will always end up as 0. Change it so that key and value are different, and performance will change.</p>\n"}
{"Id": 73603358, "PostTypeId": 1, "Title": "Understanding javadoc for ZonedDateTime::plusDays", "Body": "<p>I am not able to understand one specific part of doc provided for the plusDays() method in ZonedDateTimeClass. Doc states:</p>\n<blockquote>\n<p>Returns a copy of this ZonedDateTime with the specified number of days\nadded.</p>\n<p>This operates on the local time-line, adding days to the local\ndate-time. This is then converted back to a ZonedDateTime, using the\nzone ID to obtain the offset.</p>\n<p>When converting back to ZonedDateTime, if the local date-time is in an\noverlap, then the offset will be retained if possible, otherwise the\nearlier offset will be used. If in a gap, the local date-time will be\nadjusted forward by the length of the gap.</p>\n<p>This instance is immutable and unaffected by this method call.</p>\n<p>Params: days \u2013 the days to add, may be negative</p>\n<p>Returns: a ZonedDateTime based on this date-time with the days added,\nnot null</p>\n<p>Throws: DateTimeException \u2013 if the result exceeds the supported date\nrange</p>\n</blockquote>\n<p>How I understand this: Assume we have ZonedDateTime object representing <code>September 4, 2022 6 PM in America/New_York TimeZone</code>. So this method will first convert it to LocalDateTime, that is, it will lose timezone information and just retain <code>September 4, 2022 6 PM</code>. It will add some number of days to it, let's say 7, so that the result is <code>September 11, 2022 6 PM</code>, and now it will convert it back to ZonedDateTime object by providing back the information related to timezone.</p>\n<p>However, I am not able to understand the latter part of documentation, that is,</p>\n<blockquote>\n<p>When converting back to ZonedDateTime, if the local date-time is in an\noverlap, then the offset will be retained if possible, otherwise the\nearlier offset will be used. If in a gap, the local date-time will be\nadjusted forward by the length of the gap.</p>\n</blockquote>\n<p>What do they mean by <code>local date-time is in an overlap</code>? <code>...then the offset will be retained if possible, otherwise the earlier offset will be used.</code> - what are these two different offsets? <code>If in a gap...</code> - what is this gap?</p>\n", "AcceptedAnswerId": 73604362, "AcceptedAnswer": "<p>The &quot;gap&quot; and &quot;overlap&quot; terms are defined in the class-level Javadoc of the <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/ZonedDateTime.html\" rel=\"nofollow noreferrer\"><code>ZonedDateTime</code></a> class:</p>\n<blockquote>\n<p>This class handles conversion from the local time-line of <code>LocalDateTime</code> to the instant time-line of <code>Instant</code>. The difference between the two time-lines is the offset from <code>UTC/Greenwich</code>, represented by a <code>ZoneOffset</code>.</p>\n<p>Converting between the two time-lines involves calculating the offset using the rules accessed from the ZoneId. Obtaining the offset for an instant is simple, as there is exactly one valid offset for each instant. By contrast, obtaining the offset for a local date-time is not straightforward. There are three cases:</p>\n<ul>\n<li>Normal, with one valid offset. For the vast majority of the year, the normal case applies, where there is a single valid offset for the local date-time.</li>\n<li>Gap, with zero valid offsets. This is when clocks jump forward typically due to the spring daylight savings change from &quot;winter&quot; to &quot;summer&quot;. In a gap there are local date-time values with no valid offset.</li>\n<li>Overlap, with two valid offsets. This is when clocks are set back typically due to the autumn daylight savings change from &quot;summer&quot; to &quot;winter&quot;. In an overlap there are local date-time values with two valid offsets.</li>\n</ul>\n</blockquote>\n<h2>Example</h2>\n<p>Let's use your specific example of the <code>America/New_York</code> time zone.  Per <a href=\"https://www.timeanddate.com/time/change/usa/new-york-state?year=2022\" rel=\"nofollow noreferrer\">timeanddate.com</a>, the daylight saving time changes in New York for 2022 are:</p>\n<blockquote>\n<h2>Mar 13, 2022 - Daylight Saving Time Started</h2>\n<p>When local standard time was about to reach<br />\nSunday, March 13, 2022, <strong>2:00:00</strong> am clocks were turned <strong>forward</strong> 1 hour to<br />\nSunday, March 13, 2022, <strong>3:00:00</strong> am local daylight time instead.</p>\n<h2>Nov 6, 2022 - Daylight Saving Time Ends</h2>\n<p>When local daylight time is about to reach<br />\nSunday, November 6, 2022, <strong>2:00:00</strong> am clocks are turned <strong>backward</strong> 1 hour to<br />\nSunday, November 6, 2022, <strong>1:00:00</strong> am local standard time instead.</p>\n</blockquote>\n<p>Therefore, there are no times between 2:00 and 2:59 on March 13 in the New York time zone.  1:59 occurs in standard time.  When that minute ends, no 2:00 hour occurs, and instead the local time jumps to 3:00 daylight time.</p>\n<p>Additionally, the times between 1:00 and 1:59 occur twice on November 6: one in daylight time and then one in standard time.</p>\n<h3>Java <code>ZonedDateTime</code> example</h3>\n<pre class=\"lang-java prettyprint-override\"><code>ZoneId zone = ZoneId.of(&quot;America/New_York&quot;);\n\n// 2022-03-13T03:15:30-04:00[America/New_York] (no 2:15)\nSystem.out.println(\n        ZonedDateTime.of(LocalDateTime.parse(&quot;2022-03-12T02:15:30&quot;), zone)\n        .plusDays(1));\n</code></pre>\n<p>Since 2:15 AM on March 12 doesn't exist and is within a 1-hour gap, the following logic you quoted applies, adding 1 hour to the local time:</p>\n<blockquote>\n<p>If in a gap, the local date-time will be adjusted forward by the length of the gap.</p>\n</blockquote>\n<p>Therefore, 3:15 AM is used when adding 1 day to March 11 at 1:15 AM.</p>\n<pre class=\"lang-java prettyprint-override\"><code>ZoneId zone = ZoneId.of(&quot;America/New_York&quot;);\n\n// 2022-11-06T01:15:30-04:00[America/New_York] (First 1:15)\nSystem.out.println(\n        ZonedDateTime.of(LocalDateTime.parse(&quot;2022-11-05T01:15:30&quot;), zone)\n        .plusDays(1));\n\n// 2022-11-06T01:15:30-05:00[America/New_York] (Second 1:15)\nSystem.out.println(\n        ZonedDateTime.of(LocalDateTime.parse(&quot;2022-11-05T01:15:30&quot;), zone)\n        .plusDays(1).plusHours(1));\n</code></pre>\n<p>Since 1:15 AM is during an overlap \u2014 1:15 AM occurs twice on November 6 \u2014 the following logic you quoted applies, using the same -04:00 zone offset as 1:15 AM on November 5:</p>\n<blockquote>\n<p>if the local date-time is in an overlap, then the offset will be retained if possible</p>\n</blockquote>\n<p>Therefore, adding 1 day to November 5 at 1:15 uses the first 1:15 on November 6.  This is made more evident by the second call, which shows that adding an hour to this timestamp returns the second 1:15 of November 6.  The fact that these are different points on the timeline despite both being 1:15 local time is evident by their differing zone offsets: -04:00 &amp; -05:00.</p>\n"}
{"Id": 73630599, "PostTypeId": 1, "Title": "Java regex inside text blocks", "Body": "<p>I surely hoped that this would be supported:</p>\n<pre><code>private static void regex() {\n    String plain = &quot;\\\\w+&quot;;\n    String withTextBlocks = &quot;&quot;&quot;\n        \\w+\n    &quot;&quot;&quot;;\n}\n</code></pre>\n<p>but <code>withTextBlocks</code> does not compile under Java-17. Isn\u2019t it the point of text blocks that we should not escape? I have been through the <a href=\"https://openjdk.org/jeps/378\" rel=\"nofollow noreferrer\">JEP</a> and maybe the explanation is there, but I can't grok through it. And a second question in case someone knows, is there a future JEP for this? Thank you.</p>\n", "AcceptedAnswerId": 73639221, "AcceptedAnswer": "<p>You are conflating <em>text blocks</em> with <em>raw strings</em>.  These are different features, though they were explored together and this may explain why you mentally folded them together.  There is no support yet for raw strings (which turn out to be somewhat more slippery than they might first appear.)</p>\n<blockquote>\n<p>Isn\u2019t it the point of text blocks that we should not escape?</p>\n</blockquote>\n<p>No, that is not the point of text blocks.  The point of text blocks is to allow us to represent <em>two dimensional</em> blocks of text in code, preserving the block's relative indentation but not absolute indentation.  This allows us to freely indent the source representation of the text block itself to match surrounding code, without affecting the indentation of the string the text block describes.</p>\n<p>An additional design goal is that text blocks should differ from ordinary string literals only in ways that pertain to their two-dimensional nature.  There should not be a different set of escape characters, or different escaping rules.  (If we ever do raw strings, it should apply equally to text blocks and traditional string literals.)  If text blocks worked the way you wanted, you'd probably be complaining that you can't do the same with single-line strings.  These aspects are orthogonal and the language should treat them orthogonally.</p>\n"}
{"Id": 73841877, "PostTypeId": 1, "Title": "Regex (?U)\\p{Punct} is missing some Unicode punctuation signs in Java", "Body": "<p>First of all, I want to remove all punctuation signs in a String. I wrote the following code.</p>\n<pre><code>Pattern pattern = Pattern.compile(&quot;\\\\p{Punct}&quot;);\nMatcher matcher = pattern.matcher(&quot;!\\&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~\uff08hello\uff09&quot;);\nif (matcher.find())\n    System.out.println(matcher.replaceAll(&quot;&quot;));\n</code></pre>\n<p>After replacement I got this output: <code>\uff08hello\uff09</code>.</p>\n<p>So the pattern matches the one of <code>!&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_</code>{|}~`, which matches the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html\" rel=\"nofollow noreferrer\">official docs</a>.</p>\n<p>But I want to remove &quot;\uff08&quot; <code>Fullwidth Left Parenthesis U+FF08*</code> and &quot;\uff09&quot; <code>Fullwidth Right Parenthesis U+FF09</code> as well, so I changed my code to this:</p>\n<pre><code>Pattern pattern = Pattern.compile(&quot;(?U)\\\\p{Punct}&quot;);\n        Matcher matcher = pattern.matcher(&quot;!\\&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~\uff08\uff09&quot;);\n        if (matcher.find())\n            System.out.println(matcher.replaceAll(&quot;&quot;));\n</code></pre>\n<p>After replacement, I got this output: <code>$+&lt;=&gt;^</code>|~`</p>\n<p>It indeed matched &quot;\uff08&quot; <code>Fullwidth Left Parenthesis U+FF08*</code> and &quot;\uff09&quot; <code>Fullwidth Right Parenthesis U+FF09</code>, bit it missed <code>$+&lt;=&gt;^</code>|~`.</p>\n<p>I am so confused. Why did that happen? Can anyone give some help?</p>\n", "AcceptedAnswerId": 73841931, "AcceptedAnswer": "<p>Unicode (that is when you use <code>(?U)</code>) and POSIX (when not using <code>(?U)</code>) disagrees on what counts as a punctuation.</p>\n<p>When you don't use <code>(?U)</code>, <code>\\p{Punct}</code> matches the <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/regex/Pattern.html#posix\" rel=\"noreferrer\">POSIX punctuation character class</a>, which is just</p>\n<pre><code>!&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~\n</code></pre>\n<p>When you use <code>(?U)</code>, <code>\\p{Punct}</code> matches the <a href=\"https://www.compart.com/en/unicode/category\" rel=\"noreferrer\">Unicode Punctuation category</a>, which does not include some of the characters in the above list, namely:</p>\n<pre><code>$+&lt;=&gt;^`|~\n</code></pre>\n<p>For example, the Unicode category for <code>$</code> is &quot;Symbol, Currency&quot;, or Sc. See <a href=\"https://www.fileformat.info/info/unicode/char/0024/index.htm\" rel=\"noreferrer\">here</a>.</p>\n<p>If you want to match $+&lt;=&gt;^`|~, plus all the Unicode punctuations, you can put them both in a character class. You can also just directly use the Unicode category &quot;P&quot;, rather than turning on Unicode mode with <code>(?U)</code>.</p>\n<pre><code>Pattern pattern = Pattern.compile(&quot;[\\\\p{P}$+&lt;=&gt;^`|~]&quot;);\nMatcher matcher = pattern.matcher(&quot;!\\&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~\uff08\uff09&quot;);\n// you don't need &quot;find&quot; first\nSystem.out.println(matcher.replaceAll(&quot;&quot;));\n</code></pre>\n"}
{"Id": 74081398, "PostTypeId": 1, "Title": "Android Studio : Cause: dagger/hilt/android/plugin/HiltGradlePlugin has been compiled by a more recent version of the Java Runtime", "Body": "<p>I am getting this error while opening a project</p>\n<p>Cause: dagger/hilt/android/plugin/HiltGradlePlugin has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0</p>\n<p>What i tried are :</p>\n<p><a href=\"https://stackoverflow.com/questions/69511275/plugin-id-dagger-hilt-android-plugin-was-not-found-in-any-of-the-following\">Plugin [id: &#39;dagger.hilt.android.plugin&#39;] was not found in any of the following sources</a></p>\n<p><a href=\"https://github.com/google/dagger/issues/3495\" rel=\"noreferrer\">https://github.com/google/dagger/issues/3495</a></p>\n<p><a href=\"https://stackoverflow.com/questions/73061190/dagger-hilt-error-while-compiling-project\">Dagger-hilt error while compiling project</a></p>\n<p><a href=\"https://stackoverflow.com/questions/47457105/class-has-been-compiled-by-a-more-recent-version-of-the-java-environment\">Class has been compiled by a more recent version of the Java Environment</a></p>\n<p><a href=\"https://stackoverflow.com/questions/70600315/how-to-resovle-java-runtime-class-file-version-55-0-this-version-of-the-java\">How to resovle Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0 error?</a></p>\n<p><a href=\"https://stackoverflow.com/questions/72264871/java-lang-unsupportedclassversionerror-while-integrating-firebase-performance-li\">java.lang.UnsupportedClassVersionError while integrating firebase performance library in react native app</a></p>\n<p><a href=\"https://stackoverflow.com/questions/68041148/java-lang-unsupportedclassversionerror-in-gradle-build\">java.lang.unsupportedclassversionerror in gradle build</a></p>\n<p><a href=\"https://stackoverflow.com/questions/62882730/the-hilt-android-gradle-plugin-is-applied-but-no-com-google-daggerhilt-android\">The Hilt Android Gradle plugin is applied but no com.google.dagger:hilt-android-compiler dependency was found</a></p>\n", "AcceptedAnswerId": 74247022, "AcceptedAnswer": "<p>The <a href=\"https://www.youtube.com/watch?v=6h2jdDdmU3Y\" rel=\"noreferrer\">youtube link</a> solution reported fixed the issue in my case, however here the instructions for the very latest Android Studio version (Android Studio Dolphin | 2021.3.1 Patch 1) on MacOS</p>\n<ol>\n<li>Select your project App main folder in the Android Studio Project panel</li>\n<li>Right click -&gt; Open Module Settings</li>\n<li>Select the Project entry below the Project Settings section</li>\n<li>In the dropdown menu next to SDK, select the Java 11 version</li>\n<li>Click on Apply and OK</li>\n<li>Rebuild the project</li>\n</ol>\n<p>If this doesn't work could be something deeper messed up in your machine JDK configuration or IDE configuration, would be easier I think to uninstall completely the IDE, clean the configuration file and install from scratch.\nIt could be overkill but sometime this is the most reliable way especially when nothing works.</p>\n"}
{"Id": 74837939, "PostTypeId": 1, "Title": "How to delete an \"Island\" of numbers in a 2D array in Java", "Body": "<p>I'm creating a method that takes a 2D array and scans throughout the array to find &quot;Chunks&quot; of numbers that are completely surrounded by zeros and convert those Chunks (I call them the islands) into zeros.</p>\n<p>I'm trying to delete all of the &quot;islands&quot; except for the largest one.</p>\n<p>For example, for this 2D array</p>\n<pre><code>1 2 3 2 2 1 \n3 2 2 1 2 3\n3 2 2 1 3 2\n2 3 2 3 2 2\n2 2 3 1 1 2\n3 2 1 2 3 2\n2 3 1 2 3 2\n2 2 0 0 0 0\n0 0 0 1 2 0\n0 0 0 0 0 0 \n</code></pre>\n<p>After the method the 2D array should now be:</p>\n<pre><code>1 2 3 2 2 1 \n3 2 2 1 2 3\n3 2 2 1 3 2\n2 3 2 3 2 2\n2 2 3 1 1 2\n3 2 1 2 3 2\n2 3 1 2 3 2\n2 2 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0 \n</code></pre>\n<p>the small chunk of <code>1 2 </code> is &quot;deleted&quot;</p>\n<p>Here is a second example, as the method should also take chunks of numbers that are not part of the &quot;main&quot; chunk as Islands and that are on the edges as well.</p>\n<p>The original array would be:</p>\n<pre><code>1 2 3 2 2 1 \n3 2 2 1 2 3\n3 2 2 1 3 2\n2 3 2 3 2 2\n2 2 3 1 1 2\n3 2 1 2 3 2\n2 3 1 2 3 2\n2 2 0 0 0 0\n0 0 0 1 2 3\n0 0 0 0 3 2 \n</code></pre>\n<p>After the method execution, it should be:</p>\n<pre><code>1 2 3 2 2 1 \n3 2 2 1 2 3\n3 2 2 1 3 2\n2 3 2 3 2 2\n2 2 3 1 1 2\n3 2 1 2 3 2\n2 3 1 2 3 2\n2 2 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0 \n</code></pre>\n<p>In this case, the island</p>\n<pre><code>1 2 3 \n  3 2\n</code></pre>\n<p>is deleted because it is separate from the big chunk and is surrounded by zeros.</p>\n<p>The following code is the one I have so far, and it does not work as intended. It's wrong because I believe that it's taking the main chunk as an Island, and what happens is that it converts the entire array into zeros instead of deleting only the small Islands. It includes an example, and you should see what It does when you run it.</p>\n<pre><code>public class destroyIslands {\n    public static void main(String[] args) {\n        int[][] example = { {1, 2, 3, 1, 2},\n                            {2, 3, 2, 1, 2},\n                            {3, 2, 1, 2, 2},\n                            {0, 2, 0, 0, 0},\n                            {0, 0, 0, 2, 1} };\n        \n        example = deleteIslandBoard(example);\n        printGrid(example);\n    }\n    \n    public static int[][] deleteIslandBoard(int[][] array) {\n      // Create a boolean array to track which cells have been visited\n      boolean[][] visited = new boolean[array.length][array[0].length];\n    \n      // Iterate \n      for (int i = 0; i &lt; array.length; i++) {\n        for (int j = 0; j &lt; array[0].length; j++) {\n            // If the cell is not visited and is part of an island\n            if (!visited[i][j] &amp;&amp; array[i][j] != 0) {\n                // Delete the island by setting all cells to 0\n                deleteIsland(array, i, j, visited);\n            }\n        }\n      }\n      // Return the modified array\n      return array;\n    }\n\n    public static void deleteIsland(int[][] array, int i, int j, boolean[][] visited) {\n      // Check if the current cell is out of board or if it has already been visited\n      if (i &lt; 0 || i &gt;= array.length || j &lt; 0 || j &gt;= array[0].length || visited[i][j]) {\n        return;\n      }\n      // Mark the current cell as visited\n      visited[i][j] = true; // If the current cell is part of the island, set it to 0\n      if (array[i][j] != 0) {\n        array[i][j] = 0;\n        // Recursively delete the neighboring cells that are part of the island\n        deleteIsland(array, i - 1, j, visited);\n        deleteIsland(array, i + 1, j, visited);\n        deleteIsland(array, i, j - 1, visited);\n        deleteIsland(array, i, j + 1, visited);\n      }\n    }\n    \n    public static void printGrid(int[][] grid) {\n        for(int i = 0; i &lt; grid.length; i++) {\n            for(int j = 0; j &lt; grid[i].length; j++) {\n                System.out.print(grid[i][j] + &quot; &quot;);\n            }\n            System.out.println();\n        }\n    }\n}\n</code></pre>\n<p>Any idea of what should I change?</p>\n", "AcceptedAnswerId": 74839246, "AcceptedAnswer": "<p>This problem can be solved in linear time <strong>O(n)</strong> by treating the cells of the given Matrix as the Vertexes of an <em>undirected disjointed</em> <a href=\"https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)\" rel=\"nofollow noreferrer\"><em>Graph</em></a>.</p>\n<p>The task boils down to exploring all <a href=\"https://en.wikipedia.org/wiki/Component_(graph_theory)\" rel=\"nofollow noreferrer\"><em>Connected components</em></a> (<em>islands</em>) in a Graph, and comparing them with each other.</p>\n<p>And for that we would need to implement of the Graph-traversal algorithms. I've chosen the <a href=\"https://en.wikipedia.org/wiki/Depth-first_search\" rel=\"nofollow noreferrer\"><em>Depth first search</em></a> algorithm for that purpose.</p>\n<p>To keep things simple, a Vertex of a graph would be represented as an array <code>int[]</code> of two elements containing coordinates of a cell (<em>feel free to reimplement it by defining a separate class for a Vertex to make each vertex aware of it neighbors by holding a reference to a collection of Vertices</em>)</p>\n<p>For convenience, I've made several changes to your <code>DestroyIslands</code> class:</p>\n<ul>\n<li>Introduced an inner class <code>Island</code>, which wraps a list of cells that constitute an Island (<em>Connected component of the Graph</em>). This class implements <code>Comparable</code> in based on size of the cells to make it easier to find the largest Island. And defines the method <code>destroy()</code> to nullify the rest Islands.</li>\n<li>Introduced a <code>static</code> array <code>NEIGHBOURS</code> of type <code>int[][]</code> representing all possible adjacent cells, which should be considered while iterating through the matrix from left to right and from top to bottom.</li>\n<li>Reference to the Matrix is stored in the instance field <code>grid</code>, and all methods of <code>DestroyIslands</code> are defined as instance methods (<em>if you want to keep them <code>static</code>, fill free to change them as you see fit, it would be easy if you grasp the algorithm itself</em>).</li>\n</ul>\n<p>That's how implementation might look like:</p>\n<pre><code>public class DestroyIslands {\n    public static final int[][] NEIGHBOURS = // adjacent cells\n        {{0, 1},   // horizontal -\n         {1, 0},   // vertical   |\n         {1, 1},   // diagonal   \\\n         {1, -1}}; // diagonal   /\n\n    private List&lt;Island&gt; islands = new ArrayList&lt;&gt;(); // collection of Islands\n    private int[][] grid; // matrix\n    \n    public DestroyIslands(int[][] grid) {\n        this.grid = grid;\n    }\n    \n    public class Island implements Comparable&lt;Island&gt; {\n        private List&lt;int[]&gt; cells = new ArrayList&lt;&gt;();\n        \n        public void addCell(int[] cell) {\n            cells.add(cell);\n        }\n        \n        public void destroy() {\n            cells.forEach(cell -&gt; grid[cell[0]][cell[1]] = 0);\n        }\n        \n        @Override\n        public int compareTo(Island other) {\n            return Integer.compare(cells.size(), other.cells.size());\n        }\n    }\n    \n    public void deleteIslandBoard() {\n        exploreIslands();\n        deleteSmallerIslands();\n    }\n    \n    public void exploreIslands() {\n        boolean[][] visited = new boolean[grid.length][grid[0].length];\n        \n        for (int i = 0; i &lt; grid.length; i++) {\n            for (int j = 0; j &lt; grid[0].length; j++) {\n                \n                if (!visited[i][j] &amp;&amp; grid[i][j] != 0) { // if a New Island was found\n                    exploreIsland(new int[]{i, j}, visited); // explore the Island, i.e. index all its cell and mark them as visited\n                }\n            }\n        }\n    }\n    \n    /**\n     * Depth first search implementation\n     */\n    public void exploreIsland(int[] cell, boolean[][] visited) {\n        Island island = new Island();\n        islands.add(island); // updating the list of Islands\n        \n        Deque&lt;int[]&gt; stack = new ArrayDeque&lt;&gt;();\n        stack.push(cell);\n        \n        while (!stack.isEmpty()) {\n            int[] next = stack.poll();\n            island.addCell(next);\n            \n            for (int[] shift : NEIGHBOURS) {\n                int row = next[0] + shift[0];\n                int col = next[1] + shift[1];\n                \n                if (isValid(row, col) &amp;&amp; !visited[row][col]) { // if cell exist, non-zero and not visited yet\n                    stack.push(new int[]{row, col});\n                    visited[row][col] = true;\n                }\n            }\n        }\n    }\n    \n    public boolean isValid(int row, int col) {\n        return row &gt;= 0 &amp;&amp; row &lt; grid.length\n            &amp;&amp; col &gt;= 0 &amp;&amp; col &lt; grid[0].length\n            &amp;&amp; grid[row][col] != 0;\n    }\n    \n    public void deleteSmallerIslands() {\n        if (islands.isEmpty()) return; // otherwise Collections.max() would throw NoSuchElementException\n\n        Island largest = Collections.max(islands);\n        for (Island next : islands) {\n            if (next != largest) next.destroy();\n        }\n    }\n    \n    public void printGrid() {\n        for (int i = 0; i &lt; grid.length; i++) {\n            for (int j = 0; j &lt; grid[i].length; j++) {\n                System.out.print(grid[i][j] + &quot; &quot;);\n            }\n            System.out.println();\n        }\n    }\n}\n</code></pre>\n<p><code>main()</code></p>\n<pre><code>public static void main(String[] args) {\n        int[][] example = {\n            {1, 2, 3, 1, 2},\n            {2, 3, 2, 1, 2},\n            {3, 2, 1, 2, 2},\n            {0, 2, 0, 0, 0},\n            {0, 0, 0, 2, 1}};\n        \n        DestroyIslands destroyIslands = new DestroyIslands(example);\n        destroyIslands.deleteIslandBoard();\n        destroyIslands.printGrid();\n    }\n</code></pre>\n<p><em>Output:</em></p>\n<pre><code>1 2 3 1 2 \n2 3 2 1 2 \n3 2 1 2 2 \n0 2 0 0 0 \n0 0 0 0 0\n</code></pre>\n<p><a href=\"https://www.jdoodle.com/ia/BoG\" rel=\"nofollow noreferrer\"><em>A link to Online Demo</em></a></p>\n"}
{"Id": 74752707, "PostTypeId": 1, "Title": "GitHub Actions : How to resolve : \"The process '/usr/bin/gpg' failed with exit code 2\" problem on actions/setup-java@v3", "Body": "<h2>Introduction</h2>\n<p>Currently, I'm trying to contribute on a GitHub Action that automatically publishes a java library.\nThe branch where I'm developing: <a href=\"https://github.com/MathieuSoysal/Java-maven-library-publisher/tree/2-add-automated-tests\" rel=\"noreferrer\">https://github.com/MathieuSoysal/Java-maven-library-publisher/tree/2-add-automated-tests</a></p>\n<p><strong>The yaml code of the Action</strong> :</p>\n<pre class=\"lang-yaml prettyprint-override\"><code>name: Java maven library publisher\nauthor: &quot;Mathieu Soysal (@MathieuSoysal)&quot;\ndescription: &quot;Build automatically Java Maven library and publish it to GitHub Packages and Maven Central.&quot;\nbranding:\n  icon: &quot;package&quot;\n  color: &quot;gray-dark&quot;\n\ninputs:\n  nexus-username:\n    description: &quot;Nexus username&quot;\n    required: true\n  nexus-password:\n    description: &quot;Nexus password&quot;\n    required: true\n  gpg-private-key:\n    description: &quot;GPG private key&quot;\n    required: true\n  gpg-passphrase:\n    description: &quot;GPG passphrase&quot;\n    required: true\n  github-token:\n    description: &quot;GitHub token&quot;\n    required: true\n  # Java version to use\n  java-version:\n    description: &quot;Java version to use&quot;\n    required: true\n    default: &quot;17&quot;\n  # Library version\n  library-version:\n    description: &quot;Library version&quot;\n    required: false\n    default: &quot;&quot;\n\nruns:\n  using: &quot;composite&quot;\n\n  steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Set up JDK 17 for deploy to OSSRH\n      uses: actions/setup-java@v3\n      with:\n        distribution: &quot;adopt&quot;\n        java-version: ${{ inputs.java-version }}\n        server-id: ossrh\n        server-username: ${{ inputs.nexus-username }}\n        server-password: ${{ inputs.nexus-password }}\n        gpg-private-key: ${{ inputs.gpg-private-key }}\n        gpg-passphrase: ${{ inputs.gpg-passphrase }}\n\n    - name: Build with Maven\n      run: mvn -B package --file pom.xml\n      shell: bash\n\n    - name: Update package version\n      if: ${{ inputs.library-version != '' }}\n      run: mvn versions:set -DnewVersion=${{ inputs.library-version }}\n      shell: bash\n\n    - name: Prepare Maven environnement with Java 17 for deployment to OSSRH\n      run: export MAVEN_OPTS=&quot;--add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.desktop/java.awt.font=ALL-UNNAMED&quot;\n      shell: bash\n\n    - name: Publish to Apache Maven Central\n      run: mvn deploy -PossrhDeploy\n      shell: bash\n      env:\n        MAVEN_USERNAME: ${{ inputs.nexus-username }}\n        MAVEN_CENTRAL_TOKEN: ${{ inputs.nexus-password }}\n        MAVEN_GPG_PASSPHRASE: ${{ inputs.gpg-passphrase }}\n\n    - name: Set up JDK 17 for deploy to github packages\n      uses: actions/setup-java@v3\n      with:\n        distribution: &quot;adopt&quot;\n        java-version: ${{ inputs.java-version }}\n        server-id: github\n\n    - name: Publish to GitHub Packages Apache Maven\n      run: mvn deploy -PgithubDeploy\n      shell: bash\n      env:\n        GITHUB_TOKEN: ${{ inputs.github-token }}\n</code></pre>\n<p><em>link to the code: <a href=\"https://github.com/MathieuSoysal/Java-maven-library-publisher/blob/2-add-automated-tests/action.yaml\" rel=\"noreferrer\">https://github.com/MathieuSoysal/Java-maven-library-publisher/blob/2-add-automated-tests/action.yaml</a></em></p>\n<p><strong>The workflow that execute the Action</strong>:</p>\n<pre class=\"lang-yaml prettyprint-override\"><code>name: Test Actions\n\non: [push]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Maven Library build and publish\n        uses: ./\n        with:\n          nexus-username: ${{ secrets.NEXUS_USERNAME }}\n          nexus-password: ${{ secrets.NEXUS_PASSWORD }}\n          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}\n          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}\n          library-version: $GITHUB_RUN_NUMBER\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          java-version: 17\n</code></pre>\n<p><em>Link to the code: <a href=\"https://github.com/MathieuSoysal/Java-maven-library-publisher/blob/2-add-automated-tests/.github/workflows/test-action.yml\" rel=\"noreferrer\">https://github.com/MathieuSoysal/Java-maven-library-publisher/blob/2-add-automated-tests/.github/workflows/test-action.yml</a></em></p>\n<h2>Problem</h2>\n<p>When i'm trying to execute the action I obtain this error:</p>\n<pre><code>Getting action download info\nDownload action repository 'actions/setup-java@v3' (SHA:c3ac5dd0ed8db40fedb61c32fbe677e6b355e94c)\nRun ./\nRun actions/checkout@v3\nSyncing repository: ***/Java-maven-library-publisher\nGetting Git version info\nTemporarily overriding HOME='/home/runner/work/_temp/45376e45-02aa-4aa5-b536-5f744f7e10d3' before making global git config changes\nAdding repository directory to the temporary git global config as a safe directory\n/usr/bin/git config --global --add safe.directory /home/runner/work/Java-maven-library-publisher/Java-maven-library-publisher\n/usr/bin/git config --local --get remote.origin.url\nhttps://github.com/***/Java-maven-library-publisher\nRemoving previously created refs, to avoid conflicts\nCleaning the repository\nDisabling automatic garbage collection\nSetting up auth\nFetching the repository\nDetermining the checkout info\nChecking out the ref\n/usr/bin/git log -1 --format='%H'\n'0e8da131bf626b218ddccbd08a661c7921dfb8da'\nRun actions/setup-java@v3\nInstalled distributions\nCreating settings.xml with server-id: ossrh\nWriting to /home/runner/.m2/settings.xml\nImporting private gpg key\nError: The process '/usr/bin/gpg' failed with exit code 2\n</code></pre>\n<h2>Question</h2>\n<p>Someone know how we can fix this <code>The process '/usr/bin/gpg' failed with exit code 2</code> for <em>actions/setup-java@v3</em> ?</p>\n", "AcceptedAnswerId": 74848449, "AcceptedAnswer": "<p>Can you make sure GPG private key is in the correct format. The key should be in the ASCII Armored format, which can be done by running the following command:</p>\n<pre><code>gpg --armor --export-secret-keys &lt;key_id&gt; &gt; gpg_key.asc\n</code></pre>\n<p>Once the key is in the correct format, add it as an input variable in the Action and pass it to the action in the workflow.</p>\n"}
